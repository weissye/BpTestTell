{
  "stories": [
    {
      "name": "deleteBruteForceUser",
      "entities": {
        "active": [
          "BruteForceUser"
        ],
        "lifecycle": [
          "addBruteForceUser"
        ],
        "passive": [
          "BruteForceUser"
        ]
      },
      "checks": {
        "preconditions": [
          "BruteForceUserExists"
        ],
        "postconditions": [
          "verifyBruteForceUserNotExists"
        ],
        "guards": [
          "validateBruteForceUserDeletion"
        ]
      },
      "steps": [
        "deleteBruteForceUser"
      ],
      "notes": [
        "Ensure the user is not referenced in any active sessions."
      ]
    },
    {
      "name": "deleteClient",
      "entities": {
        "active": [
          "ClientByRealmById"
        ],
        "lifecycle": [
          "addClientByRealmById"
        ],
        "passive": [
          "ClientByRealmById"
        ]
      },
      "checks": {
        "preconditions": [
          "clientExists"
        ],
        "postconditions": [
          "verifyClientByRealmByIdNotExists"
        ],
        "guards": [
          "clientDeletionAllowed"
        ]
      },
      "steps": [
        "deleteClientByRealmById"
      ],
      "notes": [
        "Ensure the client ID is valid before deletion."
      ]
    },
    {
      "name": "deleteClientProtocolMapper",
      "entities": {
        "active": [
          "ClientProtocolMappersModel"
        ],
        "lifecycle": [
          "addClientProtocolMappersModel"
        ],
        "passive": [
          "ClientProtocolMappersModel"
        ]
      },
      "checks": {
        "preconditions": [
          "clientProtocolMappersModelExists"
        ],
        "postconditions": [
          "verifyClientProtocolMappersModelNotExists"
        ],
        "guards": [
          "clientProtocolMappersModelIsNotInUse"
        ]
      },
      "steps": [
        "deleteClientProtocolMappersModel"
      ],
      "notes": [
        "Ensure the ClientProtocolMappersModel is not referenced by any active clients."
      ]
    },
    {
      "name": "deleteClientRole",
      "entities": {
        "active": [
          "ClientRole"
        ],
        "lifecycle": [
          "addClientRole"
        ],
        "passive": [
          "ClientRole"
        ]
      },
      "checks": {
        "preconditions": [
          "clientRoleExists"
        ],
        "postconditions": [
          "verifyClientRoleNotExists"
        ],
        "guards": [
          "clientRoleDeletionAllowed"
        ]
      },
      "steps": [
        "deleteClientRole"
      ],
      "notes": [
        "Ensure the ClientRole is not in use before deletion."
      ]
    },
    {
      "name": "deleteClientRoleComposites",
      "entities": {
        "active": [
          "ClientRoleComposites"
        ],
        "lifecycle": [
          "addClientRoleComposites"
        ],
        "passive": [
          "verifyClientRoleCompositesNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "clientRoleCompositesExists"
        ],
        "postconditions": [
          "verifyClientRoleCompositesNotExists"
        ],
        "guards": [
          "clientRoleCompositesDeleteAllowed"
        ]
      },
      "steps": [
        "deleteClientRoleComposites"
      ],
      "notes": [
        "Ensure that the clientRoleComposites is not referenced by any other entities."
      ]
    },
    {
      "name": "deleteClientScope",
      "entities": {
        "active": [
          "ClientScope"
        ],
        "lifecycle": [
          "addClientScope"
        ],
        "passive": [
          "verifyClientScopeNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "clientScopeExists"
        ],
        "postconditions": [
          "verifyClientScopeNotExists"
        ],
        "guards": [
          "clientScopeDeletionAllowed"
        ]
      },
      "steps": [
        "deleteClientScope"
      ],
      "notes": [
        "Ensure the ClientScope ID is valid before deletion."
      ]
    },
    {
      "name": "deleteClientScopeProtocolMappersModel",
      "entities": {
        "active": [
          "ClientScopeProtocolMappersModel"
        ],
        "lifecycle": [
          "addClientScopeProtocolMappersModel"
        ],
        "passive": [
          "ClientScopeProtocolMappersModel"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyClientScopeProtocolMappersModelExists"
        ],
        "postconditions": [
          "verifyClientScopeProtocolMappersModelNotExists"
        ],
        "guards": [
          "validateClientScopeProtocolMappersModelDeletion"
        ]
      },
      "steps": [
        "deleteClientScopeProtocolMappersModel"
      ],
      "notes": [
        "Ensure that the ClientScopeProtocolMappersModel is not in use before deletion."
      ]
    },
    {
      "name": "deleteClientScopeMapping",
      "entities": {
        "active": [
          "ClientScopeScopeMappingsClient"
        ],
        "lifecycle": [
          "addClientScopeScopeMappingsClient"
        ],
        "passive": [
          "ClientScopeScopeMappingsClient"
        ]
      },
      "checks": {
        "preconditions": [
          "clientScopeMappingExists"
        ],
        "postconditions": [
          "verifyClientScopeScopeMappingsClientNotExists"
        ],
        "guards": [
          "clientScopeMappingDeleteAllowed"
        ]
      },
      "steps": [
        "deleteClientScopeScopeMappingsClient"
      ],
      "notes": [
        "Ensure the clientScopeMapping is not in use before deletion."
      ]
    },
    {
      "name": "deleteClientScopeMapping",
      "entities": {
        "active": [
          "ClientScopeScopeMappingsRealm"
        ],
        "lifecycle": [
          "addClientScopeScopeMappingsRealm"
        ],
        "passive": [
          "ClientScopeScopeMappingsRealm"
        ]
      },
      "checks": {
        "preconditions": [
          "clientScopeMappingExists"
        ],
        "postconditions": [
          "verifyClientScopeScopeMappingsRealmNotExists"
        ],
        "guards": [
          "validateClientScopeScopeMappingsRealmDeletion"
        ]
      },
      "steps": [
        "deleteClientScopeScopeMappingsRealm"
      ],
      "notes": [
        "Ensure that the clientScopeMapping is not referenced by any other entities."
      ]
    },
    {
      "name": "deleteClientTemplate",
      "entities": {
        "active": [
          "ClientTemplate"
        ],
        "lifecycle": [
          "addClientTemplate"
        ],
        "passive": [
          "ClientTemplate"
        ]
      },
      "checks": {
        "preconditions": [
          "clientTemplateExists"
        ],
        "postconditions": [
          "verifyClientTemplateNotExists"
        ],
        "guards": [
          "clientTemplateDeletionAllowed"
        ]
      },
      "steps": [
        "deleteClientTemplate"
      ],
      "notes": [
        "Ensure that the ClientTemplate is not in use before deletion."
      ]
    },
    {
      "name": "deleteClientTemplateProtocolMappersModel",
      "entities": {
        "active": [
          "ClientTemplateProtocolMappersModel"
        ],
        "lifecycle": [
          "addClientTemplateProtocolMappersModel"
        ],
        "passive": [
          "ClientTemplateProtocolMappersModel"
        ]
      },
      "checks": {
        "preconditions": [
          "clientTemplateProtocolMappersModelExists"
        ],
        "postconditions": [
          "verifyClientTemplateProtocolMappersModelNotExists"
        ],
        "guards": [
          "clientTemplateProtocolMappersModelDeleteAllowed"
        ]
      },
      "steps": [
        "deleteClientTemplateProtocolMappersModel"
      ],
      "notes": [
        "Ensure the clientTemplateProtocolMappersModel is not in use before deletion."
      ]
    },
    {
      "name": "deleteClientsInitialAcces",
      "entities": {
        "active": [
          "ClientsInitialAcces"
        ],
        "lifecycle": [
          "addClientsInitialAcces"
        ],
        "passive": [
          "ClientsInitialAcces"
        ]
      },
      "checks": {
        "preconditions": [
          "ClientsInitialAccesExists"
        ],
        "postconditions": [
          "verifyClientsInitialAccesNotExists"
        ],
        "guards": [
          "validateDeleteClientsInitialAcces"
        ]
      },
      "steps": [
        "deleteClientsInitialAcces"
      ],
      "notes": [
        "Ensure that the ClientsInitialAcces is not in use before deletion."
      ]
    },
    {
      "name": "deleteComponent",
      "entities": {
        "active": [
          "Component"
        ],
        "lifecycle": [
          "addComponent"
        ],
        "passive": [
          "Component"
        ]
      },
      "checks": {
        "preconditions": [
          "Component exists"
        ],
        "postconditions": [
          "verifyComponentNotExists"
        ],
        "guards": [
          "id is valid"
        ]
      },
      "steps": [
        "deleteComponent"
      ],
      "notes": [
        "Ensure the Component is not in use before deletion."
      ]
    },
    {
      "name": "deleteConfig",
      "entities": {
        "active": [
          "Config"
        ],
        "lifecycle": [
          "addConfig"
        ],
        "passive": [
          "verifyConfigNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "configExists"
        ],
        "postconditions": [
          "verifyConfigNotExists"
        ],
        "guards": [
          "configIsDeletable"
        ]
      },
      "steps": [
        "deleteConfig"
      ],
      "notes": [
        "Ensure the config ID is valid before deletion."
      ]
    },
    {
      "name": "deleteConsent",
      "entities": {
        "active": [
          "Consent"
        ],
        "lifecycle": [
          "addConsent"
        ],
        "passive": [
          "User"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyConsentExists"
        ],
        "postconditions": [
          "verifyConsentNotExists"
        ],
        "guards": [
          "validateUserPermissions"
        ]
      },
      "steps": [
        "deleteConsent"
      ],
      "notes": [
        "Ensure the user has the necessary permissions to delete the consent."
      ]
    },
    {
      "name": "deleteCredential",
      "entities": {
        "active": [
          "Credential"
        ],
        "lifecycle": [
          "addCredential"
        ],
        "passive": [
          "Credential"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCredentialExists"
        ],
        "postconditions": [
          "verifyCredentialNotExists"
        ],
        "guards": [
          "validateCredentialDeletion"
        ]
      },
      "steps": [
        "deleteCredential"
      ],
      "notes": [
        "Ensure proper authorization before deletion."
      ]
    },
    {
      "name": "deleteClientScope",
      "entities": {
        "active": [
          "DefaultClientScope"
        ],
        "lifecycle": [
          "addDefaultClientScope"
        ],
        "passive": [
          "DefaultClientScope"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDefaultClientScopeExists"
        ],
        "postconditions": [
          "verifyDefaultClientScopeNotExists"
        ],
        "guards": [
          "checkClientScopeDeletion"
        ]
      },
      "steps": [
        "deleteDefaultClientScope"
      ],
      "notes": [
        "Ensure that the DefaultClientScope is not in use before deletion."
      ]
    },
    {
      "name": "deleteExecution",
      "entities": {
        "active": [
          "Execution"
        ],
        "lifecycle": [
          "addExecution"
        ],
        "passive": [
          "verifyExecutionNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyExecutionNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteExecution"
      ],
      "notes": [
        "Ensure the execution ID is valid before deletion."
      ]
    },
    {
      "name": "deleteFederatedIdentity",
      "entities": {
        "active": [
          "FederatedIdentity"
        ],
        "lifecycle": [
          "addFederatedIdentity"
        ],
        "passive": [
          "verifyFederatedIdentityNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "FederatedIdentityExists"
        ],
        "postconditions": [
          "verifyFederatedIdentityNotExists"
        ],
        "guards": [
          "validateDeleteFederatedIdentity"
        ]
      },
      "steps": [
        "deleteFederatedIdentity"
      ],
      "notes": [
        "Ensure the FederatedIdentity is not in use before deletion."
      ]
    },
    {
      "name": "deleteFlow",
      "entities": {
        "active": [
          "Flow"
        ],
        "lifecycle": [
          "addFlow"
        ],
        "passive": [
          "Flow"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFlowExists"
        ],
        "postconditions": [
          "verifyFlowNotExists"
        ],
        "guards": [
          "validateFlowDeletion"
        ]
      },
      "steps": [
        "deleteFlow"
      ],
      "notes": [
        "Ensure that the Flow is not in use before deletion."
      ]
    },
    {
      "name": "deleteGroupByRealmById",
      "entities": {
        "active": [
          "GroupByRealmById"
        ],
        "lifecycle": [
          "addGroupByRealmById"
        ],
        "passive": [
          "verifyGroupByRealmByIdNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "groupByRealmByIdExists"
        ],
        "postconditions": [
          "verifyGroupByRealmByIdNotExists"
        ],
        "guards": [
          "groupByRealmByIdDeleteAllowed"
        ]
      },
      "steps": [
        "deleteGroupByRealmById"
      ],
      "notes": [
        "Ensure the group is not referenced by other entities before deletion."
      ]
    },
    {
      "name": "deleteGroupRoleMappingsClient",
      "entities": {
        "active": [
          "GroupRoleMappingsClient"
        ],
        "lifecycle": [
          "addGroupRoleMappingsClient"
        ],
        "passive": [
          "GroupRoleMappingsClient"
        ]
      },
      "checks": {
        "preconditions": [
          "groupRoleMappingsClientExists"
        ],
        "postconditions": [
          "verifyGroupRoleMappingsClientNotExists"
        ],
        "guards": [
          "validateGroupRoleMappingsClientDeletion"
        ]
      },
      "steps": [
        "deleteGroupRoleMappingsClient"
      ],
      "notes": [
        "Ensure the groupRoleMappingsClient is not referenced by any other entities."
      ]
    },
    {
      "name": "deleteGroupRoleMappingsRealm",
      "entities": {
        "active": [
          "GroupRoleMappingsRealm"
        ],
        "lifecycle": [
          "addGroupRoleMappingsRealm"
        ],
        "passive": [
          "GroupRoleMappingsRealm"
        ]
      },
      "checks": {
        "preconditions": [
          "groupRoleMappingsRealmExists"
        ],
        "postconditions": [
          "verifyGroupRoleMappingsRealmNotExists"
        ],
        "guards": [
          "validateGroupRoleMappingsRealmDeletion"
        ]
      },
      "steps": [
        "deleteGroupRoleMappingsRealm"
      ],
      "notes": [
        "Ensure proper permissions are in place before deletion."
      ]
    },
    {
      "name": "deleteInstance",
      "entities": {
        "active": [
          "Instance"
        ],
        "lifecycle": [
          "addInstance"
        ],
        "passive": [
          "verifyInstanceNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "instanceExists"
        ],
        "postconditions": [
          "verifyInstanceNotExists"
        ],
        "guards": [
          "instanceIsDeletable"
        ]
      },
      "steps": [
        "deleteInstance"
      ],
      "notes": [
        "Ensure the instance ID is valid before deletion."
      ]
    },
    {
      "name": "deleteMapperVariant",
      "entities": {
        "active": [
          "Mapper"
        ],
        "lifecycle": [
          "addMapper"
        ],
        "passive": [
          "verifyMapperNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "mapperExists"
        ],
        "postconditions": [
          "verifyMapperNotExists"
        ],
        "guards": [
          "mapperDeletionAllowed"
        ]
      },
      "steps": [
        "deleteMapper"
      ],
      "notes": [
        "Ensure that the mapper is not in use before deletion."
      ]
    },
    {
      "name": "deleteNode",
      "entities": {
        "active": [
          "Node"
        ],
        "lifecycle": [
          "addNode"
        ],
        "passive": [
          "Node"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyNodeExists"
        ],
        "postconditions": [
          "verifyNodeNotExists"
        ],
        "guards": [
          "validateNodeDeletion"
        ]
      },
      "steps": [
        "deleteNode"
      ],
      "notes": [
        "Ensure that the Node ID is valid before deletion."
      ]
    },
    {
      "name": "deleteOptionalClientScope",
      "entities": {
        "active": [
          "OptionalClientScope"
        ],
        "lifecycle": [
          "addOptionalClientScope"
        ],
        "passive": [
          "verifyOptionalClientScopeNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyOptionalClientScopeNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteOptionalClientScope"
      ],
      "notes": [
        "Ensure that the OptionalClientScope is not in use before deletion."
      ]
    },
    {
      "name": "deleteRequiredAction",
      "entities": {
        "active": [
          "RequiredAction"
        ],
        "lifecycle": [
          "addRequiredAction"
        ],
        "passive": [
          "verifyRequiredActionNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "RequiredAction exists"
        ],
        "postconditions": [
          "RequiredAction not exists"
        ],
        "guards": [
          "id is valid"
        ]
      },
      "steps": [
        "deleteRequiredAction"
      ],
      "notes": [
        "Ensure to handle potential errors during deletion."
      ]
    },
    {
      "name": "deleteRole",
      "entities": {
        "active": [
          "RoleByRealmByRoleName"
        ],
        "lifecycle": [
          "addRoleByRealmByRoleName"
        ],
        "passive": [
          "verifyRoleByRealmByRoleNameNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "roleExists"
        ],
        "postconditions": [
          "verifyRoleByRealmByRoleNameNotExists"
        ],
        "guards": [
          "roleIsNotInUse"
        ]
      },
      "steps": [
        "deleteRoleByRealmByRoleName"
      ],
      "notes": [
        "Ensure that the role is not referenced by any other entities before deletion."
      ]
    },
    {
      "name": "deleteRolesById",
      "entities": {
        "active": [
          "RolesById"
        ],
        "lifecycle": [
          "addRolesById"
        ],
        "passive": [
          "verifyRolesByIdNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "RolesById exists"
        ],
        "postconditions": [
          "verifyRolesByIdNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteRolesById"
      ],
      "notes": []
    },
    {
      "name": "deleteRolesByIdComposites",
      "entities": {
        "active": [
          "addRolesByIdComposites"
        ],
        "lifecycle": [
          "deleteRolesByIdComposites"
        ],
        "passive": [
          "verifyRolesByIdCompositesNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyRolesByIdCompositesNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteRolesByIdComposites"
      ],
      "notes": [
        "Ensure that the id is valid before deletion."
      ]
    },
    {
      "name": "deleteRotated",
      "entities": {
        "active": [
          "Rotated"
        ],
        "lifecycle": [
          "addRotated"
        ],
        "passive": [
          "verifyRotatedNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Rotated exists"
        ],
        "postconditions": [
          "Rotated not exists"
        ],
        "guards": [
          "id is valid"
        ]
      },
      "steps": [
        "deleteRotated"
      ],
      "notes": [
        "Ensure that the Rotated entity is not referenced elsewhere."
      ]
    },
    {
      "name": "deleteSession",
      "entities": {
        "active": [
          "Session"
        ],
        "lifecycle": [
          "addSession"
        ],
        "passive": [
          "User"
        ]
      },
      "checks": {
        "preconditions": [
          "sessionExists"
        ],
        "postconditions": [
          "verifySessionNotExists"
        ],
        "guards": [
          "sessionIsActive"
        ]
      },
      "steps": [
        "deleteSession"
      ],
      "notes": [
        "Ensure the session is not in use before deletion."
      ]
    },
    {
      "name": "deleteUserByRealmById",
      "entities": {
        "active": [
          "UserByRealmById"
        ],
        "lifecycle": [
          "addUserByRealmById"
        ],
        "passive": [
          "verifyUserByRealmByIdNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "userByRealmByIdExists"
        ],
        "postconditions": [
          "verifyUserByRealmByIdNotExists"
        ],
        "guards": [
          "userByRealmByIdDeleteAllowed"
        ]
      },
      "steps": [
        "deleteUserByRealmById"
      ],
      "notes": []
    },
    {
      "name": "deleteUserGroup",
      "entities": {
        "active": [
          "UserGroup"
        ],
        "lifecycle": [
          "addUserGroup"
        ],
        "passive": [
          "User"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyUserGroupExists"
        ],
        "postconditions": [
          "verifyUserGroupNotExists"
        ],
        "guards": [
          "validateUserGroupDeletion"
        ]
      },
      "steps": [
        "deleteUserGroup"
      ],
      "notes": [
        "Ensure that the UserGroup is not referenced by any active users."
      ]
    },
    {
      "name": "deleteUserRoleMappingsClient",
      "entities": {
        "active": [
          "UserRoleMappingsClient"
        ],
        "lifecycle": [
          "addUserRoleMappingsClient"
        ],
        "passive": [
          "UserRoleMappingsClient"
        ]
      },
      "checks": {
        "preconditions": [
          "userRoleMappingsClientExists"
        ],
        "postconditions": [
          "verifyUserRoleMappingsClientNotExists"
        ],
        "guards": [
          "validateUserRoleMappingsClientDeletion"
        ]
      },
      "steps": [
        "deleteUserRoleMappingsClient"
      ],
      "notes": [
        "Ensure the UserRoleMappingsClient is not referenced by other entities."
      ]
    },
    {
      "name": "deleteUserRoleMappingsRealm",
      "entities": {
        "active": [
          "UserRoleMappingsRealm"
        ],
        "lifecycle": [
          "addUserRoleMappingsRealm"
        ],
        "passive": [
          "UserRoleMappingsRealm"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyUserRoleMappingsRealmExists"
        ],
        "postconditions": [
          "verifyUserRoleMappingsRealmNotExists"
        ],
        "guards": [
          "validateUserRoleMappingsRealmDeletion"
        ]
      },
      "steps": [
        "deleteUserRoleMappingsRealm"
      ],
      "notes": [
        "Ensure that the UserRoleMappingsRealm is not in use before deletion."
      ]
    },
    {
      "name": "deleteUser",
      "entities": {
        "active": [
          "Users"
        ],
        "lifecycle": [
          "addUsers"
        ],
        "passive": [
          "verifyUsersNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "userExists"
        ],
        "postconditions": [
          "verifyUsersNotExists"
        ],
        "guards": [
          "userDeletionAllowed"
        ]
      },
      "steps": [
        "deleteUsers"
      ],
      "notes": [
        "Ensure the user ID is valid before deletion."
      ]
    }
  ]
}