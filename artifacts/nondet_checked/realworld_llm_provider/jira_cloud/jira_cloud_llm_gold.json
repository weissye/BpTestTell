{
  "gold": [
    {
      "path": "/rest/api/3/announcementBanner",
      "method": "GET",
      "operationId": "getBanner",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current announcement banner to ensure that the message displayed to users is accurate and up-to-date.",
      "ideal": "The API should return the current announcement banner details, including the message, visibility settings, and any associated links."
    },
    {
      "path": "/rest/api/3/announcementBanner",
      "method": "PUT",
      "operationId": "setBanner",
      "summary": "",
      "user": "As an admin, I want to update the announcement banner to communicate important changes to all users, ensuring they are aware of the latest updates.",
      "ideal": "The API should successfully update the announcement banner with the new message and settings, returning a confirmation of the update."
    },
    {
      "path": "/rest/api/3/data-policy",
      "method": "GET",
      "operationId": "getPolicy",
      "summary": "",
      "user": "As a project manager, I want to retrieve the data policy for my project to ensure compliance with data protection regulations.",
      "ideal": "The API should return the current data policy details, including the policy ID, description, and any relevant compliance information."
    },
    {
      "path": "/rest/api/3/data-policy/project",
      "method": "GET",
      "operationId": "getPolicies",
      "summary": "",
      "user": "As a compliance officer, I need to access all data policies associated with various projects to audit and verify adherence to legal standards.",
      "ideal": "The API should return a list of all data policies linked to projects, including project IDs, policy descriptions, and their statuses."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/field",
      "method": "PUT",
      "operationId": "AppIssueFieldValueUpdateResource.updateIssueFields_put",
      "summary": "",
      "user": "User123",
      "ideal": "Update the issue fields for a specific issue in the Jira Cloud platform."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/properties/{entityType}",
      "method": "PUT",
      "operationId": "MigrationResource.updateEntityPropertiesValue_put",
      "summary": "",
      "user": "User456",
      "ideal": "Update properties for a specific entity type during migration."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/workflow/rule/search",
      "method": "POST",
      "operationId": "MigrationResource.workflowRuleSearch_post",
      "summary": "",
      "user": "User789",
      "ideal": "Search for workflow rules that need to be migrated in the Jira Cloud platform."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties",
      "method": "GET",
      "operationId": "AddonPropertiesResource.getAddonProperties_get",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all properties for the specified addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "DELETE",
      "operationId": "AddonPropertiesResource.deleteAddonProperty_delete",
      "summary": "",
      "user": "user456",
      "ideal": "Delete the specified property from the addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "GET",
      "operationId": "AddonPropertiesResource.getAddonProperty_get",
      "summary": "",
      "user": "user789",
      "ideal": "Fetch the value of a specific property for the addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "PUT",
      "operationId": "AddonPropertiesResource.putAddonProperty_put",
      "summary": "",
      "user": "user101",
      "ideal": "Update or create a property for the addon."
    },
    {
      "path": "/rest/forge/1/app/properties",
      "method": "GET",
      "operationId": "getForgeAppPropertyKeys",
      "summary": "",
      "user": "user202",
      "ideal": "Retrieve all property keys for the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "DELETE",
      "operationId": "deleteForgeAppProperty",
      "summary": "",
      "user": "user303",
      "ideal": "Remove a specific property from the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "GET",
      "operationId": "getForgeAppProperty",
      "summary": "",
      "user": "user404",
      "ideal": "Get the value of a specific property for the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "PUT",
      "operationId": "putForgeAppProperty",
      "summary": "",
      "user": "user505",
      "ideal": "Set or update a property for the Forge app."
    },
    {
      "path": "/rest/api/3/applicationrole",
      "method": "GET",
      "operationId": "getAllApplicationRoles",
      "summary": "",
      "user": "As a project manager, I want to retrieve all application roles available in Jira so that I can understand the permissions and access levels assigned to different roles within my projects.",
      "ideal": "The API should return a list of all application roles, including their keys and descriptions, allowing me to effectively manage user permissions."
    },
    {
      "path": "/rest/api/3/applicationrole/{key}",
      "method": "GET",
      "operationId": "getApplicationRole",
      "summary": "",
      "user": "As a system administrator, I need to fetch details of a specific application role by its key to ensure that the role's permissions align with our organization's security policies.",
      "ideal": "The API should return detailed information about the specified application role, including its key, name, and associated permissions, enabling me to make informed decisions about role management."
    },
    {
      "path": "/rest/api/3/auditing/record",
      "method": "GET",
      "operationId": "getAuditRecords",
      "summary": "",
      "user": "johndoe@example.com",
      "ideal": "Retrieve a list of audit records for the Jira Cloud platform, including details such as the action performed, the user who performed it, and the timestamp of the action."
    },
    {
      "path": "/rest/api/3/avatar/system",
      "method": "GET",
      "operationId": "getAllSystemAvatars",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available system avatars to choose an appropriate one for my team's profile.",
      "ideal": "A list of all system avatars with their respective IDs and image URLs."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345",
      "method": "GET",
      "operationId": "getAvatars",
      "summary": "",
      "user": "As a user, I want to fetch my avatars so I can select one for my profile.",
      "ideal": "A list of avatars associated with the user ID 12345."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345",
      "method": "POST",
      "operationId": "storeAvatar",
      "summary": "",
      "user": "As a user, I want to upload a new avatar image for my profile.",
      "ideal": "A confirmation that the avatar has been successfully uploaded and is now associated with my profile."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345/avatar/67890",
      "method": "DELETE",
      "operationId": "deleteAvatar",
      "summary": "",
      "user": "As a user, I want to delete an avatar that I no longer wish to use.",
      "ideal": "A confirmation that the avatar with ID 67890 has been successfully deleted from my profile."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user",
      "method": "GET",
      "operationId": "getAvatarImageByType",
      "summary": "",
      "user": "As a user, I want to view all available user avatars to select one for my profile.",
      "ideal": "A list of user avatars with their image URLs."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user/avatar/67890",
      "method": "GET",
      "operationId": "getAvatarImageByID",
      "summary": "",
      "user": "As a user, I want to view a specific avatar image by its ID.",
      "ideal": "The image of the avatar with ID 67890."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user/owner/12345",
      "method": "GET",
      "operationId": "getAvatarImageByOwner",
      "summary": "",
      "user": "As a user, I want to see the avatar image currently associated with my profile.",
      "ideal": "The image of the avatar currently set for the user ID 12345."
    },
    {
      "path": "/rest/api/3/classification-levels",
      "method": "GET",
      "operationId": "getAllUserDataClassificationLevels",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all user data classification levels available in the Jira Cloud platform."
    },
    {
      "path": "/rest/api/3/dashboard",
      "method": "GET",
      "operationId": "getAllDashboards",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of all dashboards available to the user."
    },
    {
      "path": "/rest/api/3/dashboard",
      "method": "POST",
      "operationId": "createDashboard",
      "summary": "",
      "user": "user456",
      "ideal": "Create a new dashboard with specified parameters."
    },
    {
      "path": "/rest/api/3/dashboard/bulk/edit",
      "method": "PUT",
      "operationId": "bulkEditDashboards",
      "summary": "",
      "user": "user789",
      "ideal": "Update multiple dashboards in a single request."
    },
    {
      "path": "/rest/api/3/dashboard/gadgets",
      "method": "GET",
      "operationId": "getAllAvailableDashboardGadgets",
      "summary": "",
      "user": "user101",
      "ideal": "Fetch all available gadgets that can be added to dashboards."
    },
    {
      "path": "/rest/api/3/dashboard/search",
      "method": "GET",
      "operationId": "getDashboardsPaginated",
      "summary": "",
      "user": "user112",
      "ideal": "Search and paginate through dashboards based on filters."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "GET",
      "operationId": "getAllGadgets",
      "summary": "",
      "user": "user131",
      "ideal": "Get all gadgets associated with a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "POST",
      "operationId": "addGadget",
      "summary": "",
      "user": "user415",
      "ideal": "Add a new gadget to the specified dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "DELETE",
      "operationId": "removeGadget",
      "summary": "",
      "user": "user161",
      "ideal": "Remove a specific gadget from the dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "PUT",
      "operationId": "updateGadget",
      "summary": "",
      "user": "user718",
      "ideal": "Update the configuration of an existing gadget on the dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties",
      "method": "GET",
      "operationId": "getDashboardItemPropertyKeys",
      "summary": "",
      "user": "user192",
      "ideal": "Retrieve property keys for a specific dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteDashboardItemProperty",
      "summary": "",
      "user": "user202",
      "ideal": "Delete a specific property from a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getDashboardItemProperty",
      "summary": "",
      "user": "user212",
      "ideal": "Get the value of a specific property for a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setDashboardItemProperty",
      "summary": "",
      "user": "user222",
      "ideal": "Set a new value for a specific property of a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "DELETE",
      "operationId": "deleteDashboard",
      "summary": "",
      "user": "user232",
      "ideal": "Delete a specific dashboard by its ID."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "GET",
      "operationId": "getDashboard",
      "summary": "",
      "user": "user242",
      "ideal": "Retrieve details of a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "PUT",
      "operationId": "updateDashboard",
      "summary": "",
      "user": "user252",
      "ideal": "Update the details of a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{id}/copy",
      "method": "POST",
      "operationId": "copyDashboard",
      "summary": "",
      "user": "user262",
      "ideal": "Create a copy of an existing dashboard."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "GET",
      "operationId": "DynamicModulesResource.getModules_get",
      "summary": "",
      "user": "As a developer, I want to retrieve the list of dynamic modules registered in the Jira Cloud platform so that I can verify their status and configuration.",
      "ideal": "The response should include a JSON array of dynamic modules with their respective details such as module key, name, and status."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "POST",
      "operationId": "DynamicModulesResource.registerModules_post",
      "summary": "",
      "user": "As an administrator, I want to register new dynamic modules in the Jira Cloud platform so that they can be utilized by users in the application.",
      "ideal": "The response should confirm the successful registration of the dynamic modules with their keys and any relevant metadata."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "DELETE",
      "operationId": "DynamicModulesResource.removeModules_delete",
      "summary": "",
      "user": "As a system administrator, I want to remove specific dynamic modules from the Jira Cloud platform to clean up unused or outdated modules.",
      "ideal": "The response should indicate that the specified dynamic modules have been successfully removed and provide a confirmation message."
    },
    {
      "path": "/rest/api/3/filter/defaultShareScope",
      "method": "GET",
      "operationId": "getDefaultShareScope",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the default sharing scope for filters in Jira."
    },
    {
      "path": "/rest/api/3/filter/defaultShareScope",
      "method": "PUT",
      "operationId": "setDefaultShareScope",
      "summary": "",
      "user": "user456",
      "ideal": "Update the default sharing scope for filters in Jira."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission",
      "method": "GET",
      "operationId": "getSharePermissions",
      "summary": "",
      "user": "user789",
      "ideal": "Fetch the sharing permissions for a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission",
      "method": "POST",
      "operationId": "addSharePermission",
      "summary": "",
      "user": "user101",
      "ideal": "Add a new sharing permission to a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission/{permissionId}",
      "method": "DELETE",
      "operationId": "deleteSharePermission",
      "summary": "",
      "user": "user202",
      "ideal": "Remove a specific sharing permission from a filter by its ID and permission ID."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission/{permissionId}",
      "method": "GET",
      "operationId": "getSharePermission",
      "summary": "",
      "user": "user303",
      "ideal": "Retrieve details of a specific sharing permission for a filter by its ID and permission ID."
    },
    {
      "path": "/rest/api/3/filter",
      "method": "POST",
      "operationId": "createFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Create a new filter with specified criteria."
    },
    {
      "path": "/rest/api/3/filter/favourite",
      "method": "GET",
      "operationId": "getFavouriteFilters",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieve a list of filters marked as favourite by the user."
    },
    {
      "path": "/rest/api/3/filter/my",
      "method": "GET",
      "operationId": "getMyFilters",
      "summary": "",
      "user": "user789",
      "ideal": "Get all filters created by the user."
    },
    {
      "path": "/rest/api/3/filter/search",
      "method": "GET",
      "operationId": "getFiltersPaginated",
      "summary": "",
      "user": "user101",
      "ideal": "Search for filters with pagination support."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "DELETE",
      "operationId": "deleteFilter",
      "summary": "",
      "user": "user112",
      "ideal": "Delete a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "GET",
      "operationId": "getFilter",
      "summary": "",
      "user": "user131",
      "ideal": "Retrieve details of a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "PUT",
      "operationId": "updateFilter",
      "summary": "",
      "user": "user415",
      "ideal": "Update the details of an existing filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "DELETE",
      "operationId": "resetColumns",
      "summary": "",
      "user": "user161",
      "ideal": "Reset the columns of a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "GET",
      "operationId": "getColumns",
      "summary": "",
      "user": "user718",
      "ideal": "Get the columns configured for a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "PUT",
      "operationId": "setColumns",
      "summary": "",
      "user": "user192",
      "ideal": "Set the columns for a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/favourite",
      "method": "DELETE",
      "operationId": "deleteFavouriteForFilter",
      "summary": "",
      "user": "user202",
      "ideal": "Remove a filter from the user's favourites."
    },
    {
      "path": "/rest/api/3/filter/{id}/favourite",
      "method": "PUT",
      "operationId": "setFavouriteForFilter",
      "summary": "",
      "user": "user303",
      "ideal": "Add a filter to the user's favourites."
    },
    {
      "path": "/rest/api/3/filter/{id}/owner",
      "method": "PUT",
      "operationId": "changeFilterOwner",
      "summary": "",
      "user": "user404",
      "ideal": "Change the owner of a specific filter."
    },
    {
      "path": "/rest/api/3/groupuserpicker",
      "method": "GET",
      "operationId": "findUsersAndGroups",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve a list of users and groups based on the provided query parameters."
    },
    {
      "path": "/rest/api/3/group",
      "method": "GET",
      "operationId": "getGroup",
      "summary": "",
      "user": "Retrieve the details of a specific group in Jira to check its members and permissions.",
      "ideal": "Successful retrieval of group details with a 200 status code."
    },
    {
      "path": "/rest/api/3/group",
      "method": "POST",
      "operationId": "createGroup",
      "summary": "",
      "user": "Create a new group in Jira for organizing users based on their roles.",
      "ideal": "Group created successfully with a 201 status code and the group ID returned."
    },
    {
      "path": "/rest/api/3/group",
      "method": "DELETE",
      "operationId": "removeGroup",
      "summary": "",
      "user": "Remove an existing group from Jira that is no longer needed.",
      "ideal": "Group removed successfully with a 204 status code."
    },
    {
      "path": "/rest/api/3/group/bulk",
      "method": "GET",
      "operationId": "bulkGetGroups",
      "summary": "",
      "user": "Fetch details of multiple groups at once to streamline management.",
      "ideal": "Successful retrieval of group details with a 200 status code and a list of groups."
    },
    {
      "path": "/rest/api/3/group/member",
      "method": "GET",
      "operationId": "getUsersFromGroup",
      "summary": "",
      "user": "Get a list of users belonging to a specific group to manage access rights.",
      "ideal": "Successful retrieval of users with a 200 status code and a list of user details."
    },
    {
      "path": "/rest/api/3/group/user",
      "method": "POST",
      "operationId": "addUserToGroup",
      "summary": "",
      "user": "Add a user to a specific group in Jira to grant them access to group resources.",
      "ideal": "User added successfully with a 201 status code."
    },
    {
      "path": "/rest/api/3/group/user",
      "method": "DELETE",
      "operationId": "removeUserFromGroup",
      "summary": "",
      "user": "Remove a user from a group in Jira to revoke their access.",
      "ideal": "User removed successfully with a 204 status code."
    },
    {
      "path": "/rest/api/3/groups/picker",
      "method": "GET",
      "operationId": "findGroups",
      "summary": "",
      "user": "Search for groups in Jira based on a query to find relevant groups quickly.",
      "ideal": "Successful retrieval of matching groups with a 200 status code and a list of groups."
    },
    {
      "path": "/rest/api/3/attachment/content/12345",
      "method": "GET",
      "operationId": "getAttachmentContent",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve the content of the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/meta",
      "method": "GET",
      "operationId": "getAttachmentMeta",
      "summary": "",
      "user": "User456",
      "ideal": "Fetch metadata for all attachments associated with the current issue."
    },
    {
      "path": "/rest/api/3/attachment/thumbnail/67890",
      "method": "GET",
      "operationId": "getAttachmentThumbnail",
      "summary": "",
      "user": "User789",
      "ideal": "Get the thumbnail image for the attachment with ID 67890."
    },
    {
      "path": "/rest/api/3/attachment/54321",
      "method": "DELETE",
      "operationId": "removeAttachment",
      "summary": "",
      "user": "User101",
      "ideal": "Delete the attachment with ID 54321 from the issue."
    },
    {
      "path": "/rest/api/3/attachment/98765",
      "method": "GET",
      "operationId": "getAttachment",
      "summary": "",
      "user": "User202",
      "ideal": "Retrieve detailed information about the attachment with ID 98765."
    },
    {
      "path": "/rest/api/3/attachment/11111/expand/human",
      "method": "GET",
      "operationId": "expandAttachmentForHumans",
      "summary": "",
      "user": "User303",
      "ideal": "Expand the attachment with ID 11111 for human-readable format."
    },
    {
      "path": "/rest/api/3/attachment/22222/expand/raw",
      "method": "GET",
      "operationId": "expandAttachmentForMachines",
      "summary": "",
      "user": "User404",
      "ideal": "Expand the attachment with ID 22222 for machine-readable format."
    },
    {
      "path": "/rest/api/3/issue/ISSUE-123/attachments",
      "method": "POST",
      "operationId": "addAttachment",
      "summary": "",
      "user": "User505",
      "ideal": "Add a new attachment to the issue with key ISSUE-123."
    },
    {
      "path": "/rest/api/3/bulk/issues/delete",
      "method": "POST",
      "operationId": "submitBulkDelete",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully deletes multiple issues in bulk based on provided issue IDs."
    },
    {
      "path": "/rest/api/3/bulk/issues/fields",
      "method": "GET",
      "operationId": "getBulkEditableFields",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieves a list of fields that can be edited in bulk for the specified issues."
    },
    {
      "path": "/rest/api/3/bulk/issues/fields",
      "method": "POST",
      "operationId": "submitBulkEdit",
      "summary": "",
      "user": "user789",
      "ideal": "Applies bulk edits to the specified fields of multiple issues successfully."
    },
    {
      "path": "/rest/api/3/bulk/issues/move",
      "method": "POST",
      "operationId": "submitBulkMove",
      "summary": "",
      "user": "user101",
      "ideal": "Moves multiple issues to a different project or issue type as specified."
    },
    {
      "path": "/rest/api/3/bulk/issues/transition",
      "method": "GET",
      "operationId": "getAvailableTransitions",
      "summary": "",
      "user": "user202",
      "ideal": "Fetches available transitions for the specified issues to facilitate bulk operations."
    },
    {
      "path": "/rest/api/3/bulk/issues/transition",
      "method": "POST",
      "operationId": "submitBulkTransition",
      "summary": "",
      "user": "user303",
      "ideal": "Transitions multiple issues to a new status in bulk as per the provided transition ID."
    },
    {
      "path": "/rest/api/3/bulk/issues/unwatch",
      "method": "POST",
      "operationId": "submitBulkUnwatch",
      "summary": "",
      "user": "user404",
      "ideal": "Unwatches multiple issues in bulk, removing notifications for the specified issues."
    },
    {
      "path": "/rest/api/3/bulk/issues/watch",
      "method": "POST",
      "operationId": "submitBulkWatch",
      "summary": "",
      "user": "user505",
      "ideal": "Watches multiple issues in bulk, enabling notifications for the specified issues."
    },
    {
      "path": "/rest/api/3/bulk/queue/{taskId}",
      "method": "GET",
      "operationId": "getBulkOperationProgress",
      "summary": "",
      "user": "user606",
      "ideal": "Retrieves the progress of a bulk operation based on the provided task ID."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties",
      "method": "GET",
      "operationId": "getCommentPropertyKeys",
      "summary": "",
      "user": "As a project manager, I want to retrieve all properties associated with a specific comment to understand its context and any additional metadata.",
      "ideal": "The API should return a list of property keys associated with the specified comment, allowing me to see all custom data linked to it."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getCommentProperty",
      "summary": "",
      "user": "As a developer, I need to fetch a specific property value from a comment to utilize it in my application logic.",
      "ideal": "The API should return the value of the specified property key for the given comment, enabling me to access the required information efficiently."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setCommentProperty",
      "summary": "",
      "user": "As a team lead, I want to update a property of a comment to reflect the latest status of the task it relates to.",
      "ideal": "The API should successfully update the specified property key with the new value, confirming the change has been made."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteCommentProperty",
      "summary": "",
      "user": "As a product owner, I need to remove outdated properties from comments to keep the project documentation clean and relevant.",
      "ideal": "The API should delete the specified property key from the comment, ensuring that it no longer exists in the comment's metadata."
    },
    {
      "path": "/rest/api/3/comment/list",
      "method": "POST",
      "operationId": "getCommentsByIds",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of comments based on their IDs."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment",
      "method": "GET",
      "operationId": "getComments",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch all comments associated with the issue identified by PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment",
      "method": "POST",
      "operationId": "addComment",
      "summary": "",
      "user": "user789",
      "ideal": "Add a new comment to the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "DELETE",
      "operationId": "deleteComment",
      "summary": "",
      "user": "user321",
      "ideal": "Delete the comment with ID 10001 from the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "GET",
      "operationId": "getComment",
      "summary": "",
      "user": "user654",
      "ideal": "Retrieve the details of the comment with ID 10001 from the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "PUT",
      "operationId": "updateComment",
      "summary": "",
      "user": "user987",
      "ideal": "Update the content of the comment with ID 10001 on the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/field/association",
      "method": "DELETE",
      "operationId": "removeAssociations",
      "summary": "",
      "user": "Project Manager removing unnecessary field associations to streamline the issue creation process.",
      "ideal": "Successfully removed field associations."
    },
    {
      "path": "/rest/api/3/field/association",
      "method": "PUT",
      "operationId": "createAssociations",
      "summary": "",
      "user": "Developer adding new field associations to enhance the data collection for specific issue types.",
      "ideal": "Successfully created field associations."
    },
    {
      "path": "/rest/api/3/app/field/context/configuration/list",
      "method": "POST",
      "operationId": "getCustomFieldsConfigurations",
      "summary": "",
      "user": "As a project manager, I want to retrieve a list of custom field configurations for my project so that I can ensure all necessary fields are set up correctly.",
      "ideal": "The API should return a list of custom field configurations, including field IDs, names, and their respective contexts."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "GET",
      "operationId": "getCustomFieldConfiguration",
      "summary": "",
      "user": "As a developer, I need to get the configuration details of a specific custom field by its ID or key to understand how it is set up in the project.",
      "ideal": "The API should return the configuration details of the specified custom field, including its context, options, and any associated metadata."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "PUT",
      "operationId": "updateCustomFieldConfiguration",
      "summary": "",
      "user": "As a system administrator, I want to update the configuration of a custom field to reflect new requirements for data collection in our projects.",
      "ideal": "The API should successfully update the custom field configuration and return a confirmation message along with the updated configuration details."
    },
    {
      "path": "/rest/api/3/field/10000/context",
      "method": "GET",
      "operationId": "getContextsForField",
      "summary": "",
      "user": "User A wants to retrieve all contexts for a specific custom field with ID 10000 to understand its configuration.",
      "ideal": "Retrieve contexts for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context",
      "method": "POST",
      "operationId": "createCustomFieldContext",
      "summary": "",
      "user": "User B needs to create a new context for the custom field with ID 10000 to apply specific configurations for a project.",
      "ideal": "Create a new context for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/defaultValue",
      "method": "GET",
      "operationId": "getDefaultValues",
      "summary": "",
      "user": "User C is looking to fetch the default values set for the custom field with ID 10000 to ensure they are correct.",
      "ideal": "Retrieve default values for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/defaultValue",
      "method": "PUT",
      "operationId": "setDefaultValues",
      "summary": "",
      "user": "User D wants to update the default values for the custom field with ID 10000 to reflect new requirements.",
      "ideal": "Update default values for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/issuetypemapping",
      "method": "GET",
      "operationId": "getIssueTypeMappingsForContexts",
      "summary": "",
      "user": "User E needs to check the issue type mappings for contexts related to the custom field with ID 10000.",
      "ideal": "Retrieve issue type mappings for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/mapping",
      "method": "POST",
      "operationId": "getCustomFieldContextsForProjectsAndIssueTypes",
      "summary": "",
      "user": "User F is trying to find out which contexts are available for specific projects and issue types for field ID 10000.",
      "ideal": "Retrieve custom field contexts for projects and issue types successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/projectmapping",
      "method": "GET",
      "operationId": "getProjectContextMapping",
      "summary": "",
      "user": "User G wants to see how the custom field with ID 10000 is mapped to various projects.",
      "ideal": "Retrieve project context mapping for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/1",
      "method": "DELETE",
      "operationId": "deleteCustomFieldContext",
      "summary": "",
      "user": "User H needs to delete a specific context (ID 1) for the custom field with ID 10000 that is no longer needed.",
      "ideal": "Delete custom field context ID 1 for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/1",
      "method": "PUT",
      "operationId": "updateCustomFieldContext",
      "summary": "",
      "user": "User I wants to update the details of context ID 1 for the custom field with ID 10000 to better suit project needs.",
      "ideal": "Update custom field context ID 1 for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/issuetype",
      "method": "PUT",
      "operationId": "addIssueTypesToContext",
      "summary": "",
      "user": "User J is looking to add new issue types to context ID 1 for the custom field with ID 10000.",
      "ideal": "Add issue types to custom field context ID 1 for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/issuetype/remove",
      "method": "POST",
      "operationId": "removeIssueTypesFromContext",
      "summary": "",
      "user": "User K needs to remove certain issue types from context ID 1 for the custom field with ID 10000.",
      "ideal": "Remove issue types from custom field context ID 1 for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/project",
      "method": "PUT",
      "operationId": "assignProjectsToCustomFieldContext",
      "summary": "",
      "user": "User L wants to assign new projects to context ID 1 for the custom field with ID 10000.",
      "ideal": "Assign projects to custom field context ID 1 for field ID 10000 successfully."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/project/remove",
      "method": "POST",
      "operationId": "removeCustomFieldContextFromProjects",
      "summary": "",
      "user": "User M needs to remove context ID 1 from certain projects for the custom field with ID 10000.",
      "ideal": "Remove custom field context ID 1 from projects successfully."
    },
    {
      "path": "/rest/api/3/customFieldOption/12345",
      "method": "GET",
      "operationId": "getCustomFieldOption",
      "summary": "",
      "user": "User requests details for a specific custom field option to understand its configuration and usage.",
      "ideal": "Returns the details of the custom field option with ID 12345."
    },
    {
      "path": "/rest/api/3/field/67890/context/54321/option",
      "method": "GET",
      "operationId": "getOptionsForContext",
      "summary": "",
      "user": "User wants to retrieve all options available for a specific field context to ensure correct data entry.",
      "ideal": "Returns a list of options for the field with ID 67890 in the context with ID 54321."
    },
    {
      "path": "/rest/api/3/field/67890/context/54321/option",
      "method": "POST",
      "operationId": "createCustomFieldOption",
      "summary": "",
      "user": "User is creating a new custom field option for a specific field context to enhance data categorization.",
      "ideal": "Creates a new custom field option in the specified context and returns the created option details."
    },
    {
      "path": "/rest/api/3/field/67890/context/54321/option",
      "method": "PUT",
      "operationId": "updateCustomFieldOption",
      "summary": "",
      "user": "User needs to update an existing custom field option to reflect changes in project requirements.",
      "ideal": "Updates the specified custom field option and returns the updated option details."
    },
    {
      "path": "/rest/api/3/field/67890/context/54321/option/move",
      "method": "PUT",
      "operationId": "reorderCustomFieldOptions",
      "summary": "",
      "user": "User is reordering custom field options to prioritize certain choices for users.",
      "ideal": "Reorders the custom field options as specified and returns the new order."
    },
    {
      "path": "/rest/api/3/field/67890/context/54321/option/98765",
      "method": "DELETE",
      "operationId": "deleteCustomFieldOption",
      "summary": "",
      "user": "User wants to delete an obsolete custom field option that is no longer relevant.",
      "ideal": "Deletes the specified custom field option and confirms the deletion."
    },
    {
      "path": "/rest/api/3/field/67890/context/54321/option/98765/issue",
      "method": "DELETE",
      "operationId": "replaceCustomFieldOption",
      "summary": "",
      "user": "User is replacing a custom field option in issues to ensure data consistency across the project.",
      "ideal": "Replaces the specified custom field option in issues and returns a confirmation of the replacement."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option",
      "method": "GET",
      "operationId": "getAllIssueFieldOptions",
      "summary": "",
      "user": "User requests all options for a custom field to display in a dropdown.",
      "ideal": "Returns a list of all options for the specified field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option",
      "method": "POST",
      "operationId": "createIssueFieldOption",
      "summary": "",
      "user": "User wants to add a new option to a custom field for better categorization.",
      "ideal": "Creates a new option for the specified field and returns the created option details."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/suggestions/edit",
      "method": "GET",
      "operationId": "getSelectableIssueFieldOptions",
      "summary": "",
      "user": "User is looking for options to edit in a custom field dropdown.",
      "ideal": "Returns a list of selectable options for editing in the specified field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/suggestions/search",
      "method": "GET",
      "operationId": "getVisibleIssueFieldOptions",
      "summary": "",
      "user": "User searches for specific options in a custom field to find relevant choices.",
      "ideal": "Returns a filtered list of visible options based on the search criteria."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "DELETE",
      "operationId": "deleteIssueFieldOption",
      "summary": "",
      "user": "User wants to remove an obsolete option from a custom field.",
      "ideal": "Deletes the specified option and confirms the deletion."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "GET",
      "operationId": "getIssueFieldOption",
      "summary": "",
      "user": "User needs details about a specific option in a custom field.",
      "ideal": "Returns the details of the specified option for the custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "PUT",
      "operationId": "updateIssueFieldOption",
      "summary": "",
      "user": "User wants to update the label of an existing option in a custom field.",
      "ideal": "Updates the specified option and returns the updated option details."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345/issue",
      "method": "DELETE",
      "operationId": "replaceIssueFieldOption",
      "summary": "",
      "user": "User needs to replace an option in a custom field that is linked to existing issues.",
      "ideal": "Replaces the specified option with a new one and updates all linked issues accordingly."
    },
    {
      "path": "/rest/api/3/app/field/value",
      "method": "POST",
      "operationId": "updateMultipleCustomFieldValues",
      "summary": "",
      "user": "User A is a project manager who needs to update multiple custom fields for a set of issues in Jira to reflect the latest project status. They gather the necessary field IDs and values from their team and prepare a request to update these fields in bulk.",
      "ideal": "The request successfully updates the specified custom fields for the given issues, returning a confirmation of the updates made."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/value",
      "method": "PUT",
      "operationId": "updateCustomFieldValue",
      "summary": "",
      "user": "User B is a software developer who wants to update a specific custom field value for a single issue in Jira. They identify the field ID and the issue key, and prepare a request to set the new value that reflects the current development progress.",
      "ideal": "The request successfully updates the specified custom field for the issue, returning the updated field value in the response."
    },
    {
      "path": "/rest/api/3/fieldconfiguration",
      "method": "GET",
      "operationId": "getAllFieldConfigurations",
      "summary": "",
      "user": "User requests to retrieve all field configurations to understand the current setup of fields in the Jira instance.",
      "ideal": "A list of all field configurations with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/fieldconfiguration",
      "method": "POST",
      "operationId": "createFieldConfiguration",
      "summary": "",
      "user": "User wants to create a new field configuration for a specific project to manage fields effectively.",
      "ideal": "A confirmation of the new field configuration creation along with its ID and details."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}",
      "method": "DELETE",
      "operationId": "deleteFieldConfiguration",
      "summary": "",
      "user": "User intends to delete an obsolete field configuration that is no longer in use.",
      "ideal": "A success message confirming the deletion of the specified field configuration."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}",
      "method": "PUT",
      "operationId": "updateFieldConfiguration",
      "summary": "",
      "user": "User needs to update the name of an existing field configuration to reflect recent changes in the project.",
      "ideal": "A confirmation of the updated field configuration with the new details."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "GET",
      "operationId": "getFieldConfigurationItems",
      "summary": "",
      "user": "User is looking to retrieve all fields associated with a specific field configuration for review.",
      "ideal": "A list of fields linked to the specified field configuration, including their IDs and names."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "PUT",
      "operationId": "updateFieldConfigurationItems",
      "summary": "",
      "user": "User wants to update the fields in a specific field configuration to add or remove fields as necessary.",
      "ideal": "A confirmation of the updated field configuration items with the new list of fields."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme",
      "method": "GET",
      "operationId": "getAllFieldConfigurationSchemes",
      "summary": "",
      "user": "User requests to see all field configuration schemes to manage how fields are displayed across projects.",
      "ideal": "A list of all field configuration schemes with their IDs and names."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme",
      "method": "POST",
      "operationId": "createFieldConfigurationScheme",
      "summary": "",
      "user": "User wants to create a new field configuration scheme to apply specific field configurations to multiple projects.",
      "ideal": "A confirmation of the new field configuration scheme creation along with its ID and details."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/mapping",
      "method": "GET",
      "operationId": "getFieldConfigurationSchemeMappings",
      "summary": "",
      "user": "User is looking to retrieve the mappings of field configuration schemes to understand their application.",
      "ideal": "A list of mappings between field configuration schemes and their respective projects."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "GET",
      "operationId": "getFieldConfigurationSchemeProjectMapping",
      "summary": "",
      "user": "User wants to see which field configuration scheme is assigned to a specific project.",
      "ideal": "Details of the field configuration scheme currently assigned to the specified project."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "PUT",
      "operationId": "assignFieldConfigurationSchemeToProject",
      "summary": "",
      "user": "User intends to assign a specific field configuration scheme to a project to ensure proper field management.",
      "ideal": "A confirmation that the field configuration scheme has been successfully assigned to the project."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "DELETE",
      "operationId": "deleteFieldConfigurationScheme",
      "summary": "",
      "user": "User wants to delete a field configuration scheme that is no longer needed.",
      "ideal": "A success message confirming the deletion of the specified field configuration scheme."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "PUT",
      "operationId": "updateFieldConfigurationScheme",
      "summary": "",
      "user": "User needs to update the details of a field configuration scheme to reflect recent changes.",
      "ideal": "A confirmation of the updated field configuration scheme with the new details."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}/mapping",
      "method": "PUT",
      "operationId": "setFieldConfigurationSchemeMapping",
      "summary": "",
      "user": "User wants to set or update the mapping of issue types to a field configuration scheme.",
      "ideal": "A confirmation that the mapping has been successfully updated."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete",
      "method": "POST",
      "operationId": "removeIssueTypesFromGlobalFieldConfigurationScheme",
      "summary": "",
      "user": "User intends to remove specific issue types from a global field configuration scheme.",
      "ideal": "A confirmation that the specified issue types have been successfully removed from the scheme."
    },
    {
      "path": "/rest/api/3/field",
      "method": "GET",
      "operationId": "getFields",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available fields in Jira to understand what data can be captured in my projects.",
      "ideal": "The response should return a list of all fields with their IDs, names, and types."
    },
    {
      "path": "/rest/api/3/field",
      "method": "POST",
      "operationId": "createCustomField",
      "summary": "",
      "user": "As a product owner, I want to create a custom field for tracking user feedback so that we can gather insights directly from users.",
      "ideal": "The response should confirm the creation of the custom field and return its ID and details."
    },
    {
      "path": "/rest/api/3/field/search",
      "method": "GET",
      "operationId": "getFieldsPaginated",
      "summary": "",
      "user": "As a developer, I want to fetch fields in a paginated manner to efficiently handle large datasets without overwhelming the client.",
      "ideal": "The response should include a paginated list of fields with metadata about total count and next page link."
    },
    {
      "path": "/rest/api/3/field/search/trashed",
      "method": "GET",
      "operationId": "getTrashedFieldsPaginated",
      "summary": "",
      "user": "As an admin, I want to see all trashed fields to decide which ones can be permanently deleted.",
      "ideal": "The response should return a list of trashed fields with their IDs and names, along with pagination details."
    },
    {
      "path": "/rest/api/3/field/{fieldId}",
      "method": "PUT",
      "operationId": "updateCustomField",
      "summary": "",
      "user": "As a team lead, I want to update the configuration of an existing custom field to better suit our project's needs.",
      "ideal": "The response should confirm the update and return the updated field details."
    },
    {
      "path": "/rest/api/3/field/{fieldId}/contexts",
      "method": "GET",
      "operationId": "getContextsForFieldDeprecated",
      "summary": "",
      "user": "As a project administrator, I want to retrieve contexts for a specific field to understand where it is being used.",
      "ideal": "The response should provide a list of contexts associated with the specified field."
    },
    {
      "path": "/rest/api/3/field/{id}",
      "method": "DELETE",
      "operationId": "deleteCustomField",
      "summary": "",
      "user": "As a system administrator, I want to delete a custom field that is no longer needed to keep the system clean.",
      "ideal": "The response should confirm the deletion of the custom field."
    },
    {
      "path": "/rest/api/3/field/{id}/restore",
      "method": "POST",
      "operationId": "restoreCustomField",
      "summary": "",
      "user": "As an admin, I want to restore a previously deleted custom field in case it is needed again.",
      "ideal": "The response should confirm the restoration of the custom field and return its details."
    },
    {
      "path": "/rest/api/3/field/{id}/trash",
      "method": "POST",
      "operationId": "trashCustomField",
      "summary": "",
      "user": "As a project manager, I want to move a custom field to trash instead of deleting it permanently, allowing for potential recovery.",
      "ideal": "The response should confirm that the custom field has been moved to trash."
    },
    {
      "path": "/rest/api/3/issueLinkType",
      "method": "GET",
      "operationId": "getIssueLinkTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available issue link types in Jira to understand how issues can be related to each other.",
      "ideal": "The API should return a list of issue link types with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/issueLinkType",
      "method": "POST",
      "operationId": "createIssueLinkType",
      "summary": "",
      "user": "As a developer, I want to create a new issue link type to better categorize the relationships between issues in our project.",
      "ideal": "The API should successfully create a new issue link type and return the created link type's details, including its ID."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "DELETE",
      "operationId": "deleteIssueLinkType",
      "summary": "",
      "user": "As an admin, I want to delete an existing issue link type that is no longer needed to keep the issue link types organized.",
      "ideal": "The API should confirm the deletion of the specified issue link type and return a success message."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "GET",
      "operationId": "getIssueLinkType",
      "summary": "",
      "user": "As a team member, I want to retrieve details of a specific issue link type to understand its purpose and usage.",
      "ideal": "The API should return the details of the specified issue link type, including its name and description."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "PUT",
      "operationId": "updateIssueLinkType",
      "summary": "",
      "user": "As a project lead, I want to update an existing issue link type to reflect changes in our project requirements.",
      "ideal": "The API should successfully update the issue link type and return the updated details."
    },
    {
      "path": "/rest/api/3/issueLink",
      "method": "POST",
      "operationId": "linkIssues",
      "summary": "",
      "user": "As a project manager, I want to link two issues together to show their relationship, so that team members can easily navigate between related tasks.",
      "ideal": "The request should successfully create a link between the specified issues and return the details of the new link."
    },
    {
      "path": "/rest/api/3/issueLink/{linkId}",
      "method": "DELETE",
      "operationId": "deleteIssueLink",
      "summary": "",
      "user": "As a developer, I need to remove a link between two issues that are no longer relevant, to keep the issue tracker organized.",
      "ideal": "The request should successfully delete the specified issue link and return a confirmation of the deletion."
    },
    {
      "path": "/rest/api/3/issueLink/{linkId}",
      "method": "GET",
      "operationId": "getIssueLink",
      "summary": "",
      "user": "As a QA engineer, I want to retrieve the details of a specific issue link to understand how two issues are related before testing.",
      "ideal": "The request should return the details of the specified issue link, including the linked issues and the type of link."
    },
    {
      "path": "/rest/api/3/settings/columns",
      "method": "GET",
      "operationId": "getIssueNavigatorDefaultColumns",
      "summary": "",
      "user": "As a project manager, I want to retrieve the default columns for the issue navigator so that I can ensure the relevant information is displayed for my team.",
      "ideal": "The API should return a list of default columns currently set for the issue navigator, including their IDs and names."
    },
    {
      "path": "/rest/api/3/settings/columns",
      "method": "PUT",
      "operationId": "setIssueNavigatorDefaultColumns",
      "summary": "",
      "user": "As a Jira administrator, I want to update the default columns in the issue navigator to include additional fields that are important for our workflow.",
      "ideal": "The API should accept a list of column configurations and update the default columns accordingly, returning a success message upon completion."
    },
    {
      "path": "/rest/api/3/notificationscheme",
      "method": "GET",
      "operationId": "getNotificationSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all notification schemes available in Jira so that I can understand the current notification settings for my projects.",
      "ideal": "The response should include a list of all notification schemes with their IDs and names."
    },
    {
      "path": "/rest/api/3/notificationscheme",
      "method": "POST",
      "operationId": "createNotificationScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new notification scheme to customize notifications for my team’s projects.",
      "ideal": "The response should confirm the creation of the notification scheme and return its ID and details."
    },
    {
      "path": "/rest/api/3/notificationscheme/project",
      "method": "GET",
      "operationId": "getNotificationSchemeToProjectMappings",
      "summary": "",
      "user": "As a developer, I need to see which notification schemes are mapped to my projects to ensure I receive the correct updates.",
      "ideal": "The response should list all projects along with their associated notification schemes."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}",
      "method": "GET",
      "operationId": "getNotificationScheme",
      "summary": "",
      "user": "As a product owner, I want to view the details of a specific notification scheme to verify its settings before making changes.",
      "ideal": "The response should provide detailed information about the specified notification scheme, including its notifications and associated events."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}",
      "method": "PUT",
      "operationId": "updateNotificationScheme",
      "summary": "",
      "user": "As a project lead, I want to update an existing notification scheme to reflect changes in team roles and responsibilities.",
      "ideal": "The response should confirm the update and return the updated notification scheme details."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}/notification",
      "method": "PUT",
      "operationId": "addNotifications",
      "summary": "",
      "user": "As a team lead, I want to add new notifications to an existing notification scheme to ensure all relevant team members are informed.",
      "ideal": "The response should confirm the addition of notifications and return the updated list of notifications in the scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/{notificationSchemeId}",
      "method": "DELETE",
      "operationId": "deleteNotificationScheme",
      "summary": "",
      "user": "As an administrator, I want to delete an obsolete notification scheme to clean up our Jira configuration.",
      "ideal": "The response should confirm the deletion of the notification scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}",
      "method": "DELETE",
      "operationId": "removeNotificationFromNotificationScheme",
      "summary": "",
      "user": "As a project manager, I want to remove a specific notification from a notification scheme to reduce unnecessary alerts for my team.",
      "ideal": "The response should confirm the removal of the notification from the scheme."
    },
    {
      "path": "/rest/api/3/priority",
      "method": "GET",
      "operationId": "getPriorities",
      "summary": "",
      "user": "As a project manager, I want to retrieve all priority levels available in Jira so that I can assign the appropriate priority to issues.",
      "ideal": "Returns a list of all priority levels with their details."
    },
    {
      "path": "/rest/api/3/priority",
      "method": "POST",
      "operationId": "createPriority",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new priority level so that I can customize the workflow according to our team's needs.",
      "ideal": "Creates a new priority level and returns the created priority's details."
    },
    {
      "path": "/rest/api/3/priority/default",
      "method": "PUT",
      "operationId": "setDefaultPriority",
      "summary": "",
      "user": "As a project lead, I want to set a default priority for new issues so that all new issues have a consistent starting point.",
      "ideal": "Sets the specified priority as the default and returns the updated priority details."
    },
    {
      "path": "/rest/api/3/priority/move",
      "method": "PUT",
      "operationId": "movePriorities",
      "summary": "",
      "user": "As a project manager, I want to reorder the priority levels so that they reflect our current workflow priorities.",
      "ideal": "Updates the order of the priority levels and returns the new order."
    },
    {
      "path": "/rest/api/3/priority/search",
      "method": "GET",
      "operationId": "searchPriorities",
      "summary": "",
      "user": "As a developer, I want to search for specific priority levels by name so that I can quickly find and reference them.",
      "ideal": "Returns a list of priority levels that match the search criteria."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "DELETE",
      "operationId": "deletePriority",
      "summary": "",
      "user": "As a Jira administrator, I want to delete a priority level that is no longer needed to keep the priority list clean.",
      "ideal": "Deletes the specified priority level and confirms the deletion."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "GET",
      "operationId": "getPriority",
      "summary": "",
      "user": "As a project manager, I want to retrieve details of a specific priority level so that I can understand its attributes.",
      "ideal": "Returns the details of the specified priority level."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "PUT",
      "operationId": "updatePriority",
      "summary": "",
      "user": "As a Jira administrator, I want to update the details of an existing priority level to reflect changes in our project requirements.",
      "ideal": "Updates the specified priority level and returns the updated details."
    },
    {
      "path": "/rest/api/3/issue/properties",
      "method": "POST",
      "operationId": "bulkSetIssuesPropertiesList",
      "summary": "",
      "user": "As a project manager, I want to set properties for multiple issues at once to streamline the process of updating issue metadata.",
      "ideal": "The API should accept a list of issue IDs and their corresponding properties, and return a success response indicating that the properties have been set."
    },
    {
      "path": "/rest/api/3/issue/properties/multi",
      "method": "POST",
      "operationId": "bulkSetIssuePropertiesByIssue",
      "summary": "",
      "user": "As a developer, I need to update properties for several issues in one request to save time and reduce the number of API calls.",
      "ideal": "The API should allow me to send a batch of issue IDs with their properties and return a confirmation of the updates made."
    },
    {
      "path": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "bulkDeleteIssueProperty",
      "summary": "",
      "user": "As a team lead, I want to remove a specific property from all issues to ensure that outdated information is no longer associated with them.",
      "ideal": "The API should delete the specified property from all issues and return a success message confirming the deletion."
    },
    {
      "path": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "bulkSetIssueProperty",
      "summary": "",
      "user": "As a product owner, I need to update a specific property for all issues to reflect new requirements across the board.",
      "ideal": "The API should accept the property key and new value, updating all relevant issues and returning a success response."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties",
      "method": "GET",
      "operationId": "getIssuePropertyKeys",
      "summary": "",
      "user": "As a QA engineer, I want to retrieve all property keys for a specific issue to understand its current metadata.",
      "ideal": "The API should return a list of all property keys associated with the specified issue, allowing me to review its metadata."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteIssueProperty",
      "summary": "",
      "user": "As a scrum master, I want to delete a specific property from an issue to clean up unnecessary data.",
      "ideal": "The API should remove the specified property from the issue and return a confirmation of the deletion."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getIssueProperty",
      "summary": "",
      "user": "As a developer, I need to fetch the value of a specific property for an issue to make informed decisions based on its current state.",
      "ideal": "The API should return the value of the specified property for the issue, allowing me to access the necessary information."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setIssueProperty",
      "summary": "",
      "user": "As a project coordinator, I want to set or update a specific property for an issue to ensure it reflects the latest project requirements.",
      "ideal": "The API should accept the property key and value, updating the issue accordingly and returning a success response."
    },
    {
      "path": "/rest/api/3/redact",
      "method": "POST",
      "operationId": "redact",
      "summary": "",
      "user": "user123",
      "ideal": "This endpoint allows users to redact sensitive information from Jira issues. The request body should include the issue ID and the fields to be redacted."
    },
    {
      "path": "/rest/api/3/redact/status/{jobId}",
      "method": "GET",
      "operationId": "getRedactionStatus",
      "summary": "",
      "user": "user456",
      "ideal": "This endpoint retrieves the status of a redaction job using the provided job ID. It returns the current state of the redaction process, including whether it is completed or still in progress."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink",
      "method": "GET",
      "operationId": "getRemoteIssueLinks",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve all remote issue links associated with issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink",
      "method": "POST",
      "operationId": "createOrUpdateRemoteIssueLink",
      "summary": "",
      "user": "User456",
      "ideal": "Create a new remote issue link for issue ABC-123 with the specified details."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/789",
      "method": "DELETE",
      "operationId": "deleteRemoteIssueLinkById",
      "summary": "",
      "user": "User789",
      "ideal": "Delete the remote issue link with ID 789 from issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/789",
      "method": "GET",
      "operationId": "getRemoteIssueLinkById",
      "summary": "",
      "user": "User101",
      "ideal": "Retrieve the details of the remote issue link with ID 789 for issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/789",
      "method": "PUT",
      "operationId": "updateRemoteIssueLink",
      "summary": "",
      "user": "User202",
      "ideal": "Update the remote issue link with ID 789 for issue ABC-123 with new information."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/{linkId}",
      "method": "DELETE",
      "operationId": "deleteRemoteIssueLinkByGlobalId",
      "summary": "",
      "user": "User303",
      "ideal": "Delete a remote issue link by its global ID for issue ABC-123."
    },
    {
      "path": "/rest/api/3/resolution",
      "method": "GET",
      "operationId": "getResolutions",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of all available resolutions in the Jira system."
    },
    {
      "path": "/rest/api/3/resolution",
      "method": "POST",
      "operationId": "createResolution",
      "summary": "",
      "user": "user456",
      "ideal": "Create a new resolution with the specified name and description."
    },
    {
      "path": "/rest/api/3/resolution/default",
      "method": "PUT",
      "operationId": "setDefaultResolution",
      "summary": "",
      "user": "user789",
      "ideal": "Set the specified resolution as the default resolution for new issues."
    },
    {
      "path": "/rest/api/3/resolution/move",
      "method": "PUT",
      "operationId": "moveResolutions",
      "summary": "",
      "user": "user101",
      "ideal": "Move multiple resolutions to a new position in the list."
    },
    {
      "path": "/rest/api/3/resolution/search",
      "method": "GET",
      "operationId": "searchResolutions",
      "summary": "",
      "user": "user112",
      "ideal": "Search for resolutions based on specific criteria."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "DELETE",
      "operationId": "deleteResolution",
      "summary": "",
      "user": "user131",
      "ideal": "Delete the resolution with the specified ID from the system."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "GET",
      "operationId": "getResolution",
      "summary": "",
      "user": "user415",
      "ideal": "Retrieve detailed information about a specific resolution by ID."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "PUT",
      "operationId": "updateResolution",
      "summary": "",
      "user": "user161",
      "ideal": "Update the details of an existing resolution identified by ID."
    },
    {
      "path": "/rest/api/3/issue/picker",
      "method": "GET",
      "operationId": "getIssuePickerResource",
      "summary": "",
      "user": "User wants to quickly find issues by typing keywords in the picker interface.",
      "ideal": "Returns a list of issues that match the user's input."
    },
    {
      "path": "/rest/api/3/jql/match",
      "method": "POST",
      "operationId": "matchIssues",
      "summary": "",
      "user": "User needs to match issues based on a specific JQL query to filter results.",
      "ideal": "Returns a list of issues that match the provided JQL query."
    },
    {
      "path": "/rest/api/3/search",
      "method": "GET",
      "operationId": "searchForIssuesUsingJql",
      "summary": "",
      "user": "User wants to search for issues using a JQL query to find specific tasks.",
      "ideal": "Returns a paginated list of issues that match the JQL search criteria."
    },
    {
      "path": "/rest/api/3/search",
      "method": "POST",
      "operationId": "searchForIssuesUsingJqlPost",
      "summary": "",
      "user": "User wants to perform a more complex search with multiple filters using JQL.",
      "ideal": "Returns a detailed list of issues based on the complex JQL query provided."
    },
    {
      "path": "/rest/api/3/search/approximate-count",
      "method": "POST",
      "operationId": "countIssues",
      "summary": "",
      "user": "User needs to know the approximate number of issues matching a JQL query for reporting.",
      "ideal": "Returns an approximate count of issues that match the specified JQL query."
    },
    {
      "path": "/rest/api/3/search/jql",
      "method": "GET",
      "operationId": "searchAndReconsileIssuesUsingJql",
      "summary": "",
      "user": "User wants to reconcile issues from different projects using a JQL query.",
      "ideal": "Returns a reconciled list of issues from various projects based on the JQL."
    },
    {
      "path": "/rest/api/3/search/jql",
      "method": "POST",
      "operationId": "searchAndReconsileIssuesUsingJqlPost",
      "summary": "",
      "user": "User needs to post a JQL query to reconcile issues across multiple boards.",
      "ideal": "Returns a comprehensive list of reconciled issues based on the posted JQL."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members",
      "method": "GET",
      "operationId": "getIssueSecurityLevelMembers",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the members associated with the specified issue security scheme."
    },
    {
      "path": "/rest/api/3/securitylevel/{id}",
      "method": "GET",
      "operationId": "getIssueSecurityLevel",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch the details of the specified security level, including its name and description."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes",
      "method": "GET",
      "operationId": "getIssueSecuritySchemes",
      "summary": "",
      "user": "User requests to retrieve all issue security schemes available in the Jira instance.",
      "ideal": "Returns a list of issue security schemes with their details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes",
      "method": "POST",
      "operationId": "createIssueSecurityScheme",
      "summary": "",
      "user": "User wants to create a new issue security scheme with specific configurations.",
      "ideal": "Creates a new issue security scheme and returns its details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level",
      "method": "GET",
      "operationId": "getSecurityLevels",
      "summary": "",
      "user": "User needs to fetch all security levels defined in the Jira instance.",
      "ideal": "Returns a list of all security levels."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level/default",
      "method": "PUT",
      "operationId": "setDefaultLevels",
      "summary": "",
      "user": "User wants to set default security levels for the issue security schemes.",
      "ideal": "Updates the default security levels and confirms the changes."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level/member",
      "method": "GET",
      "operationId": "getSecurityLevelMembers",
      "summary": "",
      "user": "User requests to get members associated with a specific security level.",
      "ideal": "Returns a list of members for the specified security level."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/project",
      "method": "GET",
      "operationId": "searchProjectsUsingSecuritySchemes",
      "summary": "",
      "user": "User wants to find projects that are using specific issue security schemes.",
      "ideal": "Returns a list of projects associated with the specified security schemes."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/project",
      "method": "PUT",
      "operationId": "associateSchemesToProjects",
      "summary": "",
      "user": "User intends to associate existing issue security schemes with specific projects.",
      "ideal": "Associates the specified security schemes with the projects and confirms the association."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/search",
      "method": "GET",
      "operationId": "searchSecuritySchemes",
      "summary": "",
      "user": "User is looking to search for specific issue security schemes based on criteria.",
      "ideal": "Returns a list of security schemes that match the search criteria."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "GET",
      "operationId": "getIssueSecurityScheme",
      "summary": "",
      "user": "User wants to retrieve details of a specific issue security scheme by its ID.",
      "ideal": "Returns the details of the specified issue security scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "PUT",
      "operationId": "updateIssueSecurityScheme",
      "summary": "",
      "user": "User needs to update an existing issue security scheme with new configurations.",
      "ideal": "Updates the specified issue security scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}",
      "method": "DELETE",
      "operationId": "deleteSecurityScheme",
      "summary": "",
      "user": "User wants to delete a specific issue security scheme by its ID.",
      "ideal": "Deletes the specified issue security scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level",
      "method": "PUT",
      "operationId": "addSecurityLevel",
      "summary": "",
      "user": "User intends to add a new security level to an existing issue security scheme.",
      "ideal": "Adds the new security level to the specified scheme and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "DELETE",
      "operationId": "removeLevel",
      "summary": "",
      "user": "User wants to remove a specific security level from an issue security scheme.",
      "ideal": "Removes the specified security level and confirms the removal."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "PUT",
      "operationId": "updateSecurityLevel",
      "summary": "",
      "user": "User needs to update the details of a specific security level.",
      "ideal": "Updates the specified security level and returns the updated details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member",
      "method": "PUT",
      "operationId": "addSecurityLevelMembers",
      "summary": "",
      "user": "User wants to add members to a specific security level in an issue security scheme.",
      "ideal": "Adds the specified members to the security level and confirms the addition."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}",
      "method": "DELETE",
      "operationId": "removeMemberFromSecurityLevel",
      "summary": "",
      "user": "User intends to remove a specific member from a security level.",
      "ideal": "Removes the specified member from the security level and confirms the removal."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties",
      "method": "GET",
      "operationId": "getIssueTypePropertyKeys",
      "summary": "",
      "user": "As a project manager, I want to retrieve all custom properties associated with a specific issue type so that I can understand what additional information is available for that issue type.",
      "ideal": "Returns a list of property keys for the specified issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getIssueTypeProperty",
      "summary": "",
      "user": "As a developer, I need to fetch the value of a specific property for an issue type to ensure that my application integrates correctly with the Jira API.",
      "ideal": "Returns the value of the specified property key for the given issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setIssueTypeProperty",
      "summary": "",
      "user": "As a system administrator, I want to set a custom property for an issue type to enhance the metadata associated with it for better reporting.",
      "ideal": "Updates the specified property key with the new value for the issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeProperty",
      "summary": "",
      "user": "As a product owner, I need to remove a custom property from an issue type that is no longer relevant to streamline our issue tracking process.",
      "ideal": "Deletes the specified property key from the issue type."
    },
    {
      "path": "/rest/api/3/issuetypescheme",
      "method": "GET",
      "operationId": "getAllIssueTypeSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue type schemes available in the Jira Cloud platform so that I can understand the different configurations available for my projects.",
      "ideal": "The response should include a list of all issue type schemes with their IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/issuetypescheme",
      "method": "POST",
      "operationId": "createIssueTypeScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type scheme to better organize the issue types for my projects, ensuring that they align with our workflow.",
      "ideal": "The response should confirm the creation of the issue type scheme and return its ID and details."
    },
    {
      "path": "/rest/api/3/issuetypescheme/mapping",
      "method": "GET",
      "operationId": "getIssueTypeSchemesMapping",
      "summary": "",
      "user": "As a developer, I need to get the mapping of issue type schemes to projects to ensure that the correct issue types are available for each project.",
      "ideal": "The response should provide a mapping of each project to its corresponding issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/project",
      "method": "GET",
      "operationId": "getIssueTypeSchemeForProjects",
      "summary": "",
      "user": "As a project lead, I want to retrieve the issue type scheme assigned to my project to verify that it meets our requirements.",
      "ideal": "The response should return the issue type scheme details associated with the specified project."
    },
    {
      "path": "/rest/api/3/issuetypescheme/project",
      "method": "PUT",
      "operationId": "assignIssueTypeSchemeToProject",
      "summary": "",
      "user": "As a project manager, I want to assign a specific issue type scheme to my project to ensure that the correct issue types are used.",
      "ideal": "The response should confirm the assignment of the issue type scheme to the project."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to delete an obsolete issue type scheme to keep our configurations clean and manageable.",
      "ideal": "The response should confirm the deletion of the specified issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "PUT",
      "operationId": "updateIssueTypeScheme",
      "summary": "",
      "user": "As a project administrator, I want to update the details of an existing issue type scheme to reflect changes in our project requirements.",
      "ideal": "The response should confirm the update and return the updated issue type scheme details."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype",
      "method": "PUT",
      "operationId": "addIssueTypesToIssueTypeScheme",
      "summary": "",
      "user": "As a project manager, I want to add new issue types to an existing issue type scheme to accommodate new workflows in our project.",
      "ideal": "The response should confirm the addition of the issue types to the specified issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move",
      "method": "PUT",
      "operationId": "reorderIssueTypesInIssueTypeScheme",
      "summary": "",
      "user": "As a project lead, I want to reorder the issue types in an issue type scheme to prioritize certain types for our team.",
      "ideal": "The response should confirm the new order of issue types in the specified issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}",
      "method": "DELETE",
      "operationId": "removeIssueTypeFromIssueTypeScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to remove an issue type from an issue type scheme that is no longer relevant to our projects.",
      "ideal": "The response should confirm the removal of the specified issue type from the issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue type screen schemes to understand how screens are configured for different issue types in my projects.",
      "ideal": "A successful response with a list of issue type screen schemes, including their IDs, names, and associated issue types."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme",
      "method": "POST",
      "operationId": "createIssueTypeScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type screen scheme to customize the screens used for specific issue types in my project.",
      "ideal": "A successful response confirming the creation of the issue type screen scheme with its ID and details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/mapping",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemeMappings",
      "summary": "",
      "user": "As a developer, I need to get the mappings of issue types to screen schemes to ensure that the correct screens are displayed for each issue type.",
      "ideal": "A successful response with a list of mappings between issue types and their corresponding screen schemes."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/project",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemeProjectAssociations",
      "summary": "",
      "user": "As a project lead, I want to see which issue type screen schemes are associated with my project to manage screen configurations effectively.",
      "ideal": "A successful response listing the issue type screen schemes associated with the specified project."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/project",
      "method": "PUT",
      "operationId": "assignIssueTypeScreenSchemeToProject",
      "summary": "",
      "user": "As a project administrator, I want to assign an issue type screen scheme to my project to ensure the correct screens are used for issues.",
      "ideal": "A successful response confirming the assignment of the issue type screen scheme to the project."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeScreenScheme",
      "summary": "",
      "user": "As a system administrator, I need to delete an obsolete issue type screen scheme to clean up the configuration.",
      "ideal": "A successful response confirming the deletion of the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "PUT",
      "operationId": "updateIssueTypeScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to update the details of an existing issue type screen scheme to reflect changes in our workflow.",
      "ideal": "A successful response confirming the update of the issue type screen scheme with the new details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping",
      "method": "PUT",
      "operationId": "appendMappingsForIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to append new mappings for an issue type screen scheme to include additional issue types.",
      "ideal": "A successful response confirming the addition of new mappings to the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default",
      "method": "PUT",
      "operationId": "updateDefaultScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to update the default screen scheme for an issue type screen scheme to ensure the correct screens are used by default.",
      "ideal": "A successful response confirming the update of the default screen scheme for the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove",
      "method": "POST",
      "operationId": "removeMappingsFromIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project lead, I need to remove outdated mappings from an issue type screen scheme to streamline the issue creation process.",
      "ideal": "A successful response confirming the removal of specified mappings from the issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project",
      "method": "GET",
      "operationId": "getProjectsForIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to retrieve all projects associated with a specific issue type screen scheme to analyze its usage.",
      "ideal": "A successful response listing all projects that are associated with the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetype",
      "method": "GET",
      "operationId": "getIssueAllTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue types available in Jira so that I can understand the different categories of issues we can create.",
      "ideal": "The response should include a list of all issue types with their respective IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/issuetype",
      "method": "POST",
      "operationId": "createIssueType",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type for our project to better categorize our tasks.",
      "ideal": "The response should confirm the creation of the new issue type and return its ID, name, and description."
    },
    {
      "path": "/rest/api/3/issuetype/project",
      "method": "GET",
      "operationId": "getIssueTypesForProject",
      "summary": "",
      "user": "As a developer, I want to see the issue types available for my specific project so that I can select the appropriate type when creating issues.",
      "ideal": "The response should list all issue types associated with the specified project, including their IDs and names."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "DELETE",
      "operationId": "deleteIssueType",
      "summary": "",
      "user": "As a project manager, I want to delete an obsolete issue type from our Jira instance to keep our issue types organized.",
      "ideal": "The response should confirm the deletion of the issue type and return a success message."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "GET",
      "operationId": "getIssueType",
      "summary": "",
      "user": "As a team lead, I want to retrieve details of a specific issue type to ensure it meets our project requirements.",
      "ideal": "The response should include the ID, name, description, and any associated fields of the specified issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "PUT",
      "operationId": "updateIssueType",
      "summary": "",
      "user": "As a Jira administrator, I want to update the name and description of an existing issue type to reflect recent changes in our workflow.",
      "ideal": "The response should confirm the update and return the updated issue type details."
    },
    {
      "path": "/rest/api/3/issuetype/{id}/alternatives",
      "method": "GET",
      "operationId": "getAlternativeIssueTypes",
      "summary": "",
      "user": "As a product owner, I want to see alternative issue types for a specific issue type to explore options for categorizing our tasks.",
      "ideal": "The response should list alternative issue types with their IDs and names that can be used instead of the specified issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{id}/avatar2",
      "method": "POST",
      "operationId": "createIssueTypeAvatar",
      "summary": "",
      "user": "As a Jira administrator, I want to upload an avatar for a specific issue type to enhance its visual representation in the project.",
      "ideal": "The response should confirm the successful upload of the avatar and return the URL of the uploaded image."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/votes",
      "method": "GET",
      "operationId": "getVotes",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current vote count for the issue with ID PROJ-123."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/votes",
      "method": "POST",
      "operationId": "addVote",
      "summary": "",
      "user": "user456",
      "ideal": "Add a vote to the issue with ID PROJ-123."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/votes",
      "method": "DELETE",
      "operationId": "removeVote",
      "summary": "",
      "user": "user789",
      "ideal": "Remove the vote from the issue with ID PROJ-123."
    },
    {
      "path": "/rest/api/3/issue/watching",
      "method": "POST",
      "operationId": "getIsWatchingIssueBulk",
      "summary": "",
      "user": "user123",
      "ideal": "Check if the user is watching multiple issues."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "GET",
      "operationId": "getIssueWatchers",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieve a list of users watching a specific issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "POST",
      "operationId": "addWatcher",
      "summary": "",
      "user": "user789",
      "ideal": "Add the user to the watchers of a specific issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "DELETE",
      "operationId": "removeWatcher",
      "summary": "",
      "user": "user101",
      "ideal": "Remove the user from the watchers of a specific issue."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456/properties",
      "method": "GET",
      "operationId": "getWorklogPropertyKeys",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve all property keys associated with the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456/properties/customProperty",
      "method": "DELETE",
      "operationId": "deleteWorklogProperty",
      "summary": "",
      "user": "User456",
      "ideal": "Delete the custom property 'customProperty' from the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456/properties/customProperty",
      "method": "GET",
      "operationId": "getWorklogProperty",
      "summary": "",
      "user": "User789",
      "ideal": "Retrieve the value of the custom property 'customProperty' for the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456/properties/customProperty",
      "method": "PUT",
      "operationId": "setWorklogProperty",
      "summary": "",
      "user": "User101",
      "ideal": "Set the value of the custom property 'customProperty' for the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog",
      "method": "GET",
      "operationId": "getIssueWorklog",
      "summary": "",
      "user": "User requests the worklog details for issue PROJ-123 to review the logged hours.",
      "ideal": "Returns a list of worklogs associated with the specified issue."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog",
      "method": "POST",
      "operationId": "addWorklog",
      "summary": "",
      "user": "User adds a new worklog entry for issue PROJ-123, logging 3 hours of work.",
      "ideal": "Successfully adds the worklog entry and returns the created worklog details."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456",
      "method": "PUT",
      "operationId": "updateWorklog",
      "summary": "",
      "user": "User updates the existing worklog with ID 456 for issue PROJ-123 to reflect 4 hours instead of 3.",
      "ideal": "Updates the specified worklog and returns the updated worklog details."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456",
      "method": "DELETE",
      "operationId": "deleteWorklog",
      "summary": "",
      "user": "User deletes the worklog entry with ID 456 for issue PROJ-123.",
      "ideal": "Successfully deletes the specified worklog and confirms deletion."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/move",
      "method": "POST",
      "operationId": "bulkMoveWorklogs",
      "summary": "",
      "user": "User moves multiple worklogs from issue PROJ-123 to issue PROJ-456.",
      "ideal": "Successfully moves the specified worklogs to the new issue and returns the updated worklog details."
    },
    {
      "path": "/rest/api/3/worklog/deleted",
      "method": "GET",
      "operationId": "getIdsOfWorklogsDeletedSince",
      "summary": "",
      "user": "User checks for any worklogs deleted since a specific date to maintain records.",
      "ideal": "Returns a list of IDs of worklogs that have been deleted since the specified date."
    },
    {
      "path": "/rest/api/3/worklog/list",
      "method": "POST",
      "operationId": "getWorklogsForIds",
      "summary": "",
      "user": "User retrieves worklogs for a list of specific IDs to analyze time spent on tasks.",
      "ideal": "Returns the worklogs associated with the provided IDs."
    },
    {
      "path": "/rest/api/3/worklog/updated",
      "method": "GET",
      "operationId": "getIdsOfWorklogsModifiedSince",
      "summary": "",
      "user": "User wants to find out which worklogs have been modified since a certain date.",
      "ideal": "Returns a list of IDs of worklogs that have been modified since the specified date."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog",
      "method": "DELETE",
      "operationId": "bulkDeleteWorklogs",
      "summary": "",
      "user": "User deletes multiple worklogs for issue PROJ-123 to clean up unnecessary entries.",
      "ideal": "Successfully deletes the specified worklogs and confirms the deletions."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/789",
      "method": "GET",
      "operationId": "getWorklog",
      "summary": "",
      "user": "User retrieves the details of the worklog with ID 789 for issue PROJ-123.",
      "ideal": "Returns the details of the specified worklog."
    },
    {
      "path": "/rest/api/3/issue",
      "method": "POST",
      "operationId": "createIssue",
      "summary": "",
      "user": "user123",
      "ideal": "Create a new issue in the Jira project with the required fields."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "GET",
      "operationId": "getIssue",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieve details of the specified issue using its ID or key."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "GET",
      "operationId": "getTransitions",
      "summary": "",
      "user": "user789",
      "ideal": "Fetch available transitions for the specified issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "POST",
      "operationId": "doTransition",
      "summary": "",
      "user": "user321",
      "ideal": "Transition the specified issue to a new status."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/changelog",
      "method": "GET",
      "operationId": "getChangeLogs",
      "summary": "",
      "user": "user654",
      "ideal": "Get the changelog history for the specified issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/editmeta",
      "method": "GET",
      "operationId": "getEditIssueMeta",
      "summary": "",
      "user": "user987",
      "ideal": "Retrieve metadata for editing the specified issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/assignee",
      "method": "PUT",
      "operationId": "assignIssue",
      "summary": "",
      "user": "user159",
      "ideal": "Assign the specified issue to a user."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "PUT",
      "operationId": "editIssue",
      "summary": "",
      "user": "user753",
      "ideal": "Update the details of the specified issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "DELETE",
      "operationId": "deleteIssue",
      "summary": "",
      "user": "user852",
      "ideal": "Delete the specified issue from the Jira project."
    },
    {
      "path": "/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes",
      "method": "GET",
      "operationId": "getCreateIssueMetaIssueTypes",
      "summary": "",
      "user": "user246",
      "ideal": "Fetch available issue types for the specified project."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata",
      "method": "GET",
      "operationId": "getAutoComplete",
      "summary": "",
      "user": "A project manager looking to quickly find JQL keywords for filtering issues in Jira.",
      "ideal": "Returns a list of JQL keywords that can be used for autocompletion."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata",
      "method": "POST",
      "operationId": "getAutoCompletePost",
      "summary": "",
      "user": "A developer who wants to submit a specific query to get autocomplete suggestions for JQL.",
      "ideal": "Returns a list of suggestions based on the provided JQL query."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata/suggestions",
      "method": "GET",
      "operationId": "getFieldAutoCompleteForQueryString",
      "summary": "",
      "user": "A QA engineer trying to find field names to use in a JQL query for testing.",
      "ideal": "Returns a list of field names that match the provided query string."
    },
    {
      "path": "/rest/api/3/jql/parse",
      "method": "POST",
      "operationId": "parseJqlQueries",
      "summary": "",
      "user": "A business analyst who needs to validate and parse complex JQL queries for reporting.",
      "ideal": "Returns a structured representation of the parsed JQL query."
    },
    {
      "path": "/rest/api/3/jql/pdcleaner",
      "method": "POST",
      "operationId": "migrateQueries",
      "summary": "",
      "user": "An administrator tasked with migrating old JQL queries to a new format.",
      "ideal": "Returns a confirmation of successful migration of JQL queries."
    },
    {
      "path": "/rest/api/3/jql/sanitize",
      "method": "POST",
      "operationId": "sanitiseJqlQueries",
      "summary": "",
      "user": "A security officer ensuring that JQL queries are sanitized to prevent injection attacks.",
      "ideal": "Returns sanitized versions of the provided JQL queries."
    },
    {
      "path": "/rest/api/3/jql/function/computation",
      "method": "GET",
      "operationId": "getPrecomputations",
      "summary": "",
      "user": "As a project manager, I want to retrieve all precomputed JQL functions to analyze project metrics and make informed decisions.",
      "ideal": "The API should return a list of all precomputed JQL functions available in the Jira instance, including their IDs and relevant metadata."
    },
    {
      "path": "/rest/api/3/jql/function/computation",
      "method": "POST",
      "operationId": "updatePrecomputations",
      "summary": "",
      "user": "As a data analyst, I need to update existing precomputations with new parameters to ensure that the data reflects the latest project changes.",
      "ideal": "The API should accept a payload with updated parameters for the specified precomputation and return a success message along with the updated precomputation details."
    },
    {
      "path": "/rest/api/3/jql/function/computation/search",
      "method": "POST",
      "operationId": "getPrecomputationsByID",
      "summary": "",
      "user": "As a developer, I want to search for specific precomputations by their IDs to integrate them into our reporting tools.",
      "ideal": "The API should accept a list of precomputation IDs and return the corresponding precomputation details, including their status and associated data."
    },
    {
      "path": "/rest/api/3/expression/analyse",
      "method": "POST",
      "operationId": "analyseExpression",
      "summary": "",
      "user": "User wants to analyze a Jira expression to understand its structure and components.",
      "ideal": "The API should return a detailed analysis of the expression, including any errors or warnings."
    },
    {
      "path": "/rest/api/3/expression/eval",
      "method": "POST",
      "operationId": "evaluateJiraExpression",
      "summary": "",
      "user": "User needs to evaluate a specific Jira expression to get the result based on current issue data.",
      "ideal": "The API should return the evaluated result of the expression, along with any relevant context."
    },
    {
      "path": "/rest/api/3/expression/evaluate",
      "method": "POST",
      "operationId": "evaluateJSISJiraExpression",
      "summary": "",
      "user": "User is looking to evaluate a JSIS Jira expression for a custom field calculation.",
      "ideal": "The API should provide the evaluation result of the JSIS expression, including any errors encountered."
    },
    {
      "path": "/rest/api/3/application-properties",
      "method": "GET",
      "operationId": "getApplicationProperty",
      "summary": "",
      "user": "User requests the application properties to check the current configuration settings for the Jira Cloud platform.",
      "ideal": "Returns a list of application properties including key-value pairs for various settings."
    },
    {
      "path": "/rest/api/3/application-properties/advanced-settings",
      "method": "GET",
      "operationId": "getAdvancedSettings",
      "summary": "",
      "user": "Admin wants to retrieve advanced settings to understand the deeper configurations available for the application.",
      "ideal": "Returns advanced settings that can be configured for the Jira application, including options for integrations and customizations."
    },
    {
      "path": "/rest/api/3/application-properties/{id}",
      "method": "PUT",
      "operationId": "setApplicationProperty",
      "summary": "",
      "user": "Developer needs to update a specific application property to enable a new feature in the Jira instance.",
      "ideal": "Successfully updates the specified application property and returns a confirmation message."
    },
    {
      "path": "/rest/api/3/configuration",
      "method": "GET",
      "operationId": "getConfiguration",
      "summary": "",
      "user": "System administrator is checking the overall configuration of the Jira instance to ensure everything is set up correctly.",
      "ideal": "Returns the current configuration settings of the Jira instance, including user permissions and project settings."
    },
    {
      "path": "/rest/api/3/label",
      "method": "GET",
      "operationId": "getAllLabels",
      "summary": "",
      "user": "A project manager looking to retrieve all labels used across various issues in the Jira project to ensure consistent tagging and organization of tasks.",
      "ideal": "Returns a list of all labels available in the Jira instance, allowing the user to see how issues are categorized."
    },
    {
      "path": "/rest/api/3/instance/license",
      "method": "GET",
      "operationId": "getLicense",
      "summary": "",
      "user": "User requests the current license details for their Jira Cloud instance to verify the active subscription and its features.",
      "ideal": "Returns the license information including the type of license, the number of users allowed, and the expiration date."
    },
    {
      "path": "/rest/api/3/license/approximateLicenseCount",
      "method": "GET",
      "operationId": "getApproximateLicenseCount",
      "summary": "",
      "user": "User wants to know the approximate number of licenses available for their Jira Cloud instance to manage user access effectively.",
      "ideal": "Provides an approximate count of the total licenses available for the Jira Cloud instance."
    },
    {
      "path": "/rest/api/3/license/approximateLicenseCount/product/{applicationKey}",
      "method": "GET",
      "operationId": "getApproximateApplicationLicenseCount",
      "summary": "",
      "user": "User queries the approximate license count for a specific application key to ensure compliance with user limits.",
      "ideal": "Returns the approximate number of licenses available for the specified application key, helping the user manage their application usage."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "DELETE",
      "operationId": "removePreference",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully removed user preferences."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "GET",
      "operationId": "getPreference",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieved user preferences successfully."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "PUT",
      "operationId": "setPreference",
      "summary": "",
      "user": "user123",
      "ideal": "User preferences updated successfully."
    },
    {
      "path": "/rest/api/3/mypreferences/locale",
      "method": "GET",
      "operationId": "getLocale",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieved user locale successfully."
    },
    {
      "path": "/rest/api/3/mypreferences/locale",
      "method": "PUT",
      "operationId": "setLocale",
      "summary": "",
      "user": "user123",
      "ideal": "User locale updated successfully."
    },
    {
      "path": "/rest/api/3/myself",
      "method": "GET",
      "operationId": "getCurrentUser",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieved current user information successfully."
    },
    {
      "path": "/rest/api/3/permissionscheme",
      "method": "GET",
      "operationId": "getAllPermissionSchemes",
      "summary": "",
      "user": "Admin user fetching all permission schemes to review current access levels.",
      "ideal": "Returns a list of all permission schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/permissionscheme",
      "method": "POST",
      "operationId": "createPermissionScheme",
      "summary": "",
      "user": "Project manager creating a new permission scheme for a new project.",
      "ideal": "Creates a new permission scheme and returns the details of the created scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "DELETE",
      "operationId": "deletePermissionScheme",
      "summary": "",
      "user": "Admin user deleting an outdated permission scheme that is no longer in use.",
      "ideal": "Deletes the specified permission scheme and returns a success message."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "GET",
      "operationId": "getPermissionScheme",
      "summary": "",
      "user": "User looking to retrieve details of a specific permission scheme for auditing.",
      "ideal": "Returns the details of the specified permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "PUT",
      "operationId": "updatePermissionScheme",
      "summary": "",
      "user": "Admin updating an existing permission scheme to adjust access levels.",
      "ideal": "Updates the specified permission scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "GET",
      "operationId": "getPermissionSchemeGrants",
      "summary": "",
      "user": "User checking the permissions granted by a specific permission scheme.",
      "ideal": "Returns a list of permissions granted by the specified permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "POST",
      "operationId": "createPermissionGrant",
      "summary": "",
      "user": "Admin adding a new permission grant to an existing permission scheme.",
      "ideal": "Creates a new permission grant for the specified permission scheme and returns the details."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "DELETE",
      "operationId": "deletePermissionSchemeEntity",
      "summary": "",
      "user": "Admin removing a specific permission grant that is no longer needed.",
      "ideal": "Deletes the specified permission grant and returns a success message."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "GET",
      "operationId": "getPermissionSchemeGrant",
      "summary": "",
      "user": "User retrieving details of a specific permission grant for review.",
      "ideal": "Returns the details of the specified permission grant."
    },
    {
      "path": "/rest/api/3/mypermissions",
      "method": "GET",
      "operationId": "getMyPermissions",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current user's permissions in Jira."
    },
    {
      "path": "/rest/api/3/permissions",
      "method": "GET",
      "operationId": "getAllPermissions",
      "summary": "",
      "user": "admin456",
      "ideal": "Fetch a list of all permissions available in the Jira instance."
    },
    {
      "path": "/rest/api/3/permissions/check",
      "method": "POST",
      "operationId": "getBulkPermissions",
      "summary": "",
      "user": "user789",
      "ideal": "Check multiple permissions for the current user in a single request."
    },
    {
      "path": "/rest/api/3/permissions/project",
      "method": "POST",
      "operationId": "getPermittedProjects",
      "summary": "",
      "user": "projectManager321",
      "ideal": "Get a list of projects the user has permissions for."
    },
    {
      "path": "/rest/api/3/plans/plan",
      "method": "GET",
      "operationId": "getPlans",
      "summary": "",
      "user": "User requests to retrieve all plans to view their current project management status.",
      "ideal": "Returns a list of all plans with their details."
    },
    {
      "path": "/rest/api/3/plans/plan",
      "method": "POST",
      "operationId": "createPlan",
      "summary": "",
      "user": "User submits a request to create a new plan for an upcoming project.",
      "ideal": "Successfully creates a new plan and returns the plan details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}",
      "method": "GET",
      "operationId": "getPlan",
      "summary": "",
      "user": "User wants to fetch details of a specific plan to review its components.",
      "ideal": "Returns the details of the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}",
      "method": "PUT",
      "operationId": "updatePlan",
      "summary": "",
      "user": "User updates the existing plan to reflect changes in project scope.",
      "ideal": "Successfully updates the plan and returns the updated plan details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/archive",
      "method": "PUT",
      "operationId": "archivePlan",
      "summary": "",
      "user": "User archives a completed plan to keep the workspace organized.",
      "ideal": "Successfully archives the plan and confirms the action."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/duplicate",
      "method": "POST",
      "operationId": "duplicatePlan",
      "summary": "",
      "user": "User duplicates an existing plan to create a similar project setup.",
      "ideal": "Successfully creates a duplicate of the plan and returns the new plan details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/trash",
      "method": "PUT",
      "operationId": "trashPlan",
      "summary": "",
      "user": "User trashes a plan that is no longer needed to declutter the workspace.",
      "ideal": "Successfully moves the plan to trash and confirms the action."
    },
    {
      "path": "/rest/api/3/priorityscheme",
      "method": "GET",
      "operationId": "getPrioritySchemes",
      "summary": "",
      "user": "Project Manager seeking to review all priority schemes in the Jira instance.",
      "ideal": "Returns a list of all priority schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/priorityscheme",
      "method": "POST",
      "operationId": "createPriorityScheme",
      "summary": "",
      "user": "Jira Administrator creating a new priority scheme for a new project.",
      "ideal": "Creates a new priority scheme with specified details and returns the created scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/mappings",
      "method": "POST",
      "operationId": "suggestedPrioritiesForMappings",
      "summary": "",
      "user": "Product Owner looking for suggested priorities for a new mapping.",
      "ideal": "Returns suggested priority mappings based on the provided input."
    },
    {
      "path": "/rest/api/3/priorityscheme/priorities/available",
      "method": "GET",
      "operationId": "getAvailablePrioritiesByPriorityScheme",
      "summary": "",
      "user": "Team Lead checking available priorities for a specific priority scheme.",
      "ideal": "Returns a list of available priorities for the specified priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}",
      "method": "DELETE",
      "operationId": "deletePriorityScheme",
      "summary": "",
      "user": "Jira Administrator removing an outdated priority scheme.",
      "ideal": "Deletes the specified priority scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}",
      "method": "PUT",
      "operationId": "updatePriorityScheme",
      "summary": "",
      "user": "Project Manager updating the details of an existing priority scheme.",
      "ideal": "Updates the specified priority scheme with new details and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}/priorities",
      "method": "GET",
      "operationId": "getPrioritiesByPriorityScheme",
      "summary": "",
      "user": "Scrum Master reviewing priorities associated with a specific priority scheme.",
      "ideal": "Returns a list of priorities associated with the specified priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}/projects",
      "method": "GET",
      "operationId": "getProjectsByPriorityScheme",
      "summary": "",
      "user": "Jira Administrator identifying projects linked to a specific priority scheme.",
      "ideal": "Returns a list of projects that are using the specified priority scheme."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatar",
      "method": "PUT",
      "operationId": "updateProjectAvatar",
      "summary": "",
      "user": "user123",
      "ideal": "Update the avatar for the project with ID or key 'PROJECT-1' using a valid image file."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatar/{id}",
      "method": "DELETE",
      "operationId": "deleteProjectAvatar",
      "summary": "",
      "user": "user456",
      "ideal": "Delete the avatar with ID '123' for the project identified by 'PROJECT-2'."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatar2",
      "method": "POST",
      "operationId": "createProjectAvatar",
      "summary": "",
      "user": "user789",
      "ideal": "Create a new avatar for the project 'PROJECT-3' by uploading a new image."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatars",
      "method": "GET",
      "operationId": "getAllProjectAvatars",
      "summary": "",
      "user": "user101",
      "ideal": "Retrieve all avatars associated with the project 'PROJECT-4' to display in the UI."
    },
    {
      "path": "/rest/api/3/projectCategory",
      "method": "GET",
      "operationId": "getAllProjectCategories",
      "summary": "",
      "user": "As a project manager, I want to retrieve all project categories to organize my projects effectively.",
      "ideal": "The response should return a list of all project categories with their IDs and names."
    },
    {
      "path": "/rest/api/3/projectCategory",
      "method": "POST",
      "operationId": "createProjectCategory",
      "summary": "",
      "user": "As an admin, I want to create a new project category to better categorize my projects.",
      "ideal": "The response should confirm the creation of the new project category with its ID and name."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "DELETE",
      "operationId": "removeProjectCategory",
      "summary": "",
      "user": "As an admin, I want to delete a project category that is no longer needed.",
      "ideal": "The response should confirm the successful deletion of the project category."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "GET",
      "operationId": "getProjectCategoryById",
      "summary": "",
      "user": "As a project manager, I want to retrieve details of a specific project category to understand its purpose.",
      "ideal": "The response should return the details of the specified project category, including its ID and name."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "PUT",
      "operationId": "updateProjectCategory",
      "summary": "",
      "user": "As an admin, I want to update the name of an existing project category to reflect recent changes.",
      "ideal": "The response should confirm the successful update of the project category with the new name."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "DELETE",
      "operationId": "removeDefaultProjectClassification",
      "summary": "",
      "user": "admin_user_1",
      "ideal": "Successfully removed the default classification level for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "GET",
      "operationId": "getDefaultProjectClassification",
      "summary": "",
      "user": "project_manager_2",
      "ideal": "Retrieved the default classification level for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "PUT",
      "operationId": "updateDefaultProjectClassification",
      "summary": "",
      "user": "dev_user_3",
      "ideal": "Successfully updated the default classification level for the specified project."
    },
    {
      "path": "/rest/api/3/component",
      "method": "GET",
      "operationId": "findComponentsForProjects",
      "summary": "",
      "user": "User wants to retrieve all components associated with their projects to manage them effectively.",
      "ideal": "Returns a list of components for the specified projects."
    },
    {
      "path": "/rest/api/3/component",
      "method": "POST",
      "operationId": "createComponent",
      "summary": "",
      "user": "User needs to create a new component for their project to organize tasks better.",
      "ideal": "Successfully creates a new component and returns its details."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "DELETE",
      "operationId": "deleteComponent",
      "summary": "",
      "user": "User wants to delete an obsolete component that is no longer needed in the project.",
      "ideal": "Confirms the deletion of the component and returns a success message."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "GET",
      "operationId": "getComponent",
      "summary": "",
      "user": "User is looking for details about a specific component to understand its configuration.",
      "ideal": "Returns the details of the specified component."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "PUT",
      "operationId": "updateComponent",
      "summary": "",
      "user": "User needs to update the details of an existing component to reflect recent changes.",
      "ideal": "Successfully updates the component and returns the updated details."
    },
    {
      "path": "/rest/api/3/component/{id}/relatedIssueCounts",
      "method": "GET",
      "operationId": "getComponentRelatedIssues",
      "summary": "",
      "user": "User wants to check how many issues are related to a specific component for better tracking.",
      "ideal": "Returns the count of issues related to the specified component."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/component",
      "method": "GET",
      "operationId": "getProjectComponentsPaginated",
      "summary": "",
      "user": "User is looking to retrieve components for a project with pagination to manage large sets of data.",
      "ideal": "Returns a paginated list of components for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/components",
      "method": "GET",
      "operationId": "getProjectComponents",
      "summary": "",
      "user": "User wants to get all components of a project at once for a comprehensive overview.",
      "ideal": "Returns a complete list of components for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectId}/email",
      "method": "GET",
      "operationId": "getProjectEmail",
      "summary": "",
      "user": "As a project manager, I want to retrieve the email address associated with a specific project so that I can communicate effectively with stakeholders.",
      "ideal": "The response should return a JSON object containing the email address linked to the project identified by the projectId."
    },
    {
      "path": "/rest/api/3/project/{projectId}/email",
      "method": "PUT",
      "operationId": "updateProjectEmail",
      "summary": "",
      "user": "As a project administrator, I need to update the email address for a project to ensure that notifications are sent to the correct contact.",
      "ideal": "The request should accept a JSON object with the new email address, and the response should confirm the update with a success message."
    },
    {
      "path": "/rest/api/3/project/ABC/features",
      "method": "GET",
      "operationId": "getFeaturesForProject",
      "summary": "",
      "user": "Project Manager",
      "ideal": "Retrieve the features available for the project with ID or key 'ABC'."
    },
    {
      "path": "/rest/api/3/project/ABC/features/feature1",
      "method": "PUT",
      "operationId": "toggleFeatureForProject",
      "summary": "",
      "user": "Developer",
      "ideal": "Toggle the status of 'feature1' for the project with ID or key 'ABC'."
    },
    {
      "path": "/rest/api/3/projectvalidate/key",
      "method": "GET",
      "operationId": "validateProjectKey",
      "summary": "",
      "user": "User A is a project manager who wants to ensure that the project key 'PROJ123' is valid before creating a new project in Jira. They are using the API to validate the key.",
      "ideal": "The API should return a response indicating whether the project key 'PROJ123' is valid or not, along with any relevant error messages if it is invalid."
    },
    {
      "path": "/rest/api/3/projectvalidate/validProjectKey",
      "method": "GET",
      "operationId": "getValidProjectKey",
      "summary": "",
      "user": "User B is a developer who needs to generate a valid project key for a new software development project. They want to retrieve a valid project key from the API.",
      "ideal": "The API should return a valid project key that adheres to Jira's naming conventions, ensuring it is unique and not already in use."
    },
    {
      "path": "/rest/api/3/projectvalidate/validProjectName",
      "method": "GET",
      "operationId": "getValidProjectName",
      "summary": "",
      "user": "User C is a team lead looking to create a new project and wants to check if the name 'New Development Project' is valid according to Jira's rules.",
      "ideal": "The API should return a response indicating whether the project name 'New Development Project' is valid, along with any suggestions or corrections if it is not."
    },
    {
      "path": "/rest/api/3/project/ABC123/issuesecuritylevelscheme",
      "method": "GET",
      "operationId": "getProjectIssueSecurityScheme",
      "summary": "",
      "user": "Project Manager accessing the issue security level scheme for project ABC123 to ensure proper access controls are in place.",
      "ideal": "Returns the issue security level scheme associated with the specified project."
    },
    {
      "path": "/rest/api/3/project/ABC123/permissionscheme",
      "method": "GET",
      "operationId": "getAssignedPermissionScheme",
      "summary": "",
      "user": "Team Lead checking the assigned permission scheme for project ABC123 to verify user permissions.",
      "ideal": "Retrieves the permission scheme currently assigned to the specified project."
    },
    {
      "path": "/rest/api/3/project/ABC123/permissionscheme",
      "method": "PUT",
      "operationId": "assignPermissionScheme",
      "summary": "",
      "user": "Administrator updating the permission scheme for project ABC123 to align with new organizational policies.",
      "ideal": "Updates the permission scheme for the specified project with the new scheme provided in the request."
    },
    {
      "path": "/rest/api/3/project/ABC123/securitylevel",
      "method": "GET",
      "operationId": "getSecurityLevelsForProject",
      "summary": "",
      "user": "Security Officer reviewing the security levels for project ABC123 to ensure compliance with data protection regulations.",
      "ideal": "Fetches the security levels defined for the specified project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties",
      "method": "GET",
      "operationId": "getProjectPropertyKeys",
      "summary": "",
      "user": "User A wants to retrieve all property keys associated with the project identified by PROJ-123 to understand the custom configurations applied.",
      "ideal": "Returns a list of property keys for the specified project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties/customProperty",
      "method": "DELETE",
      "operationId": "deleteProjectProperty",
      "summary": "",
      "user": "User B needs to remove a custom property 'customProperty' from the project PROJ-123 as it is no longer needed.",
      "ideal": "Successfully deletes the specified property from the project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties/customProperty",
      "method": "GET",
      "operationId": "getProjectProperty",
      "summary": "",
      "user": "User C wants to check the value of 'customProperty' for project PROJ-123 to verify its current setting before making changes.",
      "ideal": "Returns the value of the specified property for the project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties/customProperty",
      "method": "PUT",
      "operationId": "setProjectProperty",
      "summary": "",
      "user": "User D is updating the 'customProperty' for project PROJ-123 to a new value to reflect the latest project requirements.",
      "ideal": "Successfully updates the specified property with the new value."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "DELETE",
      "operationId": "deleteActor",
      "summary": "",
      "user": "adminUser",
      "ideal": "Successfully removed the actor from the specified project role."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "POST",
      "operationId": "addActorUsers",
      "summary": "",
      "user": "projectManager",
      "ideal": "Successfully added users to the specified project role."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "PUT",
      "operationId": "setActors",
      "summary": "",
      "user": "teamLead",
      "ideal": "Successfully updated the actors for the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "DELETE",
      "operationId": "deleteProjectRoleActorsFromRole",
      "summary": "",
      "user": "adminUser",
      "ideal": "Successfully deleted actors from the specified role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "GET",
      "operationId": "getProjectRoleActorsForRole",
      "summary": "",
      "user": "projectManager",
      "ideal": "Successfully retrieved the list of actors for the specified role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "POST",
      "operationId": "addProjectRoleActorsToRole",
      "summary": "",
      "user": "teamLead",
      "ideal": "Successfully added actors to the specified role."
    },
    {
      "path": "/rest/api/3/project/TEST/role",
      "method": "GET",
      "operationId": "getProjectRoles",
      "summary": "",
      "user": "As a project manager, I want to retrieve the roles associated with the project 'TEST' so that I can manage permissions effectively.",
      "ideal": "The response should include a list of roles with their IDs and names for the project 'TEST'."
    },
    {
      "path": "/rest/api/3/project/TEST/role/10002",
      "method": "GET",
      "operationId": "getProjectRole",
      "summary": "",
      "user": "As a project administrator, I need to get details of the role with ID '10002' in project 'TEST' to understand its permissions.",
      "ideal": "The response should provide detailed information about the role, including its name and associated permissions."
    },
    {
      "path": "/rest/api/3/project/TEST/roledetails",
      "method": "GET",
      "operationId": "getProjectRoleDetails",
      "summary": "",
      "user": "As a team lead, I want to see detailed information about all roles in project 'TEST' to ensure my team has the right access.",
      "ideal": "The response should include detailed descriptions of each role and the users assigned to them."
    },
    {
      "path": "/rest/api/3/role",
      "method": "GET",
      "operationId": "getAllProjectRoles",
      "summary": "",
      "user": "As an admin, I need to fetch all available project roles across the system to review and manage them.",
      "ideal": "The response should return a comprehensive list of all project roles with their IDs and names."
    },
    {
      "path": "/rest/api/3/role",
      "method": "POST",
      "operationId": "createProjectRole",
      "summary": "",
      "user": "As a project manager, I want to create a new role called 'Tester' to assign specific permissions to my testing team.",
      "ideal": "The response should confirm the creation of the 'Tester' role and return its ID and details."
    },
    {
      "path": "/rest/api/3/role/10003",
      "method": "DELETE",
      "operationId": "deleteProjectRole",
      "summary": "",
      "user": "As an admin, I need to delete the role with ID '10003' as it is no longer needed in the project.",
      "ideal": "The response should confirm the successful deletion of the role with ID '10003'."
    },
    {
      "path": "/rest/api/3/role/10001",
      "method": "GET",
      "operationId": "getProjectRoleById",
      "summary": "",
      "user": "As a project administrator, I want to retrieve the role with ID '10001' to check its current settings.",
      "ideal": "The response should include the role's name, description, and permissions."
    },
    {
      "path": "/rest/api/3/role/10001",
      "method": "POST",
      "operationId": "partialUpdateProjectRole",
      "summary": "",
      "user": "As a project manager, I want to update the description of the role with ID '10001' to reflect recent changes.",
      "ideal": "The response should confirm the partial update and return the updated role details."
    },
    {
      "path": "/rest/api/3/role/10001",
      "method": "PUT",
      "operationId": "fullyUpdateProjectRole",
      "summary": "",
      "user": "As an admin, I need to fully update the role with ID '10001' to change its name and permissions.",
      "ideal": "The response should confirm the full update and return the new role details."
    },
    {
      "path": "/rest/api/3/project-template",
      "method": "POST",
      "operationId": "createProjectWithCustomTemplate",
      "summary": "",
      "user": "A project manager creating a new project using a custom template for better organization.",
      "ideal": "Successfully creates a new project with the specified custom template."
    },
    {
      "path": "/rest/api/3/project-template/edit-template",
      "method": "PUT",
      "operationId": "editTemplate",
      "summary": "",
      "user": "A team lead updating an existing project template to include new fields and workflows.",
      "ideal": "Successfully updates the existing project template with the new configurations."
    },
    {
      "path": "/rest/api/3/project-template/live-template",
      "method": "GET",
      "operationId": "liveTemplate",
      "summary": "",
      "user": "A developer checking the current live project template to ensure it meets the team's needs.",
      "ideal": "Returns the current live project template details."
    },
    {
      "path": "/rest/api/3/project-template/remove-template",
      "method": "DELETE",
      "operationId": "removeTemplate",
      "summary": "",
      "user": "An administrator removing an outdated project template that is no longer in use.",
      "ideal": "Successfully removes the specified project template from the system."
    },
    {
      "path": "/rest/api/3/project-template/save-template",
      "method": "POST",
      "operationId": "saveTemplate",
      "summary": "",
      "user": "A project coordinator saving a newly created project template for future use.",
      "ideal": "Successfully saves the new project template for later application."
    },
    {
      "path": "/rest/api/3/project/type",
      "method": "GET",
      "operationId": "getAllProjectTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available project types in Jira so that I can choose the appropriate one for my new project.",
      "ideal": "The response should include a list of all project types with their keys and names, allowing me to understand the options available."
    },
    {
      "path": "/rest/api/3/project/type/accessible",
      "method": "GET",
      "operationId": "getAllAccessibleProjectTypes",
      "summary": "",
      "user": "As a team member, I need to see all project types that I have access to, so I can select one for my tasks.",
      "ideal": "The response should return only the project types that I have permission to access, along with their details."
    },
    {
      "path": "/rest/api/3/project/type/{projectTypeKey}",
      "method": "GET",
      "operationId": "getProjectTypeByKey",
      "summary": "",
      "user": "As a developer, I want to get detailed information about a specific project type using its key to understand its configuration.",
      "ideal": "The response should provide comprehensive details about the project type, including its name, description, and any associated settings."
    },
    {
      "path": "/rest/api/3/project/type/{projectTypeKey}/accessible",
      "method": "GET",
      "operationId": "getAccessibleProjectTypeByKey",
      "summary": "",
      "user": "As a project administrator, I need to check if a specific project type is accessible for my team members based on their permissions.",
      "ideal": "The response should indicate whether the specified project type is accessible to the current user, along with relevant details."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/version",
      "method": "GET",
      "operationId": "getProjectVersionsPaginated",
      "summary": "",
      "user": "User A",
      "ideal": "Retrieve all versions for the project with ID PROJ-123, paginated."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/versions",
      "method": "GET",
      "operationId": "getProjectVersions",
      "summary": "",
      "user": "User B",
      "ideal": "Fetch all versions associated with the project identified by PROJ-123."
    },
    {
      "path": "/rest/api/3/version",
      "method": "POST",
      "operationId": "createVersion",
      "summary": "",
      "user": "User C",
      "ideal": "Create a new version in the system with specified details."
    },
    {
      "path": "/rest/api/3/version/456",
      "method": "DELETE",
      "operationId": "deleteVersion",
      "summary": "",
      "user": "User D",
      "ideal": "Delete the version with ID 456 from the system."
    },
    {
      "path": "/rest/api/3/version/456",
      "method": "GET",
      "operationId": "getVersion",
      "summary": "",
      "user": "User E",
      "ideal": "Retrieve details of the version with ID 456."
    },
    {
      "path": "/rest/api/3/version/456",
      "method": "PUT",
      "operationId": "updateVersion",
      "summary": "",
      "user": "User F",
      "ideal": "Update the version with ID 456 with new information."
    },
    {
      "path": "/rest/api/3/version/456/mergeto/789",
      "method": "PUT",
      "operationId": "mergeVersions",
      "summary": "",
      "user": "User G",
      "ideal": "Merge version 456 into version 789, transferring issues."
    },
    {
      "path": "/rest/api/3/version/456/move",
      "method": "POST",
      "operationId": "moveVersion",
      "summary": "",
      "user": "User H",
      "ideal": "Move version 456 to a different project or location."
    },
    {
      "path": "/rest/api/3/version/456/relatedIssueCounts",
      "method": "GET",
      "operationId": "getVersionRelatedIssues",
      "summary": "",
      "user": "User I",
      "ideal": "Get the count of issues related to version 456."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork",
      "method": "GET",
      "operationId": "getRelatedWork",
      "summary": "",
      "user": "User J",
      "ideal": "Retrieve related work items for version 456."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork",
      "method": "POST",
      "operationId": "createRelatedWork",
      "summary": "",
      "user": "User K",
      "ideal": "Create a new related work entry for version 456."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork",
      "method": "PUT",
      "operationId": "updateRelatedWork",
      "summary": "",
      "user": "User L",
      "ideal": "Update existing related work for version 456."
    },
    {
      "path": "/rest/api/3/version/456/removeAndSwap",
      "method": "POST",
      "operationId": "deleteAndReplaceVersion",
      "summary": "",
      "user": "User M",
      "ideal": "Delete version 456 and replace it with another version."
    },
    {
      "path": "/rest/api/3/version/456/unresolvedIssueCount",
      "method": "GET",
      "operationId": "getVersionUnresolvedIssues",
      "summary": "",
      "user": "User N",
      "ideal": "Get the count of unresolved issues for version 456."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork/789",
      "method": "DELETE",
      "operationId": "deleteRelatedWork",
      "summary": "",
      "user": "User O",
      "ideal": "Delete the related work entry with ID 789 for version 456."
    },
    {
      "path": "/rest/api/3/project",
      "method": "GET",
      "operationId": "getAllProjects",
      "summary": "",
      "user": "User wants to retrieve a list of all projects in the Jira Cloud instance to get an overview of ongoing work.",
      "ideal": "A successful response with a list of project objects, including project keys, names, and IDs."
    },
    {
      "path": "/rest/api/3/project",
      "method": "POST",
      "operationId": "createProject",
      "summary": "",
      "user": "User needs to create a new project for their team to manage tasks and track progress effectively.",
      "ideal": "A successful response with the details of the newly created project, including its ID and key."
    },
    {
      "path": "/rest/api/3/project/recent",
      "method": "GET",
      "operationId": "getRecent",
      "summary": "",
      "user": "User wants to quickly access the most recently viewed projects to continue their work without searching.",
      "ideal": "A successful response with a list of recently accessed projects."
    },
    {
      "path": "/rest/api/3/project/search",
      "method": "GET",
      "operationId": "searchProjects",
      "summary": "",
      "user": "User is looking for specific projects by name or key to find relevant information.",
      "ideal": "A successful response with a list of projects matching the search criteria."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "DELETE",
      "operationId": "deleteProject",
      "summary": "",
      "user": "User wants to delete an obsolete project that is no longer needed to keep the workspace organized.",
      "ideal": "A successful response confirming the deletion of the project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "GET",
      "operationId": "getProject",
      "summary": "",
      "user": "User needs to retrieve detailed information about a specific project to review its settings and configurations.",
      "ideal": "A successful response with detailed project information, including its settings and components."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "PUT",
      "operationId": "updateProject",
      "summary": "",
      "user": "User wants to update the project details, such as the name or description, to reflect recent changes.",
      "ideal": "A successful response confirming the update of the project details."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/archive",
      "method": "POST",
      "operationId": "archiveProject",
      "summary": "",
      "user": "User wants to archive a project that is completed to declutter the active project list.",
      "ideal": "A successful response confirming that the project has been archived."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/delete",
      "method": "POST",
      "operationId": "deleteProjectAsynchronously",
      "summary": "",
      "user": "User wants to delete a project asynchronously to avoid blocking the UI while the operation completes.",
      "ideal": "A successful response indicating that the deletion process has started."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/restore",
      "method": "POST",
      "operationId": "restore",
      "summary": "",
      "user": "User needs to restore a previously archived project to make it active again for ongoing work.",
      "ideal": "A successful response confirming that the project has been restored."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/statuses",
      "method": "GET",
      "operationId": "getAllStatuses",
      "summary": "",
      "user": "User wants to retrieve all statuses associated with a project to understand its workflow.",
      "ideal": "A successful response with a list of statuses for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectId}/hierarchy",
      "method": "GET",
      "operationId": "getHierarchy",
      "summary": "",
      "user": "User is looking to understand the hierarchy of issues within a project to better manage tasks.",
      "ideal": "A successful response with the hierarchy structure of issues in the project."
    },
    {
      "path": "/rest/api/3/project/{projectKeyOrId}/notificationscheme",
      "method": "GET",
      "operationId": "getNotificationSchemeForProject",
      "summary": "",
      "user": "User wants to check the notification scheme for a project to ensure team members receive updates.",
      "ideal": "A successful response with the notification scheme details for the specified project."
    },
    {
      "path": "/rest/api/3/screenscheme",
      "method": "GET",
      "operationId": "getScreenSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all screen schemes to understand how different screens are configured for various issue types in my projects.",
      "ideal": "Successfully retrieves a list of all screen schemes available in the Jira Cloud platform."
    },
    {
      "path": "/rest/api/3/screenscheme",
      "method": "POST",
      "operationId": "createScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new screen scheme to associate specific screens with issue types for better issue management.",
      "ideal": "Successfully creates a new screen scheme and returns the details of the created scheme."
    },
    {
      "path": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "DELETE",
      "operationId": "deleteScreenScheme",
      "summary": "",
      "user": "As a project administrator, I want to delete an obsolete screen scheme that is no longer in use to keep the system clean.",
      "ideal": "Successfully deletes the specified screen scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "PUT",
      "operationId": "updateScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to update an existing screen scheme to modify the screens associated with certain issue types.",
      "ideal": "Successfully updates the specified screen scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields",
      "method": "GET",
      "operationId": "getAllScreenTabFields",
      "summary": "",
      "user": "User requests to retrieve all fields associated with a specific tab in a screen to understand the layout and available options for a project.",
      "ideal": "Successful retrieval of all fields in the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields",
      "method": "POST",
      "operationId": "addScreenTabField",
      "summary": "",
      "user": "User wants to add a new field to a specific tab in a screen to enhance the data capture for issues in the project.",
      "ideal": "Field is successfully added to the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields/3001",
      "method": "DELETE",
      "operationId": "removeScreenTabField",
      "summary": "",
      "user": "User decides to remove an existing field from a tab in a screen to declutter the interface and improve user experience.",
      "ideal": "Field is successfully removed from the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields/3001/move",
      "method": "POST",
      "operationId": "moveScreenTabField",
      "summary": "",
      "user": "User needs to rearrange the order of fields within a tab to prioritize certain information for better visibility.",
      "ideal": "Field is successfully moved to the desired position within the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/tabs",
      "method": "GET",
      "operationId": "getBulkScreenTabs",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available screen tabs to understand the current configuration of screens in my Jira project.",
      "ideal": "The API should return a list of all screen tabs with their respective details, including tab IDs and names."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs",
      "method": "GET",
      "operationId": "getAllScreenTabs",
      "summary": "",
      "user": "As a developer, I need to get all tabs for a specific screen to ensure I am working with the correct fields in my issue types.",
      "ideal": "The API should return a detailed list of tabs associated with the specified screen ID, including their names and positions."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs",
      "method": "POST",
      "operationId": "addScreenTab",
      "summary": "",
      "user": "As a product owner, I want to add a new tab to a screen to organize fields better for my team.",
      "ideal": "The API should successfully create a new tab under the specified screen and return the details of the newly created tab."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "DELETE",
      "operationId": "deleteScreenTab",
      "summary": "",
      "user": "As an administrator, I need to remove a tab from a screen that is no longer relevant to keep the UI clean.",
      "ideal": "The API should delete the specified tab and confirm the deletion with a success message."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "PUT",
      "operationId": "renameScreenTab",
      "summary": "",
      "user": "As a team lead, I want to rename a tab to better reflect its purpose for my team members.",
      "ideal": "The API should update the tab name and return the updated tab details, confirming the change."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
      "method": "POST",
      "operationId": "moveScreenTab",
      "summary": "",
      "user": "As a UI designer, I want to rearrange the tabs on a screen to improve the user experience.",
      "ideal": "The API should successfully move the specified tab to the new position and return the updated order of tabs."
    },
    {
      "path": "/rest/api/3/field/10000/screens",
      "method": "GET",
      "operationId": "getScreensForField",
      "summary": "",
      "user": "User A wants to see all screens associated with a specific field to understand where it is used in the Jira interface.",
      "ideal": "Returns a list of screens that include the specified field."
    },
    {
      "path": "/rest/api/3/screens",
      "method": "GET",
      "operationId": "getScreens",
      "summary": "",
      "user": "User B needs to retrieve all available screens in the Jira project to manage their configurations effectively.",
      "ideal": "Returns a list of all screens in the system."
    },
    {
      "path": "/rest/api/3/screens",
      "method": "POST",
      "operationId": "createScreen",
      "summary": "",
      "user": "User C wants to create a new screen for a custom issue type to enhance the user experience.",
      "ideal": "Creates a new screen and returns the details of the created screen."
    },
    {
      "path": "/rest/api/3/screens/addToDefault/10000",
      "method": "POST",
      "operationId": "addFieldToDefaultScreen",
      "summary": "",
      "user": "User D needs to add a custom field to the default screen to ensure it is visible during issue creation.",
      "ideal": "Adds the specified field to the default screen and confirms the addition."
    },
    {
      "path": "/rest/api/3/screens/20000",
      "method": "DELETE",
      "operationId": "deleteScreen",
      "summary": "",
      "user": "User E wants to remove an outdated screen that is no longer needed in the project.",
      "ideal": "Deletes the specified screen and returns a success message."
    },
    {
      "path": "/rest/api/3/screens/20000",
      "method": "PUT",
      "operationId": "updateScreen",
      "summary": "",
      "user": "User F needs to update the name of an existing screen to better reflect its purpose.",
      "ideal": "Updates the screen details and returns the updated screen information."
    },
    {
      "path": "/rest/api/3/screens/20000/availableFields",
      "method": "GET",
      "operationId": "getAvailableScreenFields",
      "summary": "",
      "user": "User G wants to check which fields are available to be added to a specific screen for better issue tracking.",
      "ideal": "Returns a list of fields that can be added to the specified screen."
    },
    {
      "path": "/rest/api/3/serverInfo",
      "method": "GET",
      "operationId": "getServerInfo",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the server information for the Jira Cloud platform, including version, build number, and other relevant details."
    },
    {
      "path": "/rest/atlassian-connect/1/service-registry",
      "method": "GET",
      "operationId": "ServiceRegistryResource.services_get",
      "summary": "",
      "user": "As a Jira administrator, I want to retrieve the list of registered services in my Atlassian Connect application so that I can manage integrations effectively.",
      "ideal": "The API should return a JSON array of services with their details, including service name, URL, and status."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "GET",
      "operationId": "getStatusesById",
      "summary": "",
      "user": "As a project manager, I want to retrieve the list of all statuses in the Jira system to understand the current workflow states available for my projects.",
      "ideal": "The API should return a list of all statuses with their IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "POST",
      "operationId": "createStatuses",
      "summary": "",
      "user": "As a team lead, I want to create a new status called 'In Review' to better reflect our workflow process.",
      "ideal": "The API should create the new status and return the status ID and details of the created status."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}",
      "method": "PUT",
      "operationId": "updateStatuses",
      "summary": "",
      "user": "As a product owner, I need to update the status 'In Progress' to 'In Development' to clarify the current phase of tasks.",
      "ideal": "The API should update the status and return the updated status details."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForStatus",
      "summary": "",
      "user": "As a project administrator, I want to check which projects are using the 'Done' status to ensure it is applied correctly across all projects.",
      "ideal": "The API should return a list of projects that are currently using the specified status."
    },
    {
      "path": "/rest/api/3/statuses/search",
      "method": "GET",
      "operationId": "search",
      "summary": "",
      "user": "As a QA engineer, I want to search for statuses that include the word 'Testing' to find relevant statuses for my testing phase.",
      "ideal": "The API should return a list of statuses that match the search criteria."
    },
    {
      "path": "/rest/api/3/statuses/byNames",
      "method": "GET",
      "operationId": "getStatusesByName",
      "summary": "",
      "user": "As a scrum master, I want to retrieve statuses by their names to verify if all necessary statuses are defined in the system.",
      "ideal": "The API should return the statuses that match the provided names."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/project/{projectId}/issueTypeUsages",
      "method": "GET",
      "operationId": "getProjectIssueTypeUsagesForStatus",
      "summary": "",
      "user": "As a project manager, I need to know which issue types are associated with the 'In Review' status in my project to manage workflow effectively.",
      "ideal": "The API should return a list of issue types that are associated with the specified status in the given project."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/workflowUsages",
      "method": "GET",
      "operationId": "getWorkflowUsagesForStatus",
      "summary": "",
      "user": "As a system administrator, I want to find out which workflows are using the 'To Do' status to ensure proper workflow management.",
      "ideal": "The API should return a list of workflows that utilize the specified status."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "DELETE",
      "operationId": "deleteStatusesById",
      "summary": "",
      "user": "As a project administrator, I want to delete the obsolete status 'Archived' to clean up the status list in Jira.",
      "ideal": "The API should successfully delete the specified status and return a confirmation message."
    },
    {
      "path": "/rest/api/3/task/12345",
      "method": "GET",
      "operationId": "getTask",
      "summary": "",
      "user": "User123 is trying to retrieve the details of task 12345 to check its current status and any associated comments or attachments.",
      "ideal": "The response should include the task details such as title, description, status, assignee, and any relevant metadata."
    },
    {
      "path": "/rest/api/3/task/12345/cancel",
      "method": "POST",
      "operationId": "cancelTask",
      "summary": "",
      "user": "User123 wants to cancel task 12345 due to a change in project priorities and needs to ensure that the task is marked as canceled in the system.",
      "ideal": "The response should confirm that the task has been successfully canceled and provide any necessary follow-up information or next steps."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team",
      "method": "GET",
      "operationId": "getTeams",
      "summary": "",
      "user": "User A wants to retrieve the list of teams associated with the plan identified by ID 12345.",
      "ideal": "Successfully retrieves the list of teams for the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/atlassian",
      "method": "POST",
      "operationId": "addAtlassianTeam",
      "summary": "",
      "user": "User B needs to add an Atlassian team to the plan with ID 12345.",
      "ideal": "Successfully adds the Atlassian team to the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/atlassian/67890",
      "method": "DELETE",
      "operationId": "removeAtlassianTeam",
      "summary": "",
      "user": "User C wants to remove the Atlassian team with ID 67890 from the plan 12345.",
      "ideal": "Successfully removes the specified Atlassian team from the plan."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/atlassian/67890",
      "method": "GET",
      "operationId": "getAtlassianTeam",
      "summary": "",
      "user": "User D is looking to get details of the Atlassian team with ID 67890 in plan 12345.",
      "ideal": "Successfully retrieves the details of the specified Atlassian team."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/atlassian/67890",
      "method": "PUT",
      "operationId": "updateAtlassianTeam",
      "summary": "",
      "user": "User E needs to update the information for the Atlassian team with ID 67890 in plan 12345.",
      "ideal": "Successfully updates the specified Atlassian team's information."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/planonly",
      "method": "POST",
      "operationId": "createPlanOnlyTeam",
      "summary": "",
      "user": "User F wants to create a new plan-only team for plan ID 12345.",
      "ideal": "Successfully creates a new plan-only team for the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/planonly/54321",
      "method": "DELETE",
      "operationId": "deletePlanOnlyTeam",
      "summary": "",
      "user": "User G is looking to delete the plan-only team with ID 54321 from plan 12345.",
      "ideal": "Successfully deletes the specified plan-only team from the plan."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/planonly/54321",
      "method": "GET",
      "operationId": "getPlanOnlyTeam",
      "summary": "",
      "user": "User H wants to retrieve details of the plan-only team with ID 54321 in plan 12345.",
      "ideal": "Successfully retrieves the details of the specified plan-only team."
    },
    {
      "path": "/rest/api/3/plans/plan/12345/team/planonly/54321",
      "method": "PUT",
      "operationId": "updatePlanOnlyTeam",
      "summary": "",
      "user": "User I needs to update the plan-only team with ID 54321 in plan 12345.",
      "ideal": "Successfully updates the specified plan-only team's information."
    },
    {
      "path": "/rest/api/3/configuration/timetracking",
      "method": "GET",
      "operationId": "getSelectedTimeTrackingImplementation",
      "summary": "",
      "user": "As a project manager, I want to retrieve the currently selected time tracking implementation for my Jira project so that I can ensure it aligns with our team's workflow.",
      "ideal": "The response should include the currently selected time tracking implementation details, such as the implementation name and any relevant configuration options."
    },
    {
      "path": "/rest/api/3/configuration/timetracking",
      "method": "PUT",
      "operationId": "selectTimeTrackingImplementation",
      "summary": "",
      "user": "As a system administrator, I need to update the time tracking implementation for our Jira instance to a new method that better suits our reporting needs.",
      "ideal": "The response should confirm the successful update of the time tracking implementation and provide the new implementation details."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/list",
      "method": "GET",
      "operationId": "getAvailableTimeTrackingImplementations",
      "summary": "",
      "user": "As a developer, I want to see a list of all available time tracking implementations so that I can recommend the best option for our team.",
      "ideal": "The response should include a comprehensive list of available time tracking implementations along with their descriptions and any relevant features."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/options",
      "method": "GET",
      "operationId": "getSharedTimeTrackingConfiguration",
      "summary": "",
      "user": "As a product owner, I want to access the shared time tracking configuration to ensure consistency across all projects in our organization.",
      "ideal": "The response should provide the current shared time tracking configuration settings, including any custom fields or options that are being used."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/options",
      "method": "PUT",
      "operationId": "setSharedTimeTrackingConfiguration",
      "summary": "",
      "user": "As a project administrator, I need to update the shared time tracking configuration to reflect our new policies regarding time entry and reporting.",
      "ideal": "The response should confirm the successful update of the shared time tracking configuration and return the updated settings."
    },
    {
      "path": "/rest/api/3/uiModifications",
      "method": "GET",
      "operationId": "getUiModifications",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current UI modifications applied to my Jira instance so that I can review any changes made to the user interface.",
      "ideal": "The response should include a list of all UI modifications, detailing their IDs, types, and statuses."
    },
    {
      "path": "/rest/api/3/uiModifications",
      "method": "POST",
      "operationId": "createUiModification",
      "summary": "",
      "user": "As a developer, I want to create a new UI modification to enhance the user experience for our team, so that we can streamline our workflow.",
      "ideal": "The response should confirm the successful creation of the UI modification and return the new modification's ID and details."
    },
    {
      "path": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "DELETE",
      "operationId": "deleteUiModification",
      "summary": "",
      "user": "As an admin, I want to delete an outdated UI modification that is no longer relevant, to keep the interface clean and user-friendly.",
      "ideal": "The response should confirm the deletion of the specified UI modification and return a success message."
    },
    {
      "path": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "PUT",
      "operationId": "updateUiModification",
      "summary": "",
      "user": "As a UX designer, I want to update an existing UI modification to improve its functionality based on user feedback, ensuring that our interface meets user needs.",
      "ideal": "The response should confirm the successful update of the UI modification and return the updated details."
    },
    {
      "path": "/rest/api/3/user/properties",
      "method": "GET",
      "operationId": "getUserPropertyKeys",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all property keys associated with the user."
    },
    {
      "path": "/rest/api/3/user/properties/notificationPreference",
      "method": "DELETE",
      "operationId": "deleteUserProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Delete the user's notification preference property."
    },
    {
      "path": "/rest/api/3/user/properties/notificationPreference",
      "method": "GET",
      "operationId": "getUserProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Fetch the user's current notification preference property."
    },
    {
      "path": "/rest/api/3/user/properties/notificationPreference",
      "method": "PUT",
      "operationId": "setUserProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Set the user's notification preference property to 'email'."
    },
    {
      "path": "/rest/api/3/user/assignable/multiProjectSearch",
      "method": "GET",
      "operationId": "findBulkAssignableUsers",
      "summary": "",
      "user": "project_manager",
      "ideal": "Retrieve a list of users who can be assigned issues across multiple projects."
    },
    {
      "path": "/rest/api/3/user/assignable/search",
      "method": "GET",
      "operationId": "findAssignableUsers",
      "summary": "",
      "user": "team_lead",
      "ideal": "Get a list of users who can be assigned issues in a specific project."
    },
    {
      "path": "/rest/api/3/user/permission/search",
      "method": "GET",
      "operationId": "findUsersWithAllPermissions",
      "summary": "",
      "user": "admin",
      "ideal": "Find users who have all permissions in the Jira instance."
    },
    {
      "path": "/rest/api/3/user/picker",
      "method": "GET",
      "operationId": "findUsersForPicker",
      "summary": "",
      "user": "issue_reporter",
      "ideal": "Search for users to display in a user picker dropdown."
    },
    {
      "path": "/rest/api/3/user/search",
      "method": "GET",
      "operationId": "findUsers",
      "summary": "",
      "user": "hr_manager",
      "ideal": "Retrieve a list of users based on specific search criteria."
    },
    {
      "path": "/rest/api/3/user/search/query",
      "method": "GET",
      "operationId": "findUsersByQuery",
      "summary": "",
      "user": "developer",
      "ideal": "Search for users using a query string to filter results."
    },
    {
      "path": "/rest/api/3/user/search/query/key",
      "method": "GET",
      "operationId": "findUserKeysByQuery",
      "summary": "",
      "user": "qa_tester",
      "ideal": "Find user keys based on a search query."
    },
    {
      "path": "/rest/api/3/user/viewissue/search",
      "method": "GET",
      "operationId": "findUsersWithBrowsePermission",
      "summary": "",
      "user": "project_admin",
      "ideal": "Get a list of users who have permission to browse issues in a project."
    },
    {
      "path": "/rest/api/3/user",
      "method": "GET",
      "operationId": "getUser",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve user details for John Doe."
    },
    {
      "path": "/rest/api/3/user",
      "method": "POST",
      "operationId": "createUser",
      "summary": "",
      "user": "jane.smith@example.com",
      "ideal": "Create a new user with the email jane.smith@example.com."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "GET",
      "operationId": "getUserDefaultColumns",
      "summary": "",
      "user": "alice.brown@example.com",
      "ideal": "Fetch default columns for user Alice Brown."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "PUT",
      "operationId": "setUserColumns",
      "summary": "",
      "user": "bob.johnson@example.com",
      "ideal": "Update column settings for user Bob Johnson."
    },
    {
      "path": "/rest/api/3/user/groups",
      "method": "GET",
      "operationId": "getUserGroups",
      "summary": "",
      "user": "charlie.white@example.com",
      "ideal": "Get groups associated with user Charlie White."
    },
    {
      "path": "/rest/api/3/users",
      "method": "GET",
      "operationId": "getAllUsersDefault",
      "summary": "",
      "user": "admin@example.com",
      "ideal": "Retrieve all users in the default view for admin."
    },
    {
      "path": "/rest/api/3/user/bulk",
      "method": "GET",
      "operationId": "bulkGetUsers",
      "summary": "",
      "user": "team.lead@example.com",
      "ideal": "Bulk retrieve user details for the team."
    },
    {
      "path": "/rest/api/3/user/email",
      "method": "GET",
      "operationId": "getUserEmail",
      "summary": "",
      "user": "david.green@example.com",
      "ideal": "Get the email address for user David Green."
    },
    {
      "path": "/rest/api/3/user/email/bulk",
      "method": "GET",
      "operationId": "getUserEmailBulk",
      "summary": "",
      "user": "project.manager@example.com",
      "ideal": "Bulk retrieve email addresses for project team members."
    },
    {
      "path": "/rest/api/3/user/bulk/migration",
      "method": "GET",
      "operationId": "bulkGetUsersMigration",
      "summary": "",
      "user": "migration.admin@example.com",
      "ideal": "Fetch users for migration process."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "DELETE",
      "operationId": "resetUserColumns",
      "summary": "",
      "user": "emily.jones@example.com",
      "ideal": "Reset column settings for user Emily Jones."
    },
    {
      "path": "/rest/api/3/users/search",
      "method": "GET",
      "operationId": "getAllUsers",
      "summary": "",
      "user": "search.admin@example.com",
      "ideal": "Search for all users based on criteria."
    },
    {
      "path": "/rest/api/3/user",
      "method": "DELETE",
      "operationId": "removeUser",
      "summary": "",
      "user": "old.user@example.com",
      "ideal": "Remove user with email old.user@example.com from the system."
    },
    {
      "path": "/rest/api/3/webhook",
      "method": "GET",
      "operationId": "getDynamicWebhooksForApp",
      "summary": "",
      "user": "As a developer, I want to retrieve all dynamic webhooks associated with my app to ensure they are correctly configured and functioning.",
      "ideal": "The response should return a list of webhooks with their details, including the URL, events they are subscribed to, and their current status."
    },
    {
      "path": "/rest/api/3/webhook",
      "method": "POST",
      "operationId": "registerDynamicWebhooks",
      "summary": "",
      "user": "As a developer, I need to register a new dynamic webhook for my application to receive real-time updates on specific events.",
      "ideal": "The response should confirm the successful registration of the webhook and provide the webhook ID and details of the registered events."
    },
    {
      "path": "/rest/api/3/webhook/{webhookId}",
      "method": "DELETE",
      "operationId": "deleteWebhookById",
      "summary": "",
      "user": "As an administrator, I want to delete a specific webhook that is no longer needed to keep the system clean and efficient.",
      "ideal": "The response should confirm the deletion of the webhook and indicate that it has been successfully removed from the system."
    },
    {
      "path": "/rest/api/3/webhook/failed",
      "method": "GET",
      "operationId": "getFailedWebhooks",
      "summary": "",
      "user": "As a system operator, I need to check for any failed webhooks to troubleshoot issues and ensure that all events are being processed correctly.",
      "ideal": "The response should provide a list of failed webhooks, including the reason for failure and any relevant error messages."
    },
    {
      "path": "/rest/api/3/webhook/refresh",
      "method": "PUT",
      "operationId": "refreshWebhooks",
      "summary": "",
      "user": "As a developer, I want to refresh all webhooks to ensure they are up-to-date with the latest configuration and settings.",
      "ideal": "The response should confirm that the webhooks have been refreshed and provide a summary of any changes made during the refresh process."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/createdraft",
      "method": "POST",
      "operationId": "createWorkflowSchemeDraftFromParent",
      "summary": "",
      "user": "Admin user creating a draft workflow scheme from an existing parent scheme.",
      "ideal": "Successfully creates a draft workflow scheme based on the specified parent workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeDraft",
      "summary": "",
      "user": "Admin user deleting an existing draft workflow scheme.",
      "ideal": "Successfully deletes the specified draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "GET",
      "operationId": "getWorkflowSchemeDraft",
      "summary": "",
      "user": "Admin user retrieving the details of a draft workflow scheme.",
      "ideal": "Returns the details of the specified draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "PUT",
      "operationId": "updateWorkflowSchemeDraft",
      "summary": "",
      "user": "Admin user updating the draft workflow scheme with new configurations.",
      "ideal": "Successfully updates the specified draft workflow scheme with the provided details."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "DELETE",
      "operationId": "deleteDraftDefaultWorkflow",
      "summary": "",
      "user": "Admin user removing the default workflow from the draft scheme.",
      "ideal": "Successfully deletes the default workflow from the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "GET",
      "operationId": "getDraftDefaultWorkflow",
      "summary": "",
      "user": "Admin user checking the default workflow set in the draft scheme.",
      "ideal": "Returns the default workflow associated with the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "PUT",
      "operationId": "updateDraftDefaultWorkflow",
      "summary": "",
      "user": "Admin user updating the default workflow for the draft scheme.",
      "ideal": "Successfully updates the default workflow for the specified draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "Admin user removing the issue type 'bug' from the draft workflow scheme.",
      "ideal": "Successfully deletes the specified issue type from the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "GET",
      "operationId": "getWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "Admin user retrieving details for the 'bug' issue type in the draft workflow scheme.",
      "ideal": "Returns the details of the specified issue type in the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "PUT",
      "operationId": "setWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "Admin user setting the 'bug' issue type in the draft workflow scheme.",
      "ideal": "Successfully sets the specified issue type in the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/publish",
      "method": "POST",
      "operationId": "publishDraftWorkflowScheme",
      "summary": "",
      "user": "Admin user publishing the draft workflow scheme to make it active.",
      "ideal": "Successfully publishes the draft workflow scheme, making it the active scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "DELETE",
      "operationId": "deleteDraftWorkflowMapping",
      "summary": "",
      "user": "Admin user removing a workflow mapping from the draft scheme.",
      "ideal": "Successfully deletes the specified workflow mapping from the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "GET",
      "operationId": "getDraftWorkflow",
      "summary": "",
      "user": "Admin user retrieving the workflow mapping details from the draft scheme.",
      "ideal": "Returns the workflow mapping details associated with the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "PUT",
      "operationId": "updateDraftWorkflowMapping",
      "summary": "",
      "user": "Admin user updating the workflow mapping in the draft workflow scheme.",
      "ideal": "Successfully updates the workflow mapping for the specified draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/project",
      "method": "GET",
      "operationId": "getWorkflowSchemeProjectAssociations",
      "summary": "",
      "user": "As a project manager, I want to retrieve the workflow scheme associations for a specific project to understand how workflows are applied to my project's issues.",
      "ideal": "The API should return a list of workflow schemes associated with the specified project, including details such as the workflow scheme ID, name, and the project ID."
    },
    {
      "path": "/rest/api/3/workflowscheme/project",
      "method": "PUT",
      "operationId": "assignSchemeToProject",
      "summary": "",
      "user": "As a Jira administrator, I need to assign a specific workflow scheme to a project to ensure that the project follows the correct processes for issue management.",
      "ideal": "The API should successfully update the project to use the specified workflow scheme and return a confirmation message along with the updated project details."
    },
    {
      "path": "/rest/api/3/workflowscheme",
      "method": "GET",
      "operationId": "getAllWorkflowSchemes",
      "summary": "",
      "user": "Admin user requesting all workflow schemes to review current configurations.",
      "ideal": "Returns a list of all workflow schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/workflowscheme",
      "method": "POST",
      "operationId": "createWorkflowScheme",
      "summary": "",
      "user": "Project manager creating a new workflow scheme for a new project.",
      "ideal": "Creates a new workflow scheme with the specified details and returns the created scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/read",
      "method": "POST",
      "operationId": "readWorkflowSchemes",
      "summary": "",
      "user": "User looking to read multiple workflow schemes based on specific criteria.",
      "ideal": "Returns the workflow schemes that match the provided criteria."
    },
    {
      "path": "/rest/api/3/workflowscheme/update",
      "method": "POST",
      "operationId": "updateSchemes",
      "summary": "",
      "user": "Admin updating existing workflow schemes to improve project management.",
      "ideal": "Updates the specified workflow schemes and returns the updated schemes."
    },
    {
      "path": "/rest/api/3/workflowscheme/update/mappings",
      "method": "POST",
      "operationId": "updateWorkflowSchemeMappings",
      "summary": "",
      "user": "User updating mappings for workflow schemes to align with new project requirements.",
      "ideal": "Updates the mappings for the specified workflow schemes and returns the updated mappings."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "DELETE",
      "operationId": "deleteWorkflowScheme",
      "summary": "",
      "user": "Admin deleting an obsolete workflow scheme that is no longer in use.",
      "ideal": "Deletes the specified workflow scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "GET",
      "operationId": "getWorkflowScheme",
      "summary": "",
      "user": "User retrieving details of a specific workflow scheme for analysis.",
      "ideal": "Returns the details of the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "PUT",
      "operationId": "updateWorkflowScheme",
      "summary": "",
      "user": "Project lead updating a workflow scheme to reflect new processes.",
      "ideal": "Updates the specified workflow scheme and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "DELETE",
      "operationId": "deleteDefaultWorkflow",
      "summary": "",
      "user": "Admin removing the default workflow from a workflow scheme.",
      "ideal": "Deletes the default workflow from the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "GET",
      "operationId": "getDefaultWorkflow",
      "summary": "",
      "user": "User checking which workflow is set as default for a specific scheme.",
      "ideal": "Returns the default workflow associated with the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "PUT",
      "operationId": "updateDefaultWorkflow",
      "summary": "",
      "user": "Admin updating the default workflow for a workflow scheme to a new process.",
      "ideal": "Updates the default workflow for the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeIssueType",
      "summary": "",
      "user": "Admin removing an issue type from a workflow scheme.",
      "ideal": "Deletes the specified issue type from the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "GET",
      "operationId": "getWorkflowSchemeIssueType",
      "summary": "",
      "user": "User retrieving details of a specific issue type within a workflow scheme.",
      "ideal": "Returns details of the specified issue type in the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "PUT",
      "operationId": "setWorkflowSchemeIssueType",
      "summary": "",
      "user": "Project manager assigning a new issue type to a workflow scheme.",
      "ideal": "Sets the specified issue type for the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "DELETE",
      "operationId": "deleteWorkflowMapping",
      "summary": "",
      "user": "Admin removing a workflow mapping from a workflow scheme.",
      "ideal": "Deletes the specified workflow mapping from the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "GET",
      "operationId": "getWorkflow",
      "summary": "",
      "user": "User checking the workflow associated with a specific workflow scheme.",
      "ideal": "Returns the workflow associated with the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "PUT",
      "operationId": "updateWorkflowMapping",
      "summary": "",
      "user": "Admin updating the workflow mapping for a workflow scheme.",
      "ideal": "Updates the workflow mapping for the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{workflowSchemeId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForWorkflowScheme",
      "summary": "",
      "user": "User analyzing project usages for a specific workflow scheme.",
      "ideal": "Returns the projects that are using the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/statuscategory",
      "method": "GET",
      "operationId": "getStatusCategories",
      "summary": "",
      "user": "As a project manager, I want to retrieve all status categories in Jira to better understand the workflow states available for my projects.",
      "ideal": "The response should return a list of all status categories, including their IDs, names, and descriptions, allowing me to categorize issues effectively."
    },
    {
      "path": "/rest/api/3/statuscategory/{idOrKey}",
      "method": "GET",
      "operationId": "getStatusCategory",
      "summary": "",
      "user": "As a developer, I need to fetch details of a specific status category by its ID to ensure that I am using the correct category in my API calls.",
      "ideal": "The response should provide detailed information about the specified status category, including its ID, name, and description, so I can confirm its attributes."
    },
    {
      "path": "/rest/api/3/status",
      "method": "GET",
      "operationId": "getStatuses",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available statuses in Jira so that I can understand the workflow options for my team's tasks.",
      "ideal": "The API should return a list of all statuses with their IDs and names, allowing me to see which statuses are available for use in my projects."
    },
    {
      "path": "/rest/api/3/status/{idOrName}",
      "method": "GET",
      "operationId": "getStatus",
      "summary": "",
      "user": "As a developer, I need to fetch the details of a specific status by its ID or name to ensure I am using the correct status in my issue transitions.",
      "ideal": "The API should return the details of the specified status, including its ID, name, and any associated properties, so I can verify its attributes."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "DELETE",
      "operationId": "deleteWorkflowTransitionProperty",
      "summary": "",
      "user": "Admin user attempting to remove a property from a specific workflow transition to streamline the transition process.",
      "ideal": "Successfully deletes the property associated with transition ID 123."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "GET",
      "operationId": "getWorkflowTransitionProperties",
      "summary": "",
      "user": "Project manager reviewing the properties of a workflow transition to ensure they align with project requirements.",
      "ideal": "Returns a list of properties associated with transition ID 123."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "POST",
      "operationId": "createWorkflowTransitionProperty",
      "summary": "",
      "user": "Developer adding a new property to a workflow transition to enhance functionality and provide additional context.",
      "ideal": "Successfully creates a new property for transition ID 123."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "PUT",
      "operationId": "updateWorkflowTransitionProperty",
      "summary": "",
      "user": "Team lead updating an existing property of a workflow transition to correct an error or improve clarity.",
      "ideal": "Successfully updates the property for transition ID 123."
    },
    {
      "path": "/rest/api/3/workflow/rule/config",
      "method": "GET",
      "operationId": "getWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current workflow transition rule configurations for a specified workflow."
    },
    {
      "path": "/rest/api/3/workflow/rule/config",
      "method": "PUT",
      "operationId": "updateWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "user456",
      "ideal": "Update the workflow transition rule configurations with new settings for a specified workflow."
    },
    {
      "path": "/rest/api/3/workflow/rule/config/delete",
      "method": "PUT",
      "operationId": "deleteWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "user789",
      "ideal": "Delete the specified workflow transition rule configurations from the system."
    },
    {
      "path": "/rest/api/3/workflow",
      "method": "GET",
      "operationId": "getAllWorkflows",
      "summary": "",
      "user": "As a project manager, I want to retrieve all workflows in the Jira system to understand the current configurations and processes in place.",
      "ideal": "The response should include a list of all workflows with their details such as ID, name, and status."
    },
    {
      "path": "/rest/api/3/workflow",
      "method": "POST",
      "operationId": "createWorkflow",
      "summary": "",
      "user": "As a developer, I want to create a new workflow for a project to streamline our issue tracking process.",
      "ideal": "The response should confirm the successful creation of the workflow and return the new workflow's ID and details."
    },
    {
      "path": "/rest/api/3/workflow/search",
      "method": "GET",
      "operationId": "getWorkflowsPaginated",
      "summary": "",
      "user": "As a team lead, I want to search for workflows using pagination to efficiently find specific workflows without overwhelming the system.",
      "ideal": "The response should include a paginated list of workflows matching the search criteria, along with total count and pagination details."
    },
    {
      "path": "/rest/api/3/workflow/{entityId}",
      "method": "DELETE",
      "operationId": "deleteInactiveWorkflow",
      "summary": "",
      "user": "As an administrator, I want to delete an inactive workflow to keep the system clean and organized.",
      "ideal": "The response should confirm the deletion of the workflow and return a success message."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/project/{projectId}/issueTypeUsages",
      "method": "GET",
      "operationId": "getWorkflowProjectIssueTypeUsages",
      "summary": "",
      "user": "As a product owner, I want to see how a specific workflow is used across different issue types in a project to ensure it meets our needs.",
      "ideal": "The response should provide a list of issue types associated with the specified workflow in the project."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForWorkflow",
      "summary": "",
      "user": "As a project manager, I want to know which projects are using a specific workflow to assess its impact.",
      "ideal": "The response should list all projects that are currently utilizing the specified workflow."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/workflowSchemes",
      "method": "GET",
      "operationId": "getWorkflowSchemeUsagesForWorkflow",
      "summary": "",
      "user": "As a system administrator, I want to find out which workflow schemes are associated with a specific workflow to manage dependencies.",
      "ideal": "The response should detail all workflow schemes linked to the specified workflow."
    },
    {
      "path": "/rest/api/3/workflows",
      "method": "POST",
      "operationId": "readWorkflows",
      "summary": "",
      "user": "As a developer, I want to read multiple workflows in one request to optimize my API calls.",
      "ideal": "The response should return the details of the requested workflows in a structured format."
    },
    {
      "path": "/rest/api/3/workflows/capabilities",
      "method": "GET",
      "operationId": "workflowCapabilities",
      "summary": "",
      "user": "As a product manager, I want to understand the capabilities of workflows to better design our processes.",
      "ideal": "The response should list all the capabilities available for workflows in the Jira system."
    },
    {
      "path": "/rest/api/3/workflows/create",
      "method": "POST",
      "operationId": "createWorkflows",
      "summary": "",
      "user": "As a project manager, I want to create multiple workflows at once to save time during setup.",
      "ideal": "The response should confirm the creation of all workflows and return their IDs and details."
    },
    {
      "path": "/rest/api/3/workflows/create/validation",
      "method": "POST",
      "operationId": "validateCreateWorkflows",
      "summary": "",
      "user": "As a developer, I want to validate the creation of workflows before submission to avoid errors.",
      "ideal": "The response should indicate whether the workflow creation parameters are valid or provide error messages."
    },
    {
      "path": "/rest/api/3/workflows/defaultEditor",
      "method": "GET",
      "operationId": "getDefaultEditor",
      "summary": "",
      "user": "As a user, I want to know the default editor for workflows to ensure I have the right tools for editing.",
      "ideal": "The response should return the default editor settings for workflows."
    },
    {
      "path": "/rest/api/3/workflows/preview",
      "method": "POST",
      "operationId": "readWorkflowPreviews",
      "summary": "",
      "user": "As a designer, I want to preview workflows before finalizing them to ensure they meet our requirements.",
      "ideal": "The response should provide a visual representation of the workflow based on the provided configuration."
    },
    {
      "path": "/rest/api/3/workflows/search",
      "method": "GET",
      "operationId": "searchWorkflows",
      "summary": "",
      "user": "As a project coordinator, I want to search for specific workflows by name or criteria to quickly find what I need.",
      "ideal": "The response should return a list of workflows that match the search criteria."
    },
    {
      "path": "/rest/api/3/workflows/update",
      "method": "POST",
      "operationId": "updateWorkflows",
      "summary": "",
      "user": "As a project manager, I want to update existing workflows to reflect changes in our processes.",
      "ideal": "The response should confirm the successful update of the workflows and return their updated details."
    },
    {
      "path": "/rest/api/3/workflows/update/validation",
      "method": "POST",
      "operationId": "validateUpdateWorkflows",
      "summary": "",
      "user": "As a developer, I want to validate updates to workflows before applying them to prevent issues.",
      "ideal": "The response should indicate whether the update parameters are valid or provide error messages."
    },
    {
      "path": "/rest/api/3/user/nav4-opt-property/theme",
      "method": "GET",
      "operationId": "getUserNavProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current theme setting for the user."
    },
    {
      "path": "/rest/api/3/user/nav4-opt-property/theme",
      "method": "PUT",
      "operationId": "setUserNavProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Update the theme setting for the user to 'dark'."
    }
  ]
}