{
  "api_name": "github",
  "spec_file": "openapi.json",
  "shard_index": 3,
  "total_shards": 3,
  "instructions": "Generate non-deterministic GOLD examples for the operations listed in 'operations'. Return strict JSON with a top-level key 'gold' (array).",
  "operations": [
    {
      "operationId": "apps/get-authenticated",
      "method": "GET",
      "path": "/app",
      "tags": [
        "apps"
      ],
      "summary": "Get the authenticated app",
      "description": "Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)\" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/create-from-manifest",
      "method": "POST",
      "path": "/app-manifests/{code}/conversions",
      "tags": [
        "apps"
      ],
      "summary": "Create a GitHub App from a manifest",
      "description": "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`."
    },
    {
      "operationId": "apps/get-webhook-config-for-app",
      "method": "GET",
      "path": "/app/hook/config",
      "tags": [
        "apps"
      ],
      "summary": "Get a webhook configuration for an app",
      "description": "Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/update-webhook-config-for-app",
      "method": "PATCH",
      "path": "/app/hook/config",
      "tags": [
        "apps"
      ],
      "summary": "Update a webhook configuration for an app",
      "description": "Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/list-webhook-deliveries",
      "method": "GET",
      "path": "/app/hook/deliveries",
      "tags": [
        "apps"
      ],
      "summary": "List deliveries for an app webhook",
      "description": "Returns a list of webhook deliveries for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/get-webhook-delivery",
      "method": "GET",
      "path": "/app/hook/deliveries/{delivery_id}",
      "tags": [
        "apps"
      ],
      "summary": "Get a delivery for an app webhook",
      "description": "Returns a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/redeliver-webhook-delivery",
      "method": "POST",
      "path": "/app/hook/deliveries/{delivery_id}/attempts",
      "tags": [
        "apps"
      ],
      "summary": "Redeliver a delivery for an app webhook",
      "description": "Redeliver a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/list-installation-requests-for-authenticated-app",
      "method": "GET",
      "path": "/app/installation-requests",
      "tags": [
        "apps"
      ],
      "summary": "List installation requests for the authenticated app",
      "description": "Lists all the pending installation requests for the authenticated GitHub App."
    },
    {
      "operationId": "apps/list-installations",
      "method": "GET",
      "path": "/app/installations",
      "tags": [
        "apps"
      ],
      "summary": "List installations for the authenticated app",
      "description": "The permissions the installation has are included under the `permissions` key.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/get-installation",
      "method": "GET",
      "path": "/app/installations/{installation_id}",
      "tags": [
        "apps"
      ],
      "summary": "Get an installation for the authenticated app",
      "description": "Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/delete-installation",
      "method": "DELETE",
      "path": "/app/installations/{installation_id}",
      "tags": [
        "apps"
      ],
      "summary": "Delete an installation for the authenticated app",
      "description": "Uninstalls a GitHub App on a user, organization, or enterprise account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)\" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/create-installation-access-token",
      "method": "POST",
      "path": "/app/installations/{installation_id}/access_tokens",
      "tags": [
        "apps"
      ],
      "summary": "Create an installation access token for an app",
      "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.\n\nOptionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.\n\nOptionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/suspend-installation",
      "method": "PUT",
      "path": "/app/installations/{installation_id}/suspended",
      "tags": [
        "apps"
      ],
      "summary": "Suspend an app installation",
      "description": "Suspends a GitHub App on a user, organization, or enterprise account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/unsuspend-installation",
      "method": "DELETE",
      "path": "/app/installations/{installation_id}/suspended",
      "tags": [
        "apps"
      ],
      "summary": "Unsuspend an app installation",
      "description": "Removes a GitHub App installation suspension.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/delete-authorization",
      "method": "DELETE",
      "path": "/applications/{client_id}/grant",
      "tags": [
        "apps"
      ],
      "summary": "Delete an app authorization",
      "description": "OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\nDeleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized)."
    },
    {
      "operationId": "apps/check-token",
      "method": "POST",
      "path": "/applications/{client_id}/token",
      "tags": [
        "apps"
      ],
      "summary": "Check a token",
      "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`."
    },
    {
      "operationId": "apps/reset-token",
      "method": "PATCH",
      "path": "/applications/{client_id}/token",
      "tags": [
        "apps"
      ],
      "summary": "Reset a token",
      "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`."
    },
    {
      "operationId": "apps/delete-token",
      "method": "DELETE",
      "path": "/applications/{client_id}/token",
      "tags": [
        "apps"
      ],
      "summary": "Delete an app token",
      "description": "OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization."
    },
    {
      "operationId": "apps/scope-token",
      "method": "POST",
      "path": "/applications/{client_id}/token/scoped",
      "tags": [
        "apps"
      ],
      "summary": "Create a scoped access token",
      "description": "Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify\nwhich repositories the token can access and which permissions are granted to the\ntoken.\n\nInvalid tokens will return `404 NOT FOUND`."
    },
    {
      "operationId": "apps/get-by-slug",
      "method": "GET",
      "path": "/apps/{app_slug}",
      "tags": [
        "apps"
      ],
      "summary": "Get an app",
      "description": "> [!NOTE]\n> The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`)."
    },
    {
      "operationId": "apps/list-repos-accessible-to-installation",
      "method": "GET",
      "path": "/installation/repositories",
      "tags": [
        "apps"
      ],
      "summary": "List repositories accessible to the app installation",
      "description": "List repositories that an app installation can access."
    },
    {
      "operationId": "apps/revoke-installation-access-token",
      "method": "DELETE",
      "path": "/installation/token",
      "tags": [
        "apps"
      ],
      "summary": "Revoke an installation access token",
      "description": "Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)\" endpoint."
    },
    {
      "operationId": "apps/get-subscription-plan-for-account",
      "method": "GET",
      "path": "/marketplace_listing/accounts/{account_id}",
      "tags": [
        "apps"
      ],
      "summary": "Get a subscription plan for an account",
      "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint."
    },
    {
      "operationId": "apps/list-plans",
      "method": "GET",
      "path": "/marketplace_listing/plans",
      "tags": [
        "apps"
      ],
      "summary": "List plans",
      "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint."
    },
    {
      "operationId": "apps/list-accounts-for-plan",
      "method": "GET",
      "path": "/marketplace_listing/plans/{plan_id}/accounts",
      "tags": [
        "apps"
      ],
      "summary": "List accounts for a plan",
      "description": "Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint."
    },
    {
      "operationId": "apps/get-subscription-plan-for-account-stubbed",
      "method": "GET",
      "path": "/marketplace_listing/stubbed/accounts/{account_id}",
      "tags": [
        "apps"
      ],
      "summary": "Get a subscription plan for an account (stubbed)",
      "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint."
    },
    {
      "operationId": "apps/list-plans-stubbed",
      "method": "GET",
      "path": "/marketplace_listing/stubbed/plans",
      "tags": [
        "apps"
      ],
      "summary": "List plans (stubbed)",
      "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint."
    },
    {
      "operationId": "apps/list-accounts-for-plan-stubbed",
      "method": "GET",
      "path": "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
      "tags": [
        "apps"
      ],
      "summary": "List accounts for a plan (stubbed)",
      "description": "Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint."
    },
    {
      "operationId": "apps/get-org-installation",
      "method": "GET",
      "path": "/orgs/{org}/installation",
      "tags": [
        "apps"
      ],
      "summary": "Get an organization installation for the authenticated app",
      "description": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/get-repo-installation",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/installation",
      "tags": [
        "apps"
      ],
      "summary": "Get a repository installation for the authenticated app",
      "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "apps/list-installations-for-authenticated-user",
      "method": "GET",
      "path": "/user/installations",
      "tags": [
        "apps"
      ],
      "summary": "List app installations accessible to the user access token",
      "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key."
    },
    {
      "operationId": "apps/list-installation-repos-for-authenticated-user",
      "method": "GET",
      "path": "/user/installations/{installation_id}/repositories",
      "tags": [
        "apps"
      ],
      "summary": "List repositories accessible to the user access token",
      "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nThe access the user has to each repository is included in the hash under the `permissions` key."
    },
    {
      "operationId": "apps/add-repo-to-installation-for-authenticated-user",
      "method": "PUT",
      "path": "/user/installations/{installation_id}/repositories/{repository_id}",
      "tags": [
        "apps"
      ],
      "summary": "Add a repository to an app installation",
      "description": "Add a single repository to an installation. The authenticated user must have admin access to the repository.    \n\nThis endpoint only works for PATs (classic) with the `repo` scope."
    },
    {
      "operationId": "apps/remove-repo-from-installation-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/installations/{installation_id}/repositories/{repository_id}",
      "tags": [
        "apps"
      ],
      "summary": "Remove a repository from an app installation",
      "description": "Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. \n\nThis endpoint only works for PATs (classic) with the `repo` scope."
    },
    {
      "operationId": "apps/list-subscriptions-for-authenticated-user",
      "method": "GET",
      "path": "/user/marketplace_purchases",
      "tags": [
        "apps"
      ],
      "summary": "List subscriptions for the authenticated user",
      "description": "Lists the active subscriptions for the authenticated user."
    },
    {
      "operationId": "apps/list-subscriptions-for-authenticated-user-stubbed",
      "method": "GET",
      "path": "/user/marketplace_purchases/stubbed",
      "tags": [
        "apps"
      ],
      "summary": "List subscriptions for the authenticated user (stubbed)",
      "description": "Lists the active subscriptions for the authenticated user."
    },
    {
      "operationId": "apps/get-user-installation",
      "method": "GET",
      "path": "/users/{username}/installation",
      "tags": [
        "apps"
      ],
      "summary": "Get a user installation for the authenticated app",
      "description": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
    },
    {
      "operationId": "credentials/revoke",
      "method": "POST",
      "path": "/credentials/revoke",
      "tags": [
        "credentials"
      ],
      "summary": "Revoke a list of credentials",
      "description": "Submit a list of credentials to be revoked. This endpoint is intended to revoke credentials the caller does not own and may have found exposed on GitHub.com or elsewhere. It can also be used for credentials associated with an old user account that you no longer have access to. Credential owners will be notified of the revocation.\n\nThis endpoint currently accepts the following credential types:\n- Personal access tokens (classic)\n- Fine-grained personal access tokens\n\nRevoked credentials may impact users on GitHub Free, Pro, & Team and GitHub Enterprise Cloud, and GitHub Enterprise Cloud with Enterprise Managed Users.\nGitHub cannot reactivate any credentials that have been revoked; new credentials will need to be generated.\n\nTo prevent abuse, this API is limited to only 60 unauthenticated requests per hour and a max of 1000 tokens per API request.\n\n> [!NOTE]\n> Any authenticated requests will return a 403."
    },
    {
      "operationId": "dependabot/list-alerts-for-enterprise",
      "method": "GET",
      "path": "/enterprises/{enterprise}/dependabot/alerts",
      "tags": [
        "dependabot"
      ],
      "summary": "List Dependabot alerts for an enterprise",
      "description": "Lists Dependabot alerts for repositories that are owned by the specified enterprise.\n\nThe authenticated user must be a member of the enterprise to use this endpoint.\n\nAlerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/repository-access-for-org",
      "method": "GET",
      "path": "/organizations/{org}/dependabot/repository-access",
      "tags": [
        "dependabot"
      ],
      "summary": "Lists the repositories Dependabot can access in an organization",
      "description": "Lists repositories that organization admins have allowed Dependabot to access when updating dependencies.\n> [!NOTE]\n>    This operation supports both server-to-server and user-to-server access.\nUnauthorized users will not see the existence of this endpoint."
    },
    {
      "operationId": "dependabot/update-repository-access-for-org",
      "method": "PATCH",
      "path": "/organizations/{org}/dependabot/repository-access",
      "tags": [
        "dependabot"
      ],
      "summary": "Updates Dependabot's repository access list for an organization",
      "description": "Updates repositories according to the list of repositories that organization admins have given Dependabot access to when they've updated dependencies.\n\n> [!NOTE]\n>    This operation supports both server-to-server and user-to-server access.\nUnauthorized users will not see the existence of this endpoint.\n\n**Example request body:**\n```json\n{\n  \"repository_ids_to_add\": [123, 456],\n  \"repository_ids_to_remove\": [789]\n}\n```"
    },
    {
      "operationId": "dependabot/set-repository-access-default-level",
      "method": "PUT",
      "path": "/organizations/{org}/dependabot/repository-access/default-level",
      "tags": [
        "dependabot"
      ],
      "summary": "Set the default repository access level for Dependabot",
      "description": "Sets the default level of repository access Dependabot will have while performing an update.  Available values are:\n- 'public' - Dependabot will only have access to public repositories, unless access is explicitly granted to non-public repositories.\n- 'internal' - Dependabot will only have access to public and internal repositories, unless access is explicitly granted to private repositories.\n\nUnauthorized users will not see the existence of this endpoint.\n\nThis operation supports both server-to-server and user-to-server access."
    },
    {
      "operationId": "dependabot/list-alerts-for-org",
      "method": "GET",
      "path": "/orgs/{org}/dependabot/alerts",
      "tags": [
        "dependabot"
      ],
      "summary": "List Dependabot alerts for an organization",
      "description": "Lists Dependabot alerts for an organization.\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "dependabot/list-org-secrets",
      "method": "GET",
      "path": "/orgs/{org}/dependabot/secrets",
      "tags": [
        "dependabot"
      ],
      "summary": "List organization secrets",
      "description": "Lists all secrets available in an organization without revealing their\nencrypted values.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/get-org-public-key",
      "method": "GET",
      "path": "/orgs/{org}/dependabot/secrets/public-key",
      "tags": [
        "dependabot"
      ],
      "summary": "Get an organization public key",
      "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/get-org-secret",
      "method": "GET",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}",
      "tags": [
        "dependabot"
      ],
      "summary": "Get an organization secret",
      "description": "Gets a single organization secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/create-or-update-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}",
      "tags": [
        "dependabot"
      ],
      "summary": "Create or update an organization secret",
      "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/delete-org-secret",
      "method": "DELETE",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}",
      "tags": [
        "dependabot"
      ],
      "summary": "Delete an organization secret",
      "description": "Deletes a secret in an organization using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/list-selected-repos-for-org-secret",
      "method": "GET",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
      "tags": [
        "dependabot"
      ],
      "summary": "List selected repositories for an organization secret",
      "description": "Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/set-selected-repos-for-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
      "tags": [
        "dependabot"
      ],
      "summary": "Set selected repositories for an organization secret",
      "description": "Replaces all repositories for an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/add-selected-repo-to-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "dependabot"
      ],
      "summary": "Add selected repository to an organization secret",
      "description": "Adds a repository to an organization secret when the `visibility` for\nrepository access is set to `selected`. The visibility is set when you [Create or\nupdate an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/remove-selected-repo-from-org-secret",
      "method": "DELETE",
      "path": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "dependabot"
      ],
      "summary": "Remove selected repository from an organization secret",
      "description": "Removes a repository from an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/list-alerts-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependabot/alerts",
      "tags": [
        "dependabot"
      ],
      "summary": "List Dependabot alerts for a repository",
      "description": "OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "dependabot/get-alert",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
      "tags": [
        "dependabot"
      ],
      "summary": "Get a Dependabot alert",
      "description": "OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "dependabot/update-alert",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
      "tags": [
        "dependabot"
      ],
      "summary": "Update a Dependabot alert",
      "description": "The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see \"[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).\"\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "dependabot/list-repo-secrets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependabot/secrets",
      "tags": [
        "dependabot"
      ],
      "summary": "List repository secrets",
      "description": "Lists all secrets available in a repository without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/get-repo-public-key",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependabot/secrets/public-key",
      "tags": [
        "dependabot"
      ],
      "summary": "Get a repository public key",
      "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets. Anyone with read access\nto the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private."
    },
    {
      "operationId": "dependabot/get-repo-secret",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
      "tags": [
        "dependabot"
      ],
      "summary": "Get a repository secret",
      "description": "Gets a single repository secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/create-or-update-repo-secret",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
      "tags": [
        "dependabot"
      ],
      "summary": "Create or update a repository secret",
      "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "dependabot/delete-repo-secret",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
      "tags": [
        "dependabot"
      ],
      "summary": "Delete a repository secret",
      "description": "Deletes a secret in a repository using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "enterprise-team-memberships/list",
      "method": "GET",
      "path": "/enterprises/{enterprise}/teams/{enterprise-team}/memberships",
      "tags": [
        "enterprise-team-memberships"
      ],
      "summary": "List members in an enterprise team",
      "description": "Lists all team members in an enterprise team."
    },
    {
      "operationId": "enterprise-team-memberships/bulk-add",
      "method": "POST",
      "path": "/enterprises/{enterprise}/teams/{enterprise-team}/memberships/add",
      "tags": [
        "enterprise-team-memberships"
      ],
      "summary": "Bulk add team members",
      "description": "Add multiple team members to an enterprise team."
    },
    {
      "operationId": "enterprise-team-memberships/bulk-remove",
      "method": "POST",
      "path": "/enterprises/{enterprise}/teams/{enterprise-team}/memberships/remove",
      "tags": [
        "enterprise-team-memberships"
      ],
      "summary": "Bulk remove team members",
      "description": "Remove multiple team members from an enterprise team."
    },
    {
      "operationId": "enterprise-team-memberships/get",
      "method": "GET",
      "path": "/enterprises/{enterprise}/teams/{enterprise-team}/memberships/{username}",
      "tags": [
        "enterprise-team-memberships"
      ],
      "summary": "Get enterprise team membership",
      "description": "Returns whether the user is a member of the enterprise team."
    },
    {
      "operationId": "enterprise-team-memberships/add",
      "method": "PUT",
      "path": "/enterprises/{enterprise}/teams/{enterprise-team}/memberships/{username}",
      "tags": [
        "enterprise-team-memberships"
      ],
      "summary": "Add team member",
      "description": "Add a team member to an enterprise team."
    },
    {
      "operationId": "enterprise-team-memberships/remove",
      "method": "DELETE",
      "path": "/enterprises/{enterprise}/teams/{enterprise-team}/memberships/{username}",
      "tags": [
        "enterprise-team-memberships"
      ],
      "summary": "Remove team membership",
      "description": "Remove membership of a specific user from a particular team in an enterprise."
    },
    {
      "operationId": "gitignore/get-all-templates",
      "method": "GET",
      "path": "/gitignore/templates",
      "tags": [
        "gitignore"
      ],
      "summary": "Get all gitignore templates",
      "description": "List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user)."
    },
    {
      "operationId": "gitignore/get-template",
      "method": "GET",
      "path": "/gitignore/templates/{name}",
      "tags": [
        "gitignore"
      ],
      "summary": "Get a gitignore template",
      "description": "Get the content of a gitignore template.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents."
    },
    {
      "operationId": "markdown/render",
      "method": "POST",
      "path": "/markdown",
      "tags": [
        "markdown"
      ],
      "summary": "Render a Markdown document",
      "description": "Depending on what is rendered in the Markdown, you may need to provide additional token scopes for labels, such as `issues:read` or `pull_requests:read`."
    },
    {
      "operationId": "markdown/render-raw",
      "method": "POST",
      "path": "/markdown/raw",
      "tags": [
        "markdown"
      ],
      "summary": "Render a Markdown document in raw mode",
      "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less."
    },
    {
      "operationId": "actions/get-actions-cache-usage-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/cache/usage",
      "tags": [
        "actions"
      ],
      "summary": "Get GitHub Actions cache usage for an organization",
      "description": "Gets the total GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nOAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-actions-cache-usage-by-repo-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/cache/usage-by-repository",
      "tags": [
        "actions"
      ],
      "summary": "List repositories with GitHub Actions cache usage for an organization",
      "description": "Lists repositories and their GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nOAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-hosted-runners-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners",
      "tags": [
        "actions"
      ],
      "summary": "List GitHub-hosted runners for an organization",
      "description": "Lists all GitHub-hosted runners configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-hosted-runner-for-org",
      "method": "POST",
      "path": "/orgs/{org}/actions/hosted-runners",
      "tags": [
        "actions"
      ],
      "summary": "Create a GitHub-hosted runner for an organization",
      "description": "Creates a GitHub-hosted runner for an organization.\nOAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-hosted-runners-github-owned-images-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners/images/github-owned",
      "tags": [
        "actions"
      ],
      "summary": "Get GitHub-owned images for GitHub-hosted runners in an organization",
      "description": "Get the list of GitHub-owned images available for GitHub-hosted runners for an organization."
    },
    {
      "operationId": "actions/get-hosted-runners-partner-images-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners/images/partner",
      "tags": [
        "actions"
      ],
      "summary": "Get partner images for GitHub-hosted runners in an organization",
      "description": "Get the list of partner images available for GitHub-hosted runners for an organization."
    },
    {
      "operationId": "actions/get-hosted-runners-limits-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners/limits",
      "tags": [
        "actions"
      ],
      "summary": "Get limits on GitHub-hosted runners for an organization",
      "description": "Get the GitHub-hosted runners limits for an organization."
    },
    {
      "operationId": "actions/get-hosted-runners-machine-specs-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners/machine-sizes",
      "tags": [
        "actions"
      ],
      "summary": "Get GitHub-hosted runners machine specs for an organization",
      "description": "Get the list of machine specs available for GitHub-hosted runners for an organization."
    },
    {
      "operationId": "actions/get-hosted-runners-platforms-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners/platforms",
      "tags": [
        "actions"
      ],
      "summary": "Get platforms for GitHub-hosted runners in an organization",
      "description": "Get the list of platforms available for GitHub-hosted runners for an organization."
    },
    {
      "operationId": "actions/get-hosted-runner-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a GitHub-hosted runner for an organization",
      "description": "Gets a GitHub-hosted runner configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/update-hosted-runner-for-org",
      "method": "PATCH",
      "path": "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Update a GitHub-hosted runner for an organization",
      "description": "Updates a GitHub-hosted runner for an organization.\nOAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-hosted-runner-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a GitHub-hosted runner for an organization",
      "description": "Deletes a GitHub-hosted runner for an organization."
    },
    {
      "operationId": "actions/get-github-actions-permissions-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions",
      "tags": [
        "actions"
      ],
      "summary": "Get GitHub Actions permissions for an organization",
      "description": "Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-github-actions-permissions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions",
      "tags": [
        "actions"
      ],
      "summary": "Set GitHub Actions permissions for an organization",
      "description": "Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-artifact-and-log-retention-settings-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/artifact-and-log-retention",
      "tags": [
        "actions"
      ],
      "summary": "Get artifact and log retention settings for an organization",
      "description": "Gets artifact and log retention settings for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/set-artifact-and-log-retention-settings-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/artifact-and-log-retention",
      "tags": [
        "actions"
      ],
      "summary": "Set artifact and log retention settings for an organization",
      "description": "Sets artifact and log retention settings for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/get-fork-pr-contributor-approval-permissions-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/fork-pr-contributor-approval",
      "tags": [
        "actions"
      ],
      "summary": "Get fork PR contributor approval permissions for an organization",
      "description": "Gets the fork PR contributor approval policy for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/set-fork-pr-contributor-approval-permissions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/fork-pr-contributor-approval",
      "tags": [
        "actions"
      ],
      "summary": "Set fork PR contributor approval permissions for an organization",
      "description": "Sets the fork PR contributor approval policy for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-private-repo-fork-pr-workflows-settings-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos",
      "tags": [
        "actions"
      ],
      "summary": "Get private repo fork PR workflow settings for an organization",
      "description": "Gets the settings for whether workflows from fork pull requests can run on private repositories in an organization."
    },
    {
      "operationId": "actions/set-private-repo-fork-pr-workflows-settings-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos",
      "tags": [
        "actions"
      ],
      "summary": "Set private repo fork PR workflow settings for an organization",
      "description": "Sets the settings for whether workflows from fork pull requests can run on private repositories in an organization."
    },
    {
      "operationId": "actions/list-selected-repositories-enabled-github-actions-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/repositories",
      "tags": [
        "actions"
      ],
      "summary": "List selected repositories enabled for GitHub Actions in an organization",
      "description": "Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-selected-repositories-enabled-github-actions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/repositories",
      "tags": [
        "actions"
      ],
      "summary": "Set selected repositories enabled for GitHub Actions in an organization",
      "description": "Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/enable-selected-repository-github-actions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Enable a selected repository for GitHub Actions in an organization",
      "description": "Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/disable-selected-repository-github-actions-organization",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/permissions/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Disable a selected repository for GitHub Actions in an organization",
      "description": "Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-allowed-actions-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/selected-actions",
      "tags": [
        "actions"
      ],
      "summary": "Get allowed actions and reusable workflows for an organization",
      "description": "Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-allowed-actions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/selected-actions",
      "tags": [
        "actions"
      ],
      "summary": "Set allowed actions and reusable workflows for an organization",
      "description": "Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-self-hosted-runners-permissions-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/self-hosted-runners",
      "tags": [
        "actions"
      ],
      "summary": "Get self-hosted runners settings for an organization",
      "description": "Gets the settings for self-hosted runners for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/set-self-hosted-runners-permissions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/self-hosted-runners",
      "tags": [
        "actions"
      ],
      "summary": "Set self-hosted runners settings for an organization",
      "description": "Sets the settings for self-hosted runners for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/list-selected-repositories-self-hosted-runners-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/self-hosted-runners/repositories",
      "tags": [
        "actions"
      ],
      "summary": "List repositories allowed to use self-hosted runners in an organization",
      "description": "Lists repositories that are allowed to use self-hosted runners in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/set-selected-repositories-self-hosted-runners-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/self-hosted-runners/repositories",
      "tags": [
        "actions"
      ],
      "summary": "Set repositories allowed to use self-hosted runners in an organization",
      "description": "Sets repositories that are allowed to use self-hosted runners in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/enable-selected-repository-self-hosted-runners-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Add a repository to the list of repositories allowed to use self-hosted runners in an organization",
      "description": "Adds a repository to the list of repositories that are allowed to use self-hosted runners in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/disable-selected-repository-self-hosted-runners-organization",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Remove a repository from the list of repositories allowed to use self-hosted runners in an organization",
      "description": "Removes a repository from the list of repositories that are allowed to use self-hosted runners in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the \"Actions policies\" fine-grained permission to use this endpoint."
    },
    {
      "operationId": "actions/get-github-actions-default-workflow-permissions-organization",
      "method": "GET",
      "path": "/orgs/{org}/actions/permissions/workflow",
      "tags": [
        "actions"
      ],
      "summary": "Get default workflow permissions for an organization",
      "description": "Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,\nas well as whether GitHub Actions can submit approving pull request reviews. For more information, see\n\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-github-actions-default-workflow-permissions-organization",
      "method": "PUT",
      "path": "/orgs/{org}/actions/permissions/workflow",
      "tags": [
        "actions"
      ],
      "summary": "Set default workflow permissions for an organization",
      "description": "Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions\ncan submit approving pull request reviews. For more information, see\n\"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-self-hosted-runner-groups-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runner-groups",
      "tags": [
        "actions"
      ],
      "summary": "List self-hosted runner groups for an organization",
      "description": "Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-self-hosted-runner-group-for-org",
      "method": "POST",
      "path": "/orgs/{org}/actions/runner-groups",
      "tags": [
        "actions"
      ],
      "summary": "Create a self-hosted runner group for an organization",
      "description": "Creates a new self-hosted runner group for an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-self-hosted-runner-group-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a self-hosted runner group for an organization",
      "description": "Gets a specific self-hosted runner group for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/update-self-hosted-runner-group-for-org",
      "method": "PATCH",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
      "tags": [
        "actions"
      ],
      "summary": "Update a self-hosted runner group for an organization",
      "description": "Updates the `name` and `visibility` of a self-hosted runner group in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-self-hosted-runner-group-from-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a self-hosted runner group from an organization",
      "description": "Deletes a self-hosted runner group for an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-github-hosted-runners-in-group-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners",
      "tags": [
        "actions"
      ],
      "summary": "List GitHub-hosted runners in a group for an organization",
      "description": "Lists the GitHub-hosted runners in an organization group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-repo-access-to-self-hosted-runner-group-in-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
      "tags": [
        "actions"
      ],
      "summary": "List repository access to a self-hosted runner group in an organization",
      "description": "Lists the repositories with access to a self-hosted runner group configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-repo-access-to-self-hosted-runner-group-in-org",
      "method": "PUT",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
      "tags": [
        "actions"
      ],
      "summary": "Set repository access for a self-hosted runner group in an organization",
      "description": "Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/add-repo-access-to-self-hosted-runner-group-in-org",
      "method": "PUT",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Add repository access to a self-hosted runner group in an organization",
      "description": "Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/remove-repo-access-to-self-hosted-runner-group-in-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Remove repository access to a self-hosted runner group in an organization",
      "description": "Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-self-hosted-runners-in-group-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
      "tags": [
        "actions"
      ],
      "summary": "List self-hosted runners in a group for an organization",
      "description": "Lists self-hosted runners that are in a specific organization group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-self-hosted-runners-in-group-for-org",
      "method": "PUT",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
      "tags": [
        "actions"
      ],
      "summary": "Set self-hosted runners in a group for an organization",
      "description": "Replaces the list of self-hosted runners that are part of an organization runner group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/add-self-hosted-runner-to-group-for-org",
      "method": "PUT",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Add a self-hosted runner to a group for an organization",
      "description": "Adds a self-hosted runner to a runner group configured in an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/remove-self-hosted-runner-from-group-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Remove a self-hosted runner from a group for an organization",
      "description": "Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-self-hosted-runners-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runners",
      "tags": [
        "actions"
      ],
      "summary": "List self-hosted runners for an organization",
      "description": "Lists all self-hosted runners configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/list-runner-applications-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runners/downloads",
      "tags": [
        "actions"
      ],
      "summary": "List runner applications for an organization",
      "description": "Lists binaries for the runner application that you can download and run.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/generate-runner-jitconfig-for-org",
      "method": "POST",
      "path": "/orgs/{org}/actions/runners/generate-jitconfig",
      "tags": [
        "actions"
      ],
      "summary": "Create configuration for a just-in-time runner for an organization",
      "description": "Generates a configuration that can be passed to the runner application at startup.\n\nThe authenticated user must have admin access to the organization.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-registration-token-for-org",
      "method": "POST",
      "path": "/orgs/{org}/actions/runners/registration-token",
      "tags": [
        "actions"
      ],
      "summary": "Create a registration token for an organization",
      "description": "Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-remove-token-for-org",
      "method": "POST",
      "path": "/orgs/{org}/actions/runners/remove-token",
      "tags": [
        "actions"
      ],
      "summary": "Create a remove token for an organization",
      "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:\n\n```\n./config.sh remove --token TOKEN\n```\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-self-hosted-runner-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runners/{runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a self-hosted runner for an organization",
      "description": "Gets a specific self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/delete-self-hosted-runner-from-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/runners/{runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a self-hosted runner from an organization",
      "description": "Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-labels-for-self-hosted-runner-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "List labels for a self-hosted runner for an organization",
      "description": "Lists all labels for a self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/add-custom-labels-to-self-hosted-runner-for-org",
      "method": "POST",
      "path": "/orgs/{org}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "Add custom labels to a self-hosted runner for an organization",
      "description": "Adds custom labels to a self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-custom-labels-for-self-hosted-runner-for-org",
      "method": "PUT",
      "path": "/orgs/{org}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "Set custom labels for a self-hosted runner for an organization",
      "description": "Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/remove-all-custom-labels-from-self-hosted-runner-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "Remove all custom labels from a self-hosted runner for an organization",
      "description": "Remove all custom labels from a self-hosted runner configured in an\norganization. Returns the remaining read-only labels from the runner.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/remove-custom-label-from-self-hosted-runner-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/runners/{runner_id}/labels/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Remove a custom label from a self-hosted runner for an organization",
      "description": "Remove a custom label from a self-hosted runner configured\nin an organization. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/list-org-secrets",
      "method": "GET",
      "path": "/orgs/{org}/actions/secrets",
      "tags": [
        "actions"
      ],
      "summary": "List organization secrets",
      "description": "Lists all secrets available in an organization without revealing their\nencrypted values.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/get-org-public-key",
      "method": "GET",
      "path": "/orgs/{org}/actions/secrets/public-key",
      "tags": [
        "actions"
      ],
      "summary": "Get an organization public key",
      "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-org-secret",
      "method": "GET",
      "path": "/orgs/{org}/actions/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Get an organization secret",
      "description": "Gets a single organization secret without revealing its encrypted value.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read secrets\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-or-update-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/actions/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Create or update an organization secret",
      "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-org-secret",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Delete an organization secret",
      "description": "Deletes a secret in an organization using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-selected-repos-for-org-secret",
      "method": "GET",
      "path": "/orgs/{org}/actions/secrets/{secret_name}/repositories",
      "tags": [
        "actions"
      ],
      "summary": "List selected repositories for an organization secret",
      "description": "Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/set-selected-repos-for-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/actions/secrets/{secret_name}/repositories",
      "tags": [
        "actions"
      ],
      "summary": "Set selected repositories for an organization secret",
      "description": "Replaces all repositories for an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/add-selected-repo-to-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Add selected repository to an organization secret",
      "description": "Adds a repository to an organization secret when the `visibility` for\nrepository access is set to `selected`. For more information about setting the visibility, see [Create or\nupdate an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/remove-selected-repo-from-org-secret",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Remove selected repository from an organization secret",
      "description": "Removes a repository from an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/list-org-variables",
      "method": "GET",
      "path": "/orgs/{org}/actions/variables",
      "tags": [
        "actions"
      ],
      "summary": "List organization variables",
      "description": "Lists all organization variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/create-org-variable",
      "method": "POST",
      "path": "/orgs/{org}/actions/variables",
      "tags": [
        "actions"
      ],
      "summary": "Create an organization variable",
      "description": "Creates an organization variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-org-variable",
      "method": "GET",
      "path": "/orgs/{org}/actions/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Get an organization variable",
      "description": "Gets a specific variable in an organization.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/update-org-variable",
      "method": "PATCH",
      "path": "/orgs/{org}/actions/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Update an organization variable",
      "description": "Updates an organization variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/delete-org-variable",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Delete an organization variable",
      "description": "Deletes an organization variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-selected-repos-for-org-variable",
      "method": "GET",
      "path": "/orgs/{org}/actions/variables/{name}/repositories",
      "tags": [
        "actions"
      ],
      "summary": "List selected repositories for an organization variable",
      "description": "Lists all repositories that can access an organization variable\nthat is available to selected repositories.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/set-selected-repos-for-org-variable",
      "method": "PUT",
      "path": "/orgs/{org}/actions/variables/{name}/repositories",
      "tags": [
        "actions"
      ],
      "summary": "Set selected repositories for an organization variable",
      "description": "Replaces all repositories for an organization variable that is available\nto selected repositories. Organization variables that are available to selected\nrepositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/add-selected-repo-to-org-variable",
      "method": "PUT",
      "path": "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Add selected repository to an organization variable",
      "description": "Adds a repository to an organization variable that is available to selected repositories.\nOrganization variables that are available to selected repositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/remove-selected-repo-from-org-variable",
      "method": "DELETE",
      "path": "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
      "tags": [
        "actions"
      ],
      "summary": "Remove selected repository from an organization variable",
      "description": "Removes a repository from an organization variable that is\navailable to selected repositories. Organization variables that are available to\nselected repositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required."
    },
    {
      "operationId": "actions/list-artifacts-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/artifacts",
      "tags": [
        "actions"
      ],
      "summary": "List artifacts for a repository",
      "description": "Lists all artifacts for a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/get-artifact",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get an artifact",
      "description": "Gets a specific artifact for a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-artifact",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete an artifact",
      "description": "Deletes an artifact for a workflow run.\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/download-artifact",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
      "tags": [
        "actions"
      ],
      "summary": "Download an artifact",
      "description": "Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-actions-cache-usage",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/cache/usage",
      "tags": [
        "actions"
      ],
      "summary": "Get GitHub Actions cache usage for a repository",
      "description": "Gets GitHub Actions cache usage for a repository.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-actions-cache-list",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/caches",
      "tags": [
        "actions"
      ],
      "summary": "List GitHub Actions caches for a repository",
      "description": "Lists the GitHub Actions caches for a repository.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-actions-cache-by-key",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/caches",
      "tags": [
        "actions"
      ],
      "summary": "Delete GitHub Actions caches for a repository (using a cache key)",
      "description": "Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-actions-cache-by-id",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/caches/{cache_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a GitHub Actions cache for a repository (using a cache ID)",
      "description": "Deletes a GitHub Actions cache for a repository, using a cache ID.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-job-for-workflow-run",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/jobs/{job_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a job for a workflow run",
      "description": "Gets a specific job in a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/download-job-logs-for-workflow-run",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
      "tags": [
        "actions"
      ],
      "summary": "Download job logs for a workflow run",
      "description": "Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/re-run-job-for-workflow-run",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun",
      "tags": [
        "actions"
      ],
      "summary": "Re-run a job from a workflow run",
      "description": "Re-run a job and its dependent jobs in a workflow run.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-custom-oidc-sub-claim-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/oidc/customization/sub",
      "tags": [
        "actions"
      ],
      "summary": "Get the customization template for an OIDC subject claim for a repository",
      "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-custom-oidc-sub-claim-for-repo",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/oidc/customization/sub",
      "tags": [
        "actions"
      ],
      "summary": "Set the customization template for an OIDC subject claim for a repository",
      "description": "Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-repo-organization-secrets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/organization-secrets",
      "tags": [
        "actions"
      ],
      "summary": "List repository organization secrets",
      "description": "Lists all organization secrets shared with a repository without revealing their encrypted\nvalues.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-repo-organization-variables",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/organization-variables",
      "tags": [
        "actions"
      ],
      "summary": "List repository organization variables",
      "description": "Lists all organization variables shared with a repository.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-github-actions-permissions-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions",
      "tags": [
        "actions"
      ],
      "summary": "Get GitHub Actions permissions for a repository",
      "description": "Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-github-actions-permissions-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions",
      "tags": [
        "actions"
      ],
      "summary": "Set GitHub Actions permissions for a repository",
      "description": "Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-workflow-access-to-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions/access",
      "tags": [
        "actions"
      ],
      "summary": "Get the level of access for workflows outside of the repository",
      "description": "Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-workflow-access-to-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions/access",
      "tags": [
        "actions"
      ],
      "summary": "Set the level of access for workflows outside of the repository",
      "description": "Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-artifact-and-log-retention-settings-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention",
      "tags": [
        "actions"
      ],
      "summary": "Get artifact and log retention settings for a repository",
      "description": "Gets artifact and log retention settings for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-artifact-and-log-retention-settings-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention",
      "tags": [
        "actions"
      ],
      "summary": "Set artifact and log retention settings for a repository",
      "description": "Sets artifact and log retention settings for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-fork-pr-contributor-approval-permissions-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval",
      "tags": [
        "actions"
      ],
      "summary": "Get fork PR contributor approval permissions for a repository",
      "description": "Gets the fork PR contributor approval policy for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-fork-pr-contributor-approval-permissions-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval",
      "tags": [
        "actions"
      ],
      "summary": "Set fork PR contributor approval permissions for a repository",
      "description": "Sets the fork PR contributor approval policy for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-private-repo-fork-pr-workflows-settings-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos",
      "tags": [
        "actions"
      ],
      "summary": "Get private repo fork PR workflow settings for a repository",
      "description": "Gets the settings for whether workflows from fork pull requests can run on a private repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-private-repo-fork-pr-workflows-settings-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos",
      "tags": [
        "actions"
      ],
      "summary": "Set private repo fork PR workflow settings for a repository",
      "description": "Sets the settings for whether workflows from fork pull requests can run on a private repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-allowed-actions-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions/selected-actions",
      "tags": [
        "actions"
      ],
      "summary": "Get allowed actions and reusable workflows for a repository",
      "description": "Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-allowed-actions-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions/selected-actions",
      "tags": [
        "actions"
      ],
      "summary": "Set allowed actions and reusable workflows for a repository",
      "description": "Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-github-actions-default-workflow-permissions-repository",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/permissions/workflow",
      "tags": [
        "actions"
      ],
      "summary": "Get default workflow permissions for a repository",
      "description": "Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,\nas well as if GitHub Actions can submit approving pull request reviews.\nFor more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-github-actions-default-workflow-permissions-repository",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/permissions/workflow",
      "tags": [
        "actions"
      ],
      "summary": "Set default workflow permissions for a repository",
      "description": "Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions\ncan submit approving pull request reviews.\nFor more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-self-hosted-runners-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runners",
      "tags": [
        "actions"
      ],
      "summary": "List self-hosted runners for a repository",
      "description": "Lists all self-hosted runners configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-runner-applications-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runners/downloads",
      "tags": [
        "actions"
      ],
      "summary": "List runner applications for a repository",
      "description": "Lists binaries for the runner application that you can download and run.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/generate-runner-jitconfig-for-repo",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runners/generate-jitconfig",
      "tags": [
        "actions"
      ],
      "summary": "Create configuration for a just-in-time runner for a repository",
      "description": "Generates a configuration that can be passed to the runner application at startup.\n\nThe authenticated user must have admin access to the repository.\n\nOAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-registration-token-for-repo",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runners/registration-token",
      "tags": [
        "actions"
      ],
      "summary": "Create a registration token for a repository",
      "description": "Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-remove-token-for-repo",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runners/remove-token",
      "tags": [
        "actions"
      ],
      "summary": "Create a remove token for a repository",
      "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:\n\n```\n./config.sh remove --token TOKEN\n```\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-self-hosted-runner-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a self-hosted runner for a repository",
      "description": "Gets a specific self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-self-hosted-runner-from-repo",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a self-hosted runner from a repository",
      "description": "Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-labels-for-self-hosted-runner-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "List labels for a self-hosted runner for a repository",
      "description": "Lists all labels for a self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/add-custom-labels-to-self-hosted-runner-for-repo",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "Add custom labels to a self-hosted runner for a repository",
      "description": "Adds custom labels to a self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/set-custom-labels-for-self-hosted-runner-for-repo",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "Set custom labels for a self-hosted runner for a repository",
      "description": "Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/remove-all-custom-labels-from-self-hosted-runner-for-repo",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
      "tags": [
        "actions"
      ],
      "summary": "Remove all custom labels from a self-hosted runner for a repository",
      "description": "Remove all custom labels from a self-hosted runner configured in a\nrepository. Returns the remaining read-only labels from the runner.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/remove-custom-label-from-self-hosted-runner-for-repo",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Remove a custom label from a self-hosted runner for a repository",
      "description": "Remove a custom label from a self-hosted runner configured\nin a repository. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-workflow-runs-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs",
      "tags": [
        "actions"
      ],
      "summary": "List workflow runs for a repository",
      "description": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.\n\nThis endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`."
    },
    {
      "operationId": "actions/get-workflow-run",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a workflow run",
      "description": "Gets a specific workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/delete-workflow-run",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a workflow run",
      "description": "Deletes a specific workflow run.\n\nAnyone with write access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-reviews-for-run",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
      "tags": [
        "actions"
      ],
      "summary": "Get the review history for a workflow run",
      "description": "Anyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/approve-workflow-run",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/approve",
      "tags": [
        "actions"
      ],
      "summary": "Approve a workflow run for a fork pull request",
      "description": "Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-workflow-run-artifacts",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
      "tags": [
        "actions"
      ],
      "summary": "List workflow run artifacts",
      "description": "Lists artifacts for a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/get-workflow-run-attempt",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}",
      "tags": [
        "actions"
      ],
      "summary": "Get a workflow run attempt",
      "description": "Gets a specific workflow run attempt.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/list-jobs-for-workflow-run-attempt",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
      "tags": [
        "actions"
      ],
      "summary": "List jobs for a workflow run attempt",
      "description": "Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information\nabout using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository."
    },
    {
      "operationId": "actions/download-workflow-run-attempt-logs",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs",
      "tags": [
        "actions"
      ],
      "summary": "Download workflow run attempt logs",
      "description": "Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after\n1 minute. Look for `Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/cancel-workflow-run",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
      "tags": [
        "actions"
      ],
      "summary": "Cancel a workflow run",
      "description": "Cancels a workflow run using its `id`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/review-custom-gates-for-run",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule",
      "tags": [
        "actions"
      ],
      "summary": "Review custom deployment protection rules for a workflow run",
      "description": "Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\n> [!NOTE]\n> GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/force-cancel-workflow-run",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel",
      "tags": [
        "actions"
      ],
      "summary": "Force cancel a workflow run",
      "description": "Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.\nYou should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-jobs-for-workflow-run",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
      "tags": [
        "actions"
      ],
      "summary": "List jobs for a workflow run",
      "description": "Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information\nabout using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/download-workflow-run-logs",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
      "tags": [
        "actions"
      ],
      "summary": "Download workflow run logs",
      "description": "Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-workflow-run-logs",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
      "tags": [
        "actions"
      ],
      "summary": "Delete workflow run logs",
      "description": "Deletes all logs for a workflow run.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-pending-deployments-for-run",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
      "tags": [
        "actions"
      ],
      "summary": "Get pending deployments for a workflow run",
      "description": "Get all deployment environments for a workflow run that are waiting for protection rules to pass.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/review-pending-deployments-for-run",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
      "tags": [
        "actions"
      ],
      "summary": "Review pending deployments for a workflow run",
      "description": "Approve or reject pending deployments that are waiting on approval by a required reviewer.\n\nRequired reviewers with read access to the repository contents and deployments can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/re-run-workflow",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
      "tags": [
        "actions"
      ],
      "summary": "Re-run a workflow",
      "description": "Re-runs your workflow run using its `id`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/re-run-workflow-failed-jobs",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs",
      "tags": [
        "actions"
      ],
      "summary": "Re-run failed jobs from a workflow run",
      "description": "Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-workflow-run-usage",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
      "tags": [
        "actions"
      ],
      "summary": "Get workflow run usage",
      "description": "> [!WARNING]  \n> This endpoint is in the process of closing down. Refer to \"[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)\" for more information.\n\nGets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/list-repo-secrets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/secrets",
      "tags": [
        "actions"
      ],
      "summary": "List repository secrets",
      "description": "Lists all secrets available in a repository without revealing their encrypted\nvalues.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-repo-public-key",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/secrets/public-key",
      "tags": [
        "actions"
      ],
      "summary": "Get a repository public key",
      "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-repo-secret",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Get a repository secret",
      "description": "Gets a single repository secret without revealing its encrypted value.\n\nThe authenticated user must have collaborator access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-or-update-repo-secret",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Create or update a repository secret",
      "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-repo-secret",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a repository secret",
      "description": "Deletes a secret in a repository using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-repo-variables",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/variables",
      "tags": [
        "actions"
      ],
      "summary": "List repository variables",
      "description": "Lists all repository variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-repo-variable",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/variables",
      "tags": [
        "actions"
      ],
      "summary": "Create a repository variable",
      "description": "Creates a repository variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-repo-variable",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Get a repository variable",
      "description": "Gets a specific variable in a repository.\n\nThe authenticated user must have collaborator access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/update-repo-variable",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/actions/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Update a repository variable",
      "description": "Updates a repository variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-repo-variable",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/actions/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Delete a repository variable",
      "description": "Deletes a repository variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-repo-workflows",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/workflows",
      "tags": [
        "actions"
      ],
      "summary": "List repository workflows",
      "description": "Lists the workflows in a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/get-workflow",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
      "tags": [
        "actions"
      ],
      "summary": "Get a workflow",
      "description": "Gets a specific workflow. You can replace `workflow_id` with the workflow\nfile name. For example, you could use `main.yaml`.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/disable-workflow",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
      "tags": [
        "actions"
      ],
      "summary": "Disable a workflow",
      "description": "Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-workflow-dispatch",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
      "tags": [
        "actions"
      ],
      "summary": "Create a workflow dispatch event",
      "description": "You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/enable-workflow",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
      "tags": [
        "actions"
      ],
      "summary": "Enable a workflow",
      "description": "Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-workflow-runs",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
      "tags": [
        "actions"
      ],
      "summary": "List workflow runs for a workflow",
      "description": "List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.\n\nThis endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`."
    },
    {
      "operationId": "actions/get-workflow-usage",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
      "tags": [
        "actions"
      ],
      "summary": "Get workflow usage",
      "description": "> [!WARNING]  \n> This endpoint is in the process of closing down. Refer to \"[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)\" for more information.\n\nGets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nYou can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "actions/list-environment-secrets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/secrets",
      "tags": [
        "actions"
      ],
      "summary": "List environment secrets",
      "description": "Lists all secrets available in an environment without revealing their\nencrypted values.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-environment-public-key",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key",
      "tags": [
        "actions"
      ],
      "summary": "Get an environment public key",
      "description": "Get the public key for an environment, which you need to encrypt environment\nsecrets. You need to encrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-environment-secret",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Get an environment secret",
      "description": "Gets a single environment secret without revealing its encrypted value.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-or-update-environment-secret",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Create or update an environment secret",
      "description": "Creates or updates an environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-environment-secret",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
      "tags": [
        "actions"
      ],
      "summary": "Delete an environment secret",
      "description": "Deletes a secret in an environment using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/list-environment-variables",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/variables",
      "tags": [
        "actions"
      ],
      "summary": "List environment variables",
      "description": "Lists all environment variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/create-environment-variable",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/variables",
      "tags": [
        "actions"
      ],
      "summary": "Create an environment variable",
      "description": "Create an environment variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/get-environment-variable",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Get an environment variable",
      "description": "Gets a specific variable in an environment.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/update-environment-variable",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Update an environment variable",
      "description": "Updates an environment variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "actions/delete-environment-variable",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
      "tags": [
        "actions"
      ],
      "summary": "Delete an environment variable",
      "description": "Deletes an environment variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "code-scanning/list-alerts-for-org",
      "method": "GET",
      "path": "/orgs/{org}/code-scanning/alerts",
      "tags": [
        "code-scanning"
      ],
      "summary": "List code scanning alerts for an organization",
      "description": "Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/list-alerts-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts",
      "tags": [
        "code-scanning"
      ],
      "summary": "List code scanning alerts for a repository",
      "description": "Lists code scanning alerts.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/get-alert",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get a code scanning alert",
      "description": "Gets a single code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/update-alert",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Update a code scanning alert",
      "description": "Updates the status of a single code scanning alert.\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/get-autofix",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get the status of an autofix for a code scanning alert",
      "description": "Gets the status and description of an autofix for a code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/create-autofix",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix",
      "tags": [
        "code-scanning"
      ],
      "summary": "Create an autofix for a code scanning alert",
      "description": "Creates an autofix for a code scanning alert.\n\nIf a new autofix is to be created as a result of this request or is currently being generated, then this endpoint will return a 202 Accepted response.\n\nIf an autofix already exists for a given alert, then this endpoint will return a 200 OK response.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/commit-autofix",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits",
      "tags": [
        "code-scanning"
      ],
      "summary": "Commit an autofix for a code scanning alert",
      "description": "Commits an autofix for a code scanning alert.\n\nIf an autofix is committed as a result of this request, then this endpoint will return a 201 Created response.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/list-alert-instances",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      "tags": [
        "code-scanning"
      ],
      "summary": "List instances of a code scanning alert",
      "description": "Lists all instances of the specified code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/list-recent-analyses",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/analyses",
      "tags": [
        "code-scanning"
      ],
      "summary": "List code scanning analyses for a repository",
      "description": "Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the `page` and `per_page` parameters\nto list the analyses you're interested in.\nBy default 30 analyses are listed per page.\n\nThe `rules_count` field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\n> [!WARNING]\n> **Closing down notice:** The `tool_name` field is closing down and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/get-analysis",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get a code scanning analysis for a repository",
      "description": "Gets a specified code scanning analysis for a repository.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/delete-analysis",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Delete a code scanning analysis from a repository",
      "description": "Deletes a specified code scanning analysis from a repository.\n\nYou can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.\n\nWhen you list the analyses for a repository,\none or more will be identified as deletable in the response:\n\n```\n\"deletable\": true\n```\n\nAn analysis is deletable when it's the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:\n\n* `ref`\n* `tool`\n* `category`\n\nIf you attempt to delete an analysis that is not the most recent in a set,\nyou'll get a 400 response with the message:\n\n```\nAnalysis specified is not deletable.\n```\n\nThe response from a successful `DELETE` operation provides you with\ntwo alternative URLs for deleting the next analysis in the set:\n`next_analysis_url` and `confirm_delete_url`.\nUse the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis\nin a set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the `confirm_delete_url` URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`\nin the 200 response is `null`.\n\nAs an example of the deletion process,\nlet's imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou've now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find an analysis that's identified as deletable.\nEach set of analyses always has one that's identified as deletable.\nHaving found the deletable analysis for one of the two sets,\ndelete this analysis and then continue deleting the next analysis in the set until they're all deleted.\nThen repeat the process for the second set.\nThe procedure therefore consists of a nested loop:\n\n**Outer loop**:\n* List the analyses for the repository, filtered by tool.\n* Parse this list to find a deletable analysis. If found:\n\n  **Inner loop**:\n  * Delete the identified analysis.\n  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.\n\nThe above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/list-codeql-databases",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/codeql/databases",
      "tags": [
        "code-scanning"
      ],
      "summary": "List CodeQL databases for a repository",
      "description": "Lists the CodeQL databases that are available in a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/get-codeql-database",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get a CodeQL database for a repository",
      "description": "Gets a CodeQL database for a language in a repository.\n\nBy default this endpoint returns JSON metadata about the CodeQL database. To\ndownload the CodeQL database binary content, set the `Accept` header of the request\nto [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure\nyour HTTP client is configured to follow redirects or use the `Location` header\nto make a second request to get the redirect URL.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/delete-codeql-database",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Delete a CodeQL database",
      "description": "Deletes a CodeQL database for a language in a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/create-variant-analysis",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses",
      "tags": [
        "code-scanning"
      ],
      "summary": "Create a CodeQL variant analysis",
      "description": "Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.\n\nGet started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).\n\nUse the `owner` and `repo` parameters in the URL to specify the controller repository that\nwill be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "code-scanning/get-variant-analysis",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get the summary of a CodeQL variant analysis",
      "description": "Gets the summary of a CodeQL variant analysis.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/get-variant-analysis-repo-task",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get the analysis status of a repository in a CodeQL variant analysis",
      "description": "Gets the analysis status of a repository in a CodeQL variant analysis.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/get-default-setup",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/default-setup",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get a code scanning default setup configuration",
      "description": "Gets a code scanning default setup configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/update-default-setup",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/code-scanning/default-setup",
      "tags": [
        "code-scanning"
      ],
      "summary": "Update a code scanning default setup configuration",
      "description": "Updates a code scanning default setup configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "code-scanning/upload-sarif",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/code-scanning/sarifs",
      "tags": [
        "code-scanning"
      ],
      "summary": "Upload an analysis as SARIF data",
      "description": "Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see \"[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif).\"\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see \"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\"\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see \"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\"\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see \"[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit).\"\n\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|----------------------------------|:------------------:|----------------------------------------------------------------------------------|\n| Runs per file                    |         20         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Tool extensions per run          |        100         |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n| Tags per rule\t                   |         20         | Only 10 tags will be included.                                                   |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see \"[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload).\"\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.\n\nThis endpoint is limited to 1,000 requests per hour for each user or app installation calling it."
    },
    {
      "operationId": "code-scanning/get-sarif",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
      "tags": [
        "code-scanning"
      ],
      "summary": "Get information about a SARIF upload",
      "description": "Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \"[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository).\"\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
    },
    {
      "operationId": "packages/list-docker-migration-conflicting-packages-for-organization",
      "method": "GET",
      "path": "/orgs/{org}/docker/conflicts",
      "tags": [
        "packages"
      ],
      "summary": "Get list of conflicting packages during Docker migration for organization",
      "description": "Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint."
    },
    {
      "operationId": "packages/list-packages-for-organization",
      "method": "GET",
      "path": "/orgs/{org}/packages",
      "tags": [
        "packages"
      ],
      "summary": "List packages for an organization",
      "description": "Lists packages in an organization readable by the user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-package-for-organization",
      "method": "GET",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}",
      "tags": [
        "packages"
      ],
      "summary": "Get a package for an organization",
      "description": "Gets a specific package in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/delete-package-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}",
      "tags": [
        "packages"
      ],
      "summary": "Delete a package for an organization",
      "description": "Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/restore-package-for-org",
      "method": "POST",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}/restore",
      "tags": [
        "packages"
      ],
      "summary": "Restore a package for an organization",
      "description": "Restores an entire package in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-all-package-versions-for-package-owned-by-org",
      "method": "GET",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}/versions",
      "tags": [
        "packages"
      ],
      "summary": "List package versions for a package owned by an organization",
      "description": "Lists package versions for a package owned by an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-package-version-for-organization",
      "method": "GET",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      "tags": [
        "packages"
      ],
      "summary": "Get a package version for an organization",
      "description": "Gets a specific package version in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/delete-package-version-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      "tags": [
        "packages"
      ],
      "summary": "Delete package version for an organization",
      "description": "Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/restore-package-version-for-org",
      "method": "POST",
      "path": "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
      "tags": [
        "packages"
      ],
      "summary": "Restore package version for an organization",
      "description": "Restores a specific package version in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/list-docker-migration-conflicting-packages-for-authenticated-user",
      "method": "GET",
      "path": "/user/docker/conflicts",
      "tags": [
        "packages"
      ],
      "summary": "Get list of conflicting packages during Docker migration for authenticated-user",
      "description": "Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint."
    },
    {
      "operationId": "packages/list-packages-for-authenticated-user",
      "method": "GET",
      "path": "/user/packages",
      "tags": [
        "packages"
      ],
      "summary": "List packages for the authenticated user's namespace",
      "description": "Lists packages owned by the authenticated user within the user's namespace.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-package-for-authenticated-user",
      "method": "GET",
      "path": "/user/packages/{package_type}/{package_name}",
      "tags": [
        "packages"
      ],
      "summary": "Get a package for the authenticated user",
      "description": "Gets a specific package for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/delete-package-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/packages/{package_type}/{package_name}",
      "tags": [
        "packages"
      ],
      "summary": "Delete a package for the authenticated user",
      "description": "Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/restore-package-for-authenticated-user",
      "method": "POST",
      "path": "/user/packages/{package_type}/{package_name}/restore",
      "tags": [
        "packages"
      ],
      "summary": "Restore a package for the authenticated user",
      "description": "Restores a package owned by the authenticated user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-all-package-versions-for-package-owned-by-authenticated-user",
      "method": "GET",
      "path": "/user/packages/{package_type}/{package_name}/versions",
      "tags": [
        "packages"
      ],
      "summary": "List package versions for a package owned by the authenticated user",
      "description": "Lists package versions for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-package-version-for-authenticated-user",
      "method": "GET",
      "path": "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
      "tags": [
        "packages"
      ],
      "summary": "Get a package version for the authenticated user",
      "description": "Gets a specific package version for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/delete-package-version-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
      "tags": [
        "packages"
      ],
      "summary": "Delete a package version for the authenticated user",
      "description": "Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/restore-package-version-for-authenticated-user",
      "method": "POST",
      "path": "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
      "tags": [
        "packages"
      ],
      "summary": "Restore a package version for the authenticated user",
      "description": "Restores a package version owned by the authenticated user.\n\nYou can restore a deleted package version under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/list-docker-migration-conflicting-packages-for-user",
      "method": "GET",
      "path": "/users/{username}/docker/conflicts",
      "tags": [
        "packages"
      ],
      "summary": "Get list of conflicting packages during Docker migration for user",
      "description": "Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint."
    },
    {
      "operationId": "packages/list-packages-for-user",
      "method": "GET",
      "path": "/users/{username}/packages",
      "tags": [
        "packages"
      ],
      "summary": "List packages for a user",
      "description": "Lists all packages in a user's namespace for which the requesting user has access.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-package-for-user",
      "method": "GET",
      "path": "/users/{username}/packages/{package_type}/{package_name}",
      "tags": [
        "packages"
      ],
      "summary": "Get a package for a user",
      "description": "Gets a specific package metadata for a public package owned by a user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/delete-package-for-user",
      "method": "DELETE",
      "path": "/users/{username}/packages/{package_type}/{package_name}",
      "tags": [
        "packages"
      ],
      "summary": "Delete a package for a user",
      "description": "Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/restore-package-for-user",
      "method": "POST",
      "path": "/users/{username}/packages/{package_type}/{package_name}/restore",
      "tags": [
        "packages"
      ],
      "summary": "Restore a package for a user",
      "description": "Restores an entire package for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-all-package-versions-for-package-owned-by-user",
      "method": "GET",
      "path": "/users/{username}/packages/{package_type}/{package_name}/versions",
      "tags": [
        "packages"
      ],
      "summary": "List package versions for a package owned by a user",
      "description": "Lists package versions for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/get-package-version-for-user",
      "method": "GET",
      "path": "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      "tags": [
        "packages"
      ],
      "summary": "Get a package version for a user",
      "description": "Gets a specific package version for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/delete-package-version-for-user",
      "method": "DELETE",
      "path": "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      "tags": [
        "packages"
      ],
      "summary": "Delete package version for a user",
      "description": "Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "packages/restore-package-version-for-user",
      "method": "POST",
      "path": "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
      "tags": [
        "packages"
      ],
      "summary": "Restore package version for a user",
      "description": "Restores a specific package version for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\""
    },
    {
      "operationId": "private-registries/list-org-private-registries",
      "method": "GET",
      "path": "/orgs/{org}/private-registries",
      "tags": [
        "private-registries"
      ],
      "summary": "List private registries for an organization",
      "description": "\nLists all private registry configurations available at the organization-level without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "private-registries/create-org-private-registry",
      "method": "POST",
      "path": "/orgs/{org}/private-registries",
      "tags": [
        "private-registries"
      ],
      "summary": "Create a private registry for an organization",
      "description": "\nCreates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "private-registries/get-org-public-key",
      "method": "GET",
      "path": "/orgs/{org}/private-registries/public-key",
      "tags": [
        "private-registries"
      ],
      "summary": "Get private registries public key for an organization",
      "description": "\nGets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "private-registries/get-org-private-registry",
      "method": "GET",
      "path": "/orgs/{org}/private-registries/{secret_name}",
      "tags": [
        "private-registries"
      ],
      "summary": "Get a private registry for an organization",
      "description": "\nGet the configuration of a single private registry defined for an organization, omitting its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "private-registries/update-org-private-registry",
      "method": "PATCH",
      "path": "/orgs/{org}/private-registries/{secret_name}",
      "tags": [
        "private-registries"
      ],
      "summary": "Update a private registry for an organization",
      "description": "\nUpdates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "private-registries/delete-org-private-registry",
      "method": "DELETE",
      "path": "/orgs/{org}/private-registries/{secret_name}",
      "tags": [
        "private-registries"
      ],
      "summary": "Delete a private registry for an organization",
      "description": "\nDelete a private registry configuration at the organization-level.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-for-org",
      "method": "GET",
      "path": "/orgs/{org}/repos",
      "tags": [
        "repos"
      ],
      "summary": "List organization repositories",
      "description": "Lists repositories for the specified organization.\n\n> [!NOTE]\n> In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\""
    },
    {
      "operationId": "repos/create-in-org",
      "method": "POST",
      "path": "/orgs/{org}/repos",
      "tags": [
        "repos"
      ],
      "summary": "Create an organization repository",
      "description": "Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository."
    },
    {
      "operationId": "repos/get-org-rulesets",
      "method": "GET",
      "path": "/orgs/{org}/rulesets",
      "tags": [
        "repos"
      ],
      "summary": "Get all organization repository rulesets",
      "description": "Get all the repository rulesets for an organization."
    },
    {
      "operationId": "repos/create-org-ruleset",
      "method": "POST",
      "path": "/orgs/{org}/rulesets",
      "tags": [
        "repos"
      ],
      "summary": "Create an organization repository ruleset",
      "description": "Create a repository ruleset for an organization."
    },
    {
      "operationId": "repos/get-org-rule-suites",
      "method": "GET",
      "path": "/orgs/{org}/rulesets/rule-suites",
      "tags": [
        "repos"
      ],
      "summary": "List organization rule suites",
      "description": "Lists suites of rule evaluations at the organization level.\nFor more information, see \"[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).\""
    },
    {
      "operationId": "repos/get-org-rule-suite",
      "method": "GET",
      "path": "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get an organization rule suite",
      "description": "Gets information about a suite of rule evaluations from within an organization.\nFor more information, see \"[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).\""
    },
    {
      "operationId": "repos/get-org-ruleset",
      "method": "GET",
      "path": "/orgs/{org}/rulesets/{ruleset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get an organization repository ruleset",
      "description": "Get a repository ruleset for an organization.\n\n**Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user\nmaking the API request has write access to the ruleset."
    },
    {
      "operationId": "repos/update-org-ruleset",
      "method": "PUT",
      "path": "/orgs/{org}/rulesets/{ruleset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update an organization repository ruleset",
      "description": "Update a ruleset for an organization."
    },
    {
      "operationId": "repos/delete-org-ruleset",
      "method": "DELETE",
      "path": "/orgs/{org}/rulesets/{ruleset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete an organization repository ruleset",
      "description": "Delete a ruleset for an organization."
    },
    {
      "operationId": "repos/get",
      "method": "GET",
      "path": "/repos/{owner}/{repo}",
      "tags": [
        "repos"
      ],
      "summary": "Get a repository",
      "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n\n> [!NOTE]\n> - In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n> - To view merge-related settings, you must have the `contents:read` and `contents:write` permissions."
    },
    {
      "operationId": "repos/update",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}",
      "tags": [
        "repos"
      ],
      "summary": "Update a repository",
      "description": "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint."
    },
    {
      "operationId": "repos/delete",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a repository",
      "description": "Deleting a repository requires admin access.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.\n\nOAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-activities",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/activity",
      "tags": [
        "repos"
      ],
      "summary": "List repository activities",
      "description": "Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.\n\nFor more information about viewing repository activity,\nsee \"[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository).\""
    },
    {
      "operationId": "repos/create-attestation",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/attestations",
      "tags": [
        "repos"
      ],
      "summary": "Create an attestation",
      "description": "Store an artifact attestation and associate it with a repository.\n\nThe authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.\n\nArtifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    },
    {
      "operationId": "repos/list-attestations",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/attestations/{subject_digest}",
      "tags": [
        "repos"
      ],
      "summary": "List attestations",
      "description": "List a collection of artifact attestations with a given subject digest that are associated with a repository.\n\nThe authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    },
    {
      "operationId": "repos/list-autolinks",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/autolinks",
      "tags": [
        "repos"
      ],
      "summary": "Get all autolinks of a repository",
      "description": "Gets all autolinks that are configured for a repository.\n\nInformation about autolinks are only available to repository administrators."
    },
    {
      "operationId": "repos/create-autolink",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/autolinks",
      "tags": [
        "repos"
      ],
      "summary": "Create an autolink reference for a repository",
      "description": "Users with admin access to the repository can create an autolink."
    },
    {
      "operationId": "repos/get-autolink",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/autolinks/{autolink_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get an autolink reference of a repository",
      "description": "This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators."
    },
    {
      "operationId": "repos/delete-autolink",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/autolinks/{autolink_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete an autolink reference from a repository",
      "description": "This deletes a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators."
    },
    {
      "operationId": "repos/check-automated-security-fixes",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/automated-security-fixes",
      "tags": [
        "repos"
      ],
      "summary": "Check if Dependabot security updates are enabled for a repository",
      "description": "Shows whether Dependabot security updates are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see \"[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)\"."
    },
    {
      "operationId": "repos/enable-automated-security-fixes",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/automated-security-fixes",
      "tags": [
        "repos"
      ],
      "summary": "Enable Dependabot security updates",
      "description": "Enables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)\"."
    },
    {
      "operationId": "repos/disable-automated-security-fixes",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/automated-security-fixes",
      "tags": [
        "repos"
      ],
      "summary": "Disable Dependabot security updates",
      "description": "Disables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)\"."
    },
    {
      "operationId": "repos/list-branches",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches",
      "tags": [
        "repos"
      ],
      "summary": "List branches",
      "description": ""
    },
    {
      "operationId": "repos/get-branch",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}",
      "tags": [
        "repos"
      ],
      "summary": "Get a branch",
      "description": ""
    },
    {
      "operationId": "repos/get-branch-protection",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection",
      "tags": [
        "repos"
      ],
      "summary": "Get branch protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/update-branch-protection",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection",
      "tags": [
        "repos"
      ],
      "summary": "Update branch protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n> [!NOTE]\n> Passing new arrays of `users` and `teams` replaces their previous values.\n\n> [!NOTE]\n> The list of users, apps, and teams in total is limited to 100 items."
    },
    {
      "operationId": "repos/delete-branch-protection",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection",
      "tags": [
        "repos"
      ],
      "summary": "Delete branch protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/get-admin-branch-protection",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
      "tags": [
        "repos"
      ],
      "summary": "Get admin branch protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/set-admin-branch-protection",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
      "tags": [
        "repos"
      ],
      "summary": "Set admin branch protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled."
    },
    {
      "operationId": "repos/delete-admin-branch-protection",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
      "tags": [
        "repos"
      ],
      "summary": "Delete admin branch protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled."
    },
    {
      "operationId": "repos/get-pull-request-review-protection",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
      "tags": [
        "repos"
      ],
      "summary": "Get pull request review protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/update-pull-request-review-protection",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
      "tags": [
        "repos"
      ],
      "summary": "Update pull request review protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n> [!NOTE]\n> Passing new arrays of `users` and `teams` replaces their previous values."
    },
    {
      "operationId": "repos/delete-pull-request-review-protection",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
      "tags": [
        "repos"
      ],
      "summary": "Delete pull request review protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/get-commit-signature-protection",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
      "tags": [
        "repos"
      ],
      "summary": "Get commit signature protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n> [!NOTE]\n> You must enable branch protection to require signed commits."
    },
    {
      "operationId": "repos/create-commit-signature-protection",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
      "tags": [
        "repos"
      ],
      "summary": "Create commit signature protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits."
    },
    {
      "operationId": "repos/delete-commit-signature-protection",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
      "tags": [
        "repos"
      ],
      "summary": "Delete commit signature protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits."
    },
    {
      "operationId": "repos/get-status-checks-protection",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      "tags": [
        "repos"
      ],
      "summary": "Get status checks protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/update-status-check-protection",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      "tags": [
        "repos"
      ],
      "summary": "Update status check protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled."
    },
    {
      "operationId": "repos/remove-status-check-protection",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      "tags": [
        "repos"
      ],
      "summary": "Remove status check protection",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/get-all-status-check-contexts",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      "tags": [
        "repos"
      ],
      "summary": "Get all status check contexts",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/add-status-check-contexts",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      "tags": [
        "repos"
      ],
      "summary": "Add status check contexts",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/set-status-check-contexts",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      "tags": [
        "repos"
      ],
      "summary": "Set status check contexts",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/remove-status-check-contexts",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      "tags": [
        "repos"
      ],
      "summary": "Remove status check contexts",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation."
    },
    {
      "operationId": "repos/get-access-restrictions",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
      "tags": [
        "repos"
      ],
      "summary": "Get access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n> [!NOTE]\n> Users, apps, and teams `restrictions` are only available for organization-owned repositories."
    },
    {
      "operationId": "repos/delete-access-restrictions",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
      "tags": [
        "repos"
      ],
      "summary": "Delete access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch."
    },
    {
      "operationId": "repos/get-apps-with-access-to-protected-branch",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      "tags": [
        "repos"
      ],
      "summary": "Get apps with access to the protected branch",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch."
    },
    {
      "operationId": "repos/add-app-access-restrictions",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      "tags": [
        "repos"
      ],
      "summary": "Add app access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch."
    },
    {
      "operationId": "repos/set-app-access-restrictions",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      "tags": [
        "repos"
      ],
      "summary": "Set app access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch."
    },
    {
      "operationId": "repos/remove-app-access-restrictions",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      "tags": [
        "repos"
      ],
      "summary": "Remove app access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch."
    },
    {
      "operationId": "repos/get-teams-with-access-to-protected-branch",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      "tags": [
        "repos"
      ],
      "summary": "Get teams with access to the protected branch",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams."
    },
    {
      "operationId": "repos/add-team-access-restrictions",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      "tags": [
        "repos"
      ],
      "summary": "Add team access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams."
    },
    {
      "operationId": "repos/set-team-access-restrictions",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      "tags": [
        "repos"
      ],
      "summary": "Set team access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams."
    },
    {
      "operationId": "repos/remove-team-access-restrictions",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      "tags": [
        "repos"
      ],
      "summary": "Remove team access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams."
    },
    {
      "operationId": "repos/get-users-with-access-to-protected-branch",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      "tags": [
        "repos"
      ],
      "summary": "Get users with access to the protected branch",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch."
    },
    {
      "operationId": "repos/add-user-access-restrictions",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      "tags": [
        "repos"
      ],
      "summary": "Add user access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |"
    },
    {
      "operationId": "repos/set-user-access-restrictions",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      "tags": [
        "repos"
      ],
      "summary": "Set user access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |"
    },
    {
      "operationId": "repos/remove-user-access-restrictions",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      "tags": [
        "repos"
      ],
      "summary": "Remove user access restrictions",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |"
    },
    {
      "operationId": "repos/rename-branch",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/branches/{branch}/rename",
      "tags": [
        "repos"
      ],
      "summary": "Rename a branch",
      "description": "Renames a branch in a repository.\n\n> [!NOTE]\n> Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\".\n\nThe authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.\n\nIn order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission."
    },
    {
      "operationId": "repos/codeowners-errors",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codeowners/errors",
      "tags": [
        "repos"
      ],
      "summary": "List CODEOWNERS errors",
      "description": "List any syntax errors that are detected in the CODEOWNERS\nfile.\n\nFor more information about the correct CODEOWNERS syntax,\nsee \"[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).\""
    },
    {
      "operationId": "repos/list-collaborators",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/collaborators",
      "tags": [
        "repos"
      ],
      "summary": "List repository collaborators",
      "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nThe `permissions` hash returned in the response contains the base role permissions of the collaborator. The `role_name` is the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.\nThere is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.\n\nTeam members will include the members of child teams.\n\nThe authenticated user must have write, maintain, or admin privileges on the repository to use this endpoint. For organization-owned repositories, the authenticated user needs to be a member of the organization.\nOAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint."
    },
    {
      "operationId": "repos/check-collaborator",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/collaborators/{username}",
      "tags": [
        "repos"
      ],
      "summary": "Check if a user is a repository collaborator",
      "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.\n\nThe authenticated user must have push access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint."
    },
    {
      "operationId": "repos/add-collaborator",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/collaborators/{username}",
      "tags": [
        "repos"
      ],
      "summary": "Add a repository collaborator",
      "description": "Add a user to a repository with a specified level of access. If the repository is owned by an organization, this API does not add the user to the organization - a user that has repository access without being an organization member is called an \"outside collaborator\" (if they are not an Enterprise Managed User) or a \"repository collaborator\" if they are an Enterprise Managed User. These users are exempt from some organization policies - see \"[Adding outside collaborators to repositories](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/managing-outside-collaborators/adding-outside-collaborators-to-repositories-in-your-organization)\" to learn more about these collaborator types.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).\n\nAdding an outside collaborator may be restricted by enterprise and organization administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)\" and \"[Setting permissions for adding outside collaborators](https://docs.github.com/organizations/managing-organization-settings/setting-permissions-for-adding-outside-collaborators)\" for organization settings.\n\nFor more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the role being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:\n\n```\nCannot assign {member} permission of {role name}\n```\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).\n\nFor Enterprise Managed Users, this endpoint does not send invitations - these users are automatically added to organizations and repositories. Enterprise Managed Users can only be added to organizations and repositories within their enterprise.\n\n**Updating an existing collaborator's permission level**\n\nThe endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.\n\n**Rate limits**\n\nYou are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository."
    },
    {
      "operationId": "repos/remove-collaborator",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/collaborators/{username}",
      "tags": [
        "repos"
      ],
      "summary": "Remove a repository collaborator",
      "description": "Removes a collaborator from a repository.\n\nTo use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.\n\nThis endpoint also:\n- Cancels any outstanding invitations sent by the collaborator\n- Unassigns the user from any issues\n- Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.\n- Unstars the repository\n- Updates access permissions to packages\n\nRemoving a user as a collaborator has the following effects on forks:\n - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.\n - If the user had their own fork of the repository, the fork will be deleted.\n - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.\n\n> [!NOTE]\n> A user can still have access to the repository through organization permissions like base repository permissions.\n\nAlthough the API responds immediately, the additional permission updates might take some extra time to complete in the background.\n\nFor more information on fork permissions, see \"[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)\"."
    },
    {
      "operationId": "repos/get-collaborator-permission-level",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/collaborators/{username}/permission",
      "tags": [
        "repos"
      ],
      "summary": "Get repository permissions for a user",
      "description": "Checks the repository permission and role of a collaborator.\n\nThe `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the\n`maintain` role is mapped to `write` and the `triage` role is mapped to `read`.\nThe `role_name` attribute provides the name of the assigned role, including custom roles. The\n`permission` can also be used to determine which base level of access the collaborator has to the repository.\n\nThe calculated permissions are the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.\nThere is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response."
    },
    {
      "operationId": "repos/list-commit-comments-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/comments",
      "tags": [
        "repos"
      ],
      "summary": "List commit comments for a repository",
      "description": "Lists the commit comments for a specified repository. Comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "repos/get-commit-comment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/comments/{comment_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a commit comment",
      "description": "Gets a specified commit comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "repos/update-commit-comment",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/comments/{comment_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a commit comment",
      "description": "Updates the contents of a specified commit comment.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "repos/delete-commit-comment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/comments/{comment_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a commit comment",
      "description": ""
    },
    {
      "operationId": "repos/list-commits",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits",
      "tags": [
        "repos"
      ],
      "summary": "List commits",
      "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "repos/list-branches-for-head-commit",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
      "tags": [
        "repos"
      ],
      "summary": "List branches for HEAD commit",
      "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch."
    },
    {
      "operationId": "repos/list-comments-for-commit",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
      "tags": [
        "repos"
      ],
      "summary": "List commit comments",
      "description": "Lists the comments for a specified commit.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "repos/create-commit-comment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
      "tags": [
        "repos"
      ],
      "summary": "Create a commit comment",
      "description": "Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "repos/list-pull-requests-associated-with-commit",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
      "tags": [
        "repos"
      ],
      "summary": "List pull requests associated with a commit",
      "description": "Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, it will return merged and open pull requests associated with the commit.\n\nTo list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name."
    },
    {
      "operationId": "repos/get-commit",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits/{ref}",
      "tags": [
        "repos"
      ],
      "summary": "Get a commit",
      "description": "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n> [!NOTE]\n> If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\" Pagination query parameters are not supported for these media types.\n\n- **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.\n- **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.\n- **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "repos/get-combined-status-for-ref",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits/{ref}/status",
      "tags": [
        "repos"
      ],
      "summary": "Get the combined status for a specific reference",
      "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`"
    },
    {
      "operationId": "repos/list-commit-statuses-for-ref",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/commits/{ref}/statuses",
      "tags": [
        "repos"
      ],
      "summary": "List commit statuses for a reference",
      "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`."
    },
    {
      "operationId": "repos/get-community-profile-metrics",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/community/profile",
      "tags": [
        "repos"
      ],
      "summary": "Get community profile metrics",
      "description": "Returns all community profile metrics for a repository. The repository cannot be a fork.\n\nThe returned metrics include an overall health score, the repository description, the presence of documentation, the\ndetected code of conduct, the detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\nREADME, and CONTRIBUTING files.\n\nThe `health_percentage` score is defined as a percentage of how many of\nthe recommended community health files are present. For more information, see\n\"[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories).\"\n\n`content_reports_enabled` is only returned for organization-owned repositories."
    },
    {
      "operationId": "repos/compare-commits",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/compare/{basehead}",
      "tags": [
        "repos"
      ],
      "summary": "Compare two commits",
      "description": "Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see \"[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories).\"\n\nThis endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.diff`**: Returns the diff of the commit.\n- **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.\n\nThe API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\nWhen calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.\n\n**Working with large comparisons**\n\nTo process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:\n\n- The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.\n- The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.\n\nFor more information on working with pagination, see \"[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\"\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "repos/get-content",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/contents/{path}",
      "tags": [
        "repos"
      ],
      "summary": "Get repository content",
      "description": "Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.\n- **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).\n- **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.\n\nIf the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".\n\nIf the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.\n\nIf the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.\n\n**Notes**:\n\n- To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).\n- This API has an upper limit of 1,000 files for a directory. If you need to retrieve\nmore files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).\n- Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.\n- If the requested file's size is:\n  - 1 MB or smaller: All features of this endpoint are supported.\n  - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty\nstring and the `encoding` field will be `\"none\"`. To get the contents of these larger files, use the `raw` media type.\n  - Greater than 100 MB: This endpoint is not supported."
    },
    {
      "operationId": "repos/create-or-update-file-contents",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/contents/{path}",
      "tags": [
        "repos"
      ],
      "summary": "Create or update file contents",
      "description": "Creates a new file or replaces an existing file in a repository.\n\n> [!NOTE]\n> If you use this endpoint and the \"[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)\" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory."
    },
    {
      "operationId": "repos/delete-file",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/contents/{path}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a file",
      "description": "Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\n> [!NOTE]\n> If you use this endpoint and the \"[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)\" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead."
    },
    {
      "operationId": "repos/list-contributors",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/contributors",
      "tags": [
        "repos"
      ],
      "summary": "List repository contributors",
      "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information."
    },
    {
      "operationId": "repos/list-deployments",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/deployments",
      "tags": [
        "repos"
      ],
      "summary": "List deployments",
      "description": "Simple filtering of deployments is available via query parameters:"
    },
    {
      "operationId": "repos/create-deployment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/deployments",
      "tags": [
        "repos"
      ],
      "summary": "Create a deployment",
      "description": "Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nMerged branch response:\n\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\nMerge conflict response:\n\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\nbe merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\nFailed commit status checks:\n\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint."
    },
    {
      "operationId": "repos/get-deployment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/deployments/{deployment_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a deployment",
      "description": ""
    },
    {
      "operationId": "repos/delete-deployment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/deployments/{deployment_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a deployment",
      "description": "If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see \"[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-deployment-statuses",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      "tags": [
        "repos"
      ],
      "summary": "List deployment statuses",
      "description": "Users with pull access can view deployment statuses for a deployment:"
    },
    {
      "operationId": "repos/create-deployment-status",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      "tags": [
        "repos"
      ],
      "summary": "Create a deployment status",
      "description": "Users with `push` access can create deployment statuses for a given deployment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint."
    },
    {
      "operationId": "repos/get-deployment-status",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a deployment status",
      "description": "Users with pull access can view a deployment status for a deployment:"
    },
    {
      "operationId": "repos/create-dispatch-event",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/dispatches",
      "tags": [
        "repos"
      ],
      "summary": "Create a repository dispatch event",
      "description": "You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\"\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/get-all-environments",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments",
      "tags": [
        "repos"
      ],
      "summary": "List environments",
      "description": "Lists the environments for a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/get-environment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}",
      "tags": [
        "repos"
      ],
      "summary": "Get an environment",
      "description": "> [!NOTE]\n> To get information about name patterns that branches must match in order to deploy to this environment, see \"[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy).\"\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/create-or-update-environment",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}",
      "tags": [
        "repos"
      ],
      "summary": "Create or update an environment",
      "description": "Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \"[Environments](/actions/reference/environments#environment-protection-rules).\"\n\n> [!NOTE]\n> To create or update name patterns that branches must match in order to deploy to this environment, see \"[Deployment branch policies](/rest/deployments/branch-policies).\"\n\n> [!NOTE]\n> To create or update secrets for an environment, see \"[GitHub Actions secrets](/rest/actions/secrets).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/delete-an-environment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}",
      "tags": [
        "repos"
      ],
      "summary": "Delete an environment",
      "description": "OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-deployment-branch-policies",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
      "tags": [
        "repos"
      ],
      "summary": "List deployment branch policies",
      "description": "Lists the deployment branch policies for an environment.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/create-deployment-branch-policy",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
      "tags": [
        "repos"
      ],
      "summary": "Create a deployment branch policy",
      "description": "Creates a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/get-deployment-branch-policy",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a deployment branch policy",
      "description": "Gets a deployment branch or tag policy for an environment.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/update-deployment-branch-policy",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a deployment branch policy",
      "description": "Updates a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/delete-deployment-branch-policy",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a deployment branch policy",
      "description": "Deletes a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/get-all-deployment-protection-rules",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
      "tags": [
        "repos"
      ],
      "summary": "Get all deployment protection rules for an environment",
      "description": "Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\nFor more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/create-deployment-protection-rule",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
      "tags": [
        "repos"
      ],
      "summary": "Create a custom deployment protection rule on an environment",
      "description": "Enable a custom deployment protection rule for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nFor more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app), as well as the [guide to creating custom deployment protection rules](https://docs.github.com/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-custom-deployment-rule-integrations",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
      "tags": [
        "repos"
      ],
      "summary": "List custom deployment rule integrations available for an environment",
      "description": "Gets all custom deployment protection rule integrations that are available for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nFor more information about environments, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\nFor more information about the app that is providing this custom deployment rule, see \"[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)\".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/get-custom-deployment-protection-rule",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a custom deployment protection rule",
      "description": "Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"\n\nFor more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/disable-deployment-protection-rule",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
      "tags": [
        "repos"
      ],
      "summary": "Disable a custom protection rule for an environment",
      "description": "Disables a custom deployment protection rule for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-forks",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/forks",
      "tags": [
        "repos"
      ],
      "summary": "List forks",
      "description": ""
    },
    {
      "operationId": "repos/create-fork",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/forks",
      "tags": [
        "repos"
      ],
      "summary": "Create a fork",
      "description": "Create a fork for the authenticated user.\n\n> [!NOTE]\n> Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n\n> [!NOTE]\n> Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository."
    },
    {
      "operationId": "repos/list-webhooks",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/hooks",
      "tags": [
        "repos"
      ],
      "summary": "List repository webhooks",
      "description": "Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days."
    },
    {
      "operationId": "repos/create-webhook",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/hooks",
      "tags": [
        "repos"
      ],
      "summary": "Create a repository webhook",
      "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap."
    },
    {
      "operationId": "repos/get-webhook",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a repository webhook",
      "description": "Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository).\""
    },
    {
      "operationId": "repos/update-webhook",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a repository webhook",
      "description": "Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository).\""
    },
    {
      "operationId": "repos/delete-webhook",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a repository webhook",
      "description": "Delete a webhook for an organization.\n\nThe authenticated user must be a repository owner, or have admin access in the repository, to delete the webhook."
    },
    {
      "operationId": "repos/get-webhook-config-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/config",
      "tags": [
        "repos"
      ],
      "summary": "Get a webhook configuration for a repository",
      "description": "Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/update-webhook-config-for-repo",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/config",
      "tags": [
        "repos"
      ],
      "summary": "Update a webhook configuration for a repository",
      "description": "Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook).\"\n\nOAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-webhook-deliveries",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
      "tags": [
        "repos"
      ],
      "summary": "List deliveries for a repository webhook",
      "description": "Returns a list of webhook deliveries for a webhook configured in a repository."
    },
    {
      "operationId": "repos/get-webhook-delivery",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a delivery for a repository webhook",
      "description": "Returns a delivery for a webhook configured in a repository."
    },
    {
      "operationId": "repos/redeliver-webhook-delivery",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
      "tags": [
        "repos"
      ],
      "summary": "Redeliver a delivery for a repository webhook",
      "description": "Redeliver a webhook delivery for a webhook configured in a repository."
    },
    {
      "operationId": "repos/ping-webhook",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/pings",
      "tags": [
        "repos"
      ],
      "summary": "Ping a repository webhook",
      "description": "This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook."
    },
    {
      "operationId": "repos/test-push-webhook",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/hooks/{hook_id}/tests",
      "tags": [
        "repos"
      ],
      "summary": "Test the push repository webhook",
      "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n> [!NOTE]\n> Previously `/repos/:owner/:repo/hooks/:hook_id/test`"
    },
    {
      "operationId": "repos/list-invitations",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/invitations",
      "tags": [
        "repos"
      ],
      "summary": "List repository invitations",
      "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations."
    },
    {
      "operationId": "repos/update-invitation",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/invitations/{invitation_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a repository invitation",
      "description": ""
    },
    {
      "operationId": "repos/delete-invitation",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/invitations/{invitation_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a repository invitation",
      "description": ""
    },
    {
      "operationId": "repos/list-deploy-keys",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/keys",
      "tags": [
        "repos"
      ],
      "summary": "List deploy keys",
      "description": ""
    },
    {
      "operationId": "repos/create-deploy-key",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/keys",
      "tags": [
        "repos"
      ],
      "summary": "Create a deploy key",
      "description": "You can create a read-only deploy key."
    },
    {
      "operationId": "repos/get-deploy-key",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/keys/{key_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a deploy key",
      "description": ""
    },
    {
      "operationId": "repos/delete-deploy-key",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/keys/{key_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a deploy key",
      "description": "Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead."
    },
    {
      "operationId": "repos/list-languages",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/languages",
      "tags": [
        "repos"
      ],
      "summary": "List repository languages",
      "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language."
    },
    {
      "operationId": "repos/merge-upstream",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/merge-upstream",
      "tags": [
        "repos"
      ],
      "summary": "Sync a fork branch with the upstream repository",
      "description": "Sync a branch of a forked repository to keep it up-to-date with the upstream repository."
    },
    {
      "operationId": "repos/merge",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/merges",
      "tags": [
        "repos"
      ],
      "summary": "Merge a branch",
      "description": ""
    },
    {
      "operationId": "repos/get-pages",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pages",
      "tags": [
        "repos"
      ],
      "summary": "Get a GitHub Pages site",
      "description": "Gets information about a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/create-pages-site",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/pages",
      "tags": [
        "repos"
      ],
      "summary": "Create a GitHub Pages site",
      "description": "Configures a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\"\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/update-information-about-pages-site",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/pages",
      "tags": [
        "repos"
      ],
      "summary": "Update information about a GitHub Pages site",
      "description": "Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/delete-pages-site",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/pages",
      "tags": [
        "repos"
      ],
      "summary": "Delete a GitHub Pages site",
      "description": "Deletes a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/list-pages-builds",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pages/builds",
      "tags": [
        "repos"
      ],
      "summary": "List GitHub Pages builds",
      "description": "Lists builts of a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/request-pages-build",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/pages/builds",
      "tags": [
        "repos"
      ],
      "summary": "Request a GitHub Pages build",
      "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes."
    },
    {
      "operationId": "repos/get-latest-pages-build",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pages/builds/latest",
      "tags": [
        "repos"
      ],
      "summary": "Get latest Pages build",
      "description": "Gets information about the single most recent build of a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/get-pages-build",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pages/builds/{build_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get GitHub Pages build",
      "description": "Gets information about a GitHub Pages build.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/create-pages-deployment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/pages/deployments",
      "tags": [
        "repos"
      ],
      "summary": "Create a GitHub Pages deployment",
      "description": "Create a GitHub Pages deployment for a repository.\n\nThe authenticated user must have write permission to the repository."
    },
    {
      "operationId": "repos/get-pages-deployment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get the status of a GitHub Pages deployment",
      "description": "Gets the current status of a GitHub Pages deployment.\n\nThe authenticated user must have read permission for the GitHub Pages site."
    },
    {
      "operationId": "repos/cancel-pages-deployment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel",
      "tags": [
        "repos"
      ],
      "summary": "Cancel a GitHub Pages deployment",
      "description": "Cancels a GitHub Pages deployment.\n\nThe authenticated user must have write permissions for the GitHub Pages site."
    },
    {
      "operationId": "repos/get-pages-health-check",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pages/health",
      "tags": [
        "repos"
      ],
      "summary": "Get a DNS health check for GitHub Pages",
      "description": "Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.\n\nThe first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "repos/check-private-vulnerability-reporting",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/private-vulnerability-reporting",
      "tags": [
        "repos"
      ],
      "summary": "Check if private vulnerability reporting is enabled for a repository",
      "description": "Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see \"[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)\"."
    },
    {
      "operationId": "repos/enable-private-vulnerability-reporting",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/private-vulnerability-reporting",
      "tags": [
        "repos"
      ],
      "summary": "Enable private vulnerability reporting for a repository",
      "description": "Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability).\""
    },
    {
      "operationId": "repos/disable-private-vulnerability-reporting",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/private-vulnerability-reporting",
      "tags": [
        "repos"
      ],
      "summary": "Disable private vulnerability reporting for a repository",
      "description": "Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\"."
    },
    {
      "operationId": "repos/custom-properties-for-repos-get-repository-values",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/properties/values",
      "tags": [
        "repos"
      ],
      "summary": "Get all custom property values for a repository",
      "description": "Gets all custom property values that are set for a repository.\nUsers with read access to the repository can use this endpoint."
    },
    {
      "operationId": "repos/custom-properties-for-repos-create-or-update-repository-values",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/properties/values",
      "tags": [
        "repos"
      ],
      "summary": "Create or update custom property values for a repository",
      "description": "Create new or update existing custom property values for a repository.\nUsing a value of `null` for a custom property will remove or 'unset' the property value from the repository.\n\nRepository admins and other users with the repository-level \"edit custom property values\" fine-grained permission can use this endpoint."
    },
    {
      "operationId": "repos/get-readme",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/readme",
      "tags": [
        "repos"
      ],
      "summary": "Get a repository README",
      "description": "Gets the preferred README for a repository.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.\n- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup)."
    },
    {
      "operationId": "repos/get-readme-in-directory",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/readme/{dir}",
      "tags": [
        "repos"
      ],
      "summary": "Get a repository README for a directory",
      "description": "Gets the README from a repository directory.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.\n- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup)."
    },
    {
      "operationId": "repos/list-releases",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases",
      "tags": [
        "repos"
      ],
      "summary": "List releases",
      "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases."
    },
    {
      "operationId": "repos/create-release",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/releases",
      "tags": [
        "repos"
      ],
      "summary": "Create a release",
      "description": "Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\""
    },
    {
      "operationId": "repos/get-release-asset",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a release asset",
      "description": "To download the asset's binary content:\n\n- If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.\n- Alternatively, set the `Accept` header of the request to \n  [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). \n  The API will either redirect the client to the location, or stream it directly if possible.\n  API clients should handle both a `200` or `302` response."
    },
    {
      "operationId": "repos/update-release-asset",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a release asset",
      "description": "Users with push access to the repository can edit a release asset."
    },
    {
      "operationId": "repos/delete-release-asset",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a release asset",
      "description": ""
    },
    {
      "operationId": "repos/generate-release-notes",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/releases/generate-notes",
      "tags": [
        "repos"
      ],
      "summary": "Generate release notes content for a release",
      "description": "Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release."
    },
    {
      "operationId": "repos/get-latest-release",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases/latest",
      "tags": [
        "repos"
      ],
      "summary": "Get the latest release",
      "description": "View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published."
    },
    {
      "operationId": "repos/get-release-by-tag",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases/tags/{tag}",
      "tags": [
        "repos"
      ],
      "summary": "Get a release by tag name",
      "description": "Get a published release with the specified tag."
    },
    {
      "operationId": "repos/get-release",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases/{release_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a release",
      "description": "Gets a public release with the specified release ID.\n\n> [!NOTE]\n> This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see \"[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).\""
    },
    {
      "operationId": "repos/update-release",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/releases/{release_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a release",
      "description": "Users with push access to the repository can edit a release."
    },
    {
      "operationId": "repos/delete-release",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/releases/{release_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a release",
      "description": "Users with push access to the repository can delete a release."
    },
    {
      "operationId": "repos/list-release-assets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases/{release_id}/assets",
      "tags": [
        "repos"
      ],
      "summary": "List release assets",
      "description": ""
    },
    {
      "operationId": "repos/upload-release-asset",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/releases/{release_id}/assets",
      "tags": [
        "repos"
      ],
      "summary": "Upload a release asset",
      "description": "This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou'll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)\"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n*   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). \n*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset."
    },
    {
      "operationId": "repos/get-branch-rules",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rules/branches/{branch}",
      "tags": [
        "repos"
      ],
      "summary": "Get rules for a branch",
      "description": "Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply\nto a branch with that name will be returned. All active rules that apply will be returned, regardless of the level\nat which they are configured (e.g. repository or organization). Rules in rulesets with \"evaluate\" or \"disabled\"\nenforcement statuses are not returned."
    },
    {
      "operationId": "repos/get-repo-rulesets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rulesets",
      "tags": [
        "repos"
      ],
      "summary": "Get all repository rulesets",
      "description": "Get all the rulesets for a repository."
    },
    {
      "operationId": "repos/create-repo-ruleset",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/rulesets",
      "tags": [
        "repos"
      ],
      "summary": "Create a repository ruleset",
      "description": "Create a ruleset for a repository."
    },
    {
      "operationId": "repos/get-repo-rule-suites",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rulesets/rule-suites",
      "tags": [
        "repos"
      ],
      "summary": "List repository rule suites",
      "description": "Lists suites of rule evaluations at the repository level.\nFor more information, see \"[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).\""
    },
    {
      "operationId": "repos/get-repo-rule-suite",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a repository rule suite",
      "description": "Gets information about a suite of rule evaluations from within a repository.\nFor more information, see \"[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).\""
    },
    {
      "operationId": "repos/get-repo-ruleset",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get a repository ruleset",
      "description": "Get a ruleset for a repository.\n\n**Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user\nmaking the API request has write access to the ruleset."
    },
    {
      "operationId": "repos/update-repo-ruleset",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Update a repository ruleset",
      "description": "Update a ruleset for a repository."
    },
    {
      "operationId": "repos/delete-repo-ruleset",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
      "tags": [
        "repos"
      ],
      "summary": "Delete a repository ruleset",
      "description": "Delete a ruleset for a repository."
    },
    {
      "operationId": "repos/get-repo-ruleset-history",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history",
      "tags": [
        "repos"
      ],
      "summary": "Get repository ruleset history",
      "description": "Get the history of a repository ruleset."
    },
    {
      "operationId": "repos/get-repo-ruleset-version",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}",
      "tags": [
        "repos"
      ],
      "summary": "Get repository ruleset version",
      "description": "Get a version of a repository ruleset."
    },
    {
      "operationId": "repos/get-code-frequency-stats",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/stats/code_frequency",
      "tags": [
        "repos"
      ],
      "summary": "Get the weekly commit activity",
      "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.\n\n> [!NOTE]\n> This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned."
    },
    {
      "operationId": "repos/get-commit-activity-stats",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/stats/commit_activity",
      "tags": [
        "repos"
      ],
      "summary": "Get the last year of commit activity",
      "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`."
    },
    {
      "operationId": "repos/get-contributors-stats",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/stats/contributors",
      "tags": [
        "repos"
      ],
      "summary": "Get all contributor commit activity",
      "description": "\nReturns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits\n\n> [!NOTE]\n> This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits."
    },
    {
      "operationId": "repos/get-participation-stats",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/stats/participation",
      "tags": [
        "repos"
      ],
      "summary": "Get the weekly commit count",
      "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.\n\nThe most recent week is seven days ago at UTC midnight to today at UTC midnight."
    },
    {
      "operationId": "repos/get-punch-card-stats",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/stats/punch_card",
      "tags": [
        "repos"
      ],
      "summary": "Get the hourly commit count for each day",
      "description": "Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits."
    },
    {
      "operationId": "repos/create-commit-status",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/statuses/{sha}",
      "tags": [
        "repos"
      ],
      "summary": "Create a commit status",
      "description": "Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error."
    },
    {
      "operationId": "repos/list-tags",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/tags",
      "tags": [
        "repos"
      ],
      "summary": "List repository tags",
      "description": ""
    },
    {
      "operationId": "repos/list-tag-protection",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/tags/protection",
      "tags": [
        "repos"
      ],
      "summary": "Closing down - List tag protection states for a repository",
      "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the \"[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)\" endpoint instead.\n\nThis returns the tag protection states of a repository.\n\nThis information is only available to repository administrators."
    },
    {
      "operationId": "repos/create-tag-protection",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/tags/protection",
      "tags": [
        "repos"
      ],
      "summary": "Closing down - Create a tag protection state for a repository",
      "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the \"[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)\" endpoint instead.\n\nThis creates a tag protection state for a repository.\nThis endpoint is only available to repository administrators."
    },
    {
      "operationId": "repos/delete-tag-protection",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}",
      "tags": [
        "repos"
      ],
      "summary": "Closing down - Delete a tag protection state for a repository",
      "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the \"[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)\" endpoint instead.\n\nThis deletes a tag protection state for a repository.\nThis endpoint is only available to repository administrators."
    },
    {
      "operationId": "repos/download-tarball-archive",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/tarball/{ref}",
      "tags": [
        "repos"
      ],
      "summary": "Download a repository archive (tar)",
      "description": "Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n> [!NOTE]\n> For private repositories, these links are temporary and expire after five minutes."
    },
    {
      "operationId": "repos/list-teams",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/teams",
      "tags": [
        "repos"
      ],
      "summary": "List repository teams",
      "description": "Lists the teams that have access to the specified repository and that are also visible to the authenticated user.\n\nFor a public repository, a team is listed only if that team added the public repository explicitly.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository."
    },
    {
      "operationId": "repos/get-all-topics",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/topics",
      "tags": [
        "repos"
      ],
      "summary": "Get all repository topics",
      "description": ""
    },
    {
      "operationId": "repos/replace-all-topics",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/topics",
      "tags": [
        "repos"
      ],
      "summary": "Replace all repository topics",
      "description": ""
    },
    {
      "operationId": "repos/get-clones",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/traffic/clones",
      "tags": [
        "repos"
      ],
      "summary": "Get repository clones",
      "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday."
    },
    {
      "operationId": "repos/get-top-paths",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/traffic/popular/paths",
      "tags": [
        "repos"
      ],
      "summary": "Get top referral paths",
      "description": "Get the top 10 popular contents over the last 14 days."
    },
    {
      "operationId": "repos/get-top-referrers",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/traffic/popular/referrers",
      "tags": [
        "repos"
      ],
      "summary": "Get top referral sources",
      "description": "Get the top 10 referrers over the last 14 days."
    },
    {
      "operationId": "repos/get-views",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/traffic/views",
      "tags": [
        "repos"
      ],
      "summary": "Get page views",
      "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday."
    },
    {
      "operationId": "repos/transfer",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/transfer",
      "tags": [
        "repos"
      ],
      "summary": "Transfer a repository",
      "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/)."
    },
    {
      "operationId": "repos/check-vulnerability-alerts",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/vulnerability-alerts",
      "tags": [
        "repos"
      ],
      "summary": "Check if vulnerability alerts are enabled for a repository",
      "description": "Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\"."
    },
    {
      "operationId": "repos/enable-vulnerability-alerts",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/vulnerability-alerts",
      "tags": [
        "repos"
      ],
      "summary": "Enable vulnerability alerts",
      "description": "Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\"."
    },
    {
      "operationId": "repos/disable-vulnerability-alerts",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/vulnerability-alerts",
      "tags": [
        "repos"
      ],
      "summary": "Disable vulnerability alerts",
      "description": "Disables dependency alerts and the dependency graph for a repository.\nThe authenticated user must have admin access to the repository. For more information,\nsee \"[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\"."
    },
    {
      "operationId": "repos/download-zipball-archive",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/zipball/{ref}",
      "tags": [
        "repos"
      ],
      "summary": "Download a repository archive (zip)",
      "description": "Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n> [!NOTE]\n> For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect."
    },
    {
      "operationId": "repos/create-using-template",
      "method": "POST",
      "path": "/repos/{template_owner}/{template_repo}/generate",
      "tags": [
        "repos"
      ],
      "summary": "Create a repository using a template",
      "description": "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository."
    },
    {
      "operationId": "repos/list-public",
      "method": "GET",
      "path": "/repositories",
      "tags": [
        "repos"
      ],
      "summary": "List public repositories",
      "description": "Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories."
    },
    {
      "operationId": "repos/list-for-authenticated-user",
      "method": "GET",
      "path": "/user/repos",
      "tags": [
        "repos"
      ],
      "summary": "List repositories for the authenticated user",
      "description": "Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership."
    },
    {
      "operationId": "repos/create-for-authenticated-user",
      "method": "POST",
      "path": "/user/repos",
      "tags": [
        "repos"
      ],
      "summary": "Create a repository for the authenticated user",
      "description": "Creates a new repository for the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository."
    },
    {
      "operationId": "repos/list-invitations-for-authenticated-user",
      "method": "GET",
      "path": "/user/repository_invitations",
      "tags": [
        "repos"
      ],
      "summary": "List repository invitations for the authenticated user",
      "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user."
    },
    {
      "operationId": "repos/accept-invitation-for-authenticated-user",
      "method": "PATCH",
      "path": "/user/repository_invitations/{invitation_id}",
      "tags": [
        "repos"
      ],
      "summary": "Accept a repository invitation",
      "description": ""
    },
    {
      "operationId": "repos/decline-invitation-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/repository_invitations/{invitation_id}",
      "tags": [
        "repos"
      ],
      "summary": "Decline a repository invitation",
      "description": ""
    },
    {
      "operationId": "repos/list-for-user",
      "method": "GET",
      "path": "/users/{username}/repos",
      "tags": [
        "repos"
      ],
      "summary": "List repositories for a user",
      "description": "Lists public repositories for the specified user."
    },
    {
      "operationId": "reactions/list-for-team-discussion-comment-in-org",
      "method": "GET",
      "path": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a team discussion comment",
      "description": "List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/create-for-team-discussion-comment-in-org",
      "method": "POST",
      "path": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a team discussion comment",
      "description": "Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/delete-for-team-discussion-comment",
      "method": "DELETE",
      "path": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete team discussion comment reaction",
      "description": "> [!NOTE]\n> You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/list-for-team-discussion-in-org",
      "method": "GET",
      "path": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a team discussion",
      "description": "List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/create-for-team-discussion-in-org",
      "method": "POST",
      "path": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a team discussion",
      "description": "Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\n> [!NOTE]\n> You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/delete-for-team-discussion",
      "method": "DELETE",
      "path": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete team discussion reaction",
      "description": "> [!NOTE]\n> You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/list-for-commit-comment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a commit comment",
      "description": "List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment)."
    },
    {
      "operationId": "reactions/create-for-commit-comment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a commit comment",
      "description": "Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment."
    },
    {
      "operationId": "reactions/delete-for-commit-comment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete a commit comment reaction",
      "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment)."
    },
    {
      "operationId": "reactions/list-for-issue-comment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for an issue comment",
      "description": "List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)."
    },
    {
      "operationId": "reactions/create-for-issue-comment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for an issue comment",
      "description": "Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment."
    },
    {
      "operationId": "reactions/delete-for-issue-comment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete an issue comment reaction",
      "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)."
    },
    {
      "operationId": "reactions/list-for-issue",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for an issue",
      "description": "List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue)."
    },
    {
      "operationId": "reactions/create-for-issue",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for an issue",
      "description": "Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue."
    },
    {
      "operationId": "reactions/delete-for-issue",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete an issue reaction",
      "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue)."
    },
    {
      "operationId": "reactions/list-for-pull-request-review-comment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a pull request review comment",
      "description": "List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request)."
    },
    {
      "operationId": "reactions/create-for-pull-request-review-comment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a pull request review comment",
      "description": "Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment."
    },
    {
      "operationId": "reactions/delete-for-pull-request-comment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete a pull request comment reaction",
      "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request)."
    },
    {
      "operationId": "reactions/list-for-release",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/releases/{release_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a release",
      "description": "List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release)."
    },
    {
      "operationId": "reactions/create-for-release",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/releases/{release_id}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a release",
      "description": "Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release."
    },
    {
      "operationId": "reactions/delete-for-release",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}",
      "tags": [
        "reactions"
      ],
      "summary": "Delete a release reaction",
      "description": "> [!NOTE]\n> You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.\n\nDelete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release)."
    },
    {
      "operationId": "reactions/list-for-team-discussion-comment-legacy",
      "method": "GET",
      "path": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a team discussion comment (Legacy)",
      "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/create-for-team-discussion-comment-legacy",
      "method": "POST",
      "path": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a team discussion comment (Legacy)",
      "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.\n\nCreate a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/list-for-team-discussion-legacy",
      "method": "GET",
      "path": "/teams/{team_id}/discussions/{discussion_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "List reactions for a team discussion (Legacy)",
      "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint."
    },
    {
      "operationId": "reactions/create-for-team-discussion-legacy",
      "method": "POST",
      "path": "/teams/{team_id}/discussions/{discussion_number}/reactions",
      "tags": [
        "reactions"
      ],
      "summary": "Create reaction for a team discussion (Legacy)",
      "description": "> [!WARNING]\n> **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint."
    },
    {
      "operationId": "dependency-graph/diff-range",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
      "tags": [
        "dependency-graph"
      ],
      "summary": "Get a diff of the dependencies between commits",
      "description": "Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits."
    },
    {
      "operationId": "dependency-graph/export-sbom",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/dependency-graph/sbom",
      "tags": [
        "dependency-graph"
      ],
      "summary": "Export a software bill of materials (SBOM) for a repository.",
      "description": "Exports the software bill of materials (SBOM) for a repository in SPDX JSON format."
    },
    {
      "operationId": "dependency-graph/create-repository-snapshot",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/dependency-graph/snapshots",
      "tags": [
        "dependency-graph"
      ],
      "summary": "Create a snapshot of dependencies for a repository",
      "description": "Create a new snapshot of a repository's dependencies.\n\nThe authenticated user must have access to the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "search/code",
      "method": "GET",
      "path": "/search/code",
      "tags": [
        "search"
      ],
      "summary": "Search code",
      "description": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\nConsiderations for code search:\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n\nThis endpoint requires you to authenticate and limits you to 10 requests per minute."
    },
    {
      "operationId": "search/commits",
      "method": "GET",
      "path": "/search/commits",
      "tags": [
        "search"
      ],
      "summary": "Search commits",
      "description": "Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`"
    },
    {
      "operationId": "search/issues-and-pull-requests",
      "method": "GET",
      "path": "/search/issues",
      "tags": [
        "search"
      ],
      "summary": "Search issues and pull requests",
      "description": "> [!WARNING]\n> **Notice:** Search for issues and pull requests will be overridden by advanced search on November 4, 2025.\n> You can read more about this change on [the GitHub blog](https://github.blog/changelog/2025-03-06-github-issues-projects-api-support-for-issues-advanced-search-and-more/)."
    },
    {
      "operationId": "search/labels",
      "method": "GET",
      "path": "/search/labels",
      "tags": [
        "search"
      ],
      "summary": "Search labels",
      "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results."
    },
    {
      "operationId": "search/repos",
      "method": "GET",
      "path": "/search/repositories",
      "tags": [
        "search"
      ],
      "summary": "Search repositories",
      "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results."
    },
    {
      "operationId": "search/topics",
      "method": "GET",
      "path": "/search/topics",
      "tags": [
        "search"
      ],
      "summary": "Search topics",
      "description": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See \"[Searching topics](https://docs.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results."
    },
    {
      "operationId": "search/users",
      "method": "GET",
      "path": "/search/users",
      "tags": [
        "search"
      ],
      "summary": "Search users",
      "description": "Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.\n\nThis endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see \"[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search).\""
    }
  ]
}