{
  "gold": [
    {
      "path": "/rest/api/3/announcementBanner",
      "method": "GET",
      "operationId": "getBanner",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current announcement banner settings to ensure that the information displayed to users is accurate and up-to-date.",
      "ideal": "The response should include the current announcement banner details, such as its visibility status, message content, and any associated links."
    },
    {
      "path": "/rest/api/3/announcementBanner",
      "method": "PUT",
      "operationId": "setBanner",
      "summary": "",
      "user": "As a system administrator, I need to update the announcement banner to inform users about the upcoming maintenance window, so they are aware of potential downtime.",
      "ideal": "The request should successfully update the announcement banner with the new message and visibility settings, and the response should confirm the update."
    },
    {
      "path": "/rest/api/3/data-policy",
      "method": "GET",
      "operationId": "getPolicy",
      "summary": "",
      "user": "As a project manager, I want to retrieve the data policy for my project to ensure compliance with data protection regulations.",
      "ideal": "The response should include the data policy details such as the policy ID, name, description, and any applicable regulations."
    },
    {
      "path": "/rest/api/3/data-policy/project",
      "method": "GET",
      "operationId": "getPolicies",
      "summary": "",
      "user": "As a compliance officer, I need to access all data policies associated with different projects to audit our data handling practices.",
      "ideal": "The response should return a list of data policies, including project IDs, policy names, and descriptions for each project."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/field",
      "method": "PUT",
      "operationId": "AppIssueFieldValueUpdateResource.updateIssueFields_put",
      "summary": "",
      "user": "As a project manager, I want to update the issue fields in Jira to reflect the latest changes in our project requirements.",
      "ideal": "The issue fields are successfully updated with the new values, and a confirmation message is returned."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/properties/{entityType}",
      "method": "PUT",
      "operationId": "MigrationResource.updateEntityPropertiesValue_put",
      "summary": "",
      "user": "As a system administrator, I need to update the properties of a specific entity type to ensure that our migration settings are correctly configured.",
      "ideal": "The properties for the specified entity type are updated successfully, and the API returns the updated properties."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/workflow/rule/search",
      "method": "POST",
      "operationId": "MigrationResource.workflowRuleSearch_post",
      "summary": "",
      "user": "As a developer, I want to search for specific workflow rules that need to be migrated to the new system so that I can prepare for the migration process.",
      "ideal": "The search returns a list of relevant workflow rules that match the search criteria, allowing me to review them before migration."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties",
      "method": "GET",
      "operationId": "AddonPropertiesResource.getAddonProperties_get",
      "summary": "",
      "user": "User requests all properties for the specified addon to manage configurations.",
      "ideal": "Returns a list of properties associated with the addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "GET",
      "operationId": "AddonPropertiesResource.getAddonProperty_get",
      "summary": "",
      "user": "User retrieves a specific property value for the addon to check its current setting.",
      "ideal": "Returns the value of the specified property for the addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "PUT",
      "operationId": "AddonPropertiesResource.putAddonProperty_put",
      "summary": "",
      "user": "User updates a specific property for the addon to change its configuration.",
      "ideal": "Updates the property value and confirms the change."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "DELETE",
      "operationId": "AddonPropertiesResource.deleteAddonProperty_delete",
      "summary": "",
      "user": "User deletes a specific property for the addon to remove unnecessary configurations.",
      "ideal": "Confirms the deletion of the specified property."
    },
    {
      "path": "/rest/forge/1/app/properties",
      "method": "GET",
      "operationId": "getForgeAppPropertyKeys",
      "summary": "",
      "user": "User requests all property keys for the Forge app to review available configurations.",
      "ideal": "Returns a list of property keys for the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "GET",
      "operationId": "getForgeAppProperty",
      "summary": "",
      "user": "User retrieves a specific property for the Forge app to check its current value.",
      "ideal": "Returns the value of the specified property for the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "PUT",
      "operationId": "putForgeAppProperty",
      "summary": "",
      "user": "User updates a specific property for the Forge app to modify its settings.",
      "ideal": "Updates the property and confirms the change."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "DELETE",
      "operationId": "deleteForgeAppProperty",
      "summary": "",
      "user": "User deletes a specific property for the Forge app to clean up configurations.",
      "ideal": "Confirms the deletion of the specified property."
    },
    {
      "path": "/rest/api/3/applicationrole",
      "method": "GET",
      "operationId": "getAllApplicationRoles",
      "summary": "",
      "user": "As a project manager, I want to retrieve all application roles available in Jira so that I can understand the permissions and access levels assigned to different roles within my projects.",
      "ideal": "The API should return a list of all application roles, including their keys and descriptions, allowing me to make informed decisions about role assignments."
    },
    {
      "path": "/rest/api/3/applicationrole/{key}",
      "method": "GET",
      "operationId": "getApplicationRole",
      "summary": "",
      "user": "As a system administrator, I need to fetch details of a specific application role by its key to verify its permissions and ensure it aligns with our security policies.",
      "ideal": "The API should return detailed information about the specified application role, including its name, key, and associated permissions, enabling me to review and manage role configurations effectively."
    },
    {
      "path": "/rest/api/3/auditing/record",
      "method": "GET",
      "operationId": "getAuditRecords",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of audit records for the Jira Cloud platform, including details such as the action performed, the user who performed it, and the timestamp of the action."
    },
    {
      "path": "/rest/api/3/avatar/system",
      "method": "GET",
      "operationId": "getAllSystemAvatars",
      "summary": "",
      "user": "As a user, I want to retrieve all available system avatars so that I can choose one for my profile.",
      "ideal": "The response should include a list of all system avatars with their respective IDs and URLs."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345",
      "method": "GET",
      "operationId": "getAvatars",
      "summary": "",
      "user": "As a user, I want to fetch my avatars by providing my user ID so that I can see which avatars I have.",
      "ideal": "The response should return a list of avatars associated with the user ID, including their types and URLs."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345",
      "method": "POST",
      "operationId": "storeAvatar",
      "summary": "",
      "user": "As a user, I want to upload a new avatar for my profile so that I can personalize my account.",
      "ideal": "The response should confirm that the avatar has been successfully uploaded and provide the new avatar's ID."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345/avatar/67890",
      "method": "DELETE",
      "operationId": "deleteAvatar",
      "summary": "",
      "user": "As a user, I want to delete an avatar from my profile so that I can remove unwanted images.",
      "ideal": "The response should confirm that the avatar has been successfully deleted."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user",
      "method": "GET",
      "operationId": "getAvatarImageByType",
      "summary": "",
      "user": "As a user, I want to view all available user avatars so that I can select one for my profile.",
      "ideal": "The response should return a list of user avatars with their images and IDs."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user/avatar/67890",
      "method": "GET",
      "operationId": "getAvatarImageByID",
      "summary": "",
      "user": "As a user, I want to view a specific avatar by its ID so that I can see how it looks before using it.",
      "ideal": "The response should return the image of the avatar along with its details."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user/owner/12345",
      "method": "GET",
      "operationId": "getAvatarImageByOwner",
      "summary": "",
      "user": "As a user, I want to see the avatar I have set for my profile so that I can confirm it's correct.",
      "ideal": "The response should return the current avatar image for the specified user ID."
    },
    {
      "path": "/rest/api/3/classification-levels",
      "method": "GET",
      "operationId": "getAllUserDataClassificationLevels",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all user data classification levels available in the Jira Cloud platform."
    },
    {
      "path": "/rest/api/3/dashboard",
      "method": "GET",
      "operationId": "getAllDashboards",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all dashboards available to the user."
    },
    {
      "path": "/rest/api/3/dashboard",
      "method": "POST",
      "operationId": "createDashboard",
      "summary": "",
      "user": "project_manager",
      "ideal": "Create a new dashboard with specified parameters."
    },
    {
      "path": "/rest/api/3/dashboard/bulk/edit",
      "method": "PUT",
      "operationId": "bulkEditDashboards",
      "summary": "",
      "user": "admin",
      "ideal": "Update multiple dashboards in a single request."
    },
    {
      "path": "/rest/api/3/dashboard/gadgets",
      "method": "GET",
      "operationId": "getAllAvailableDashboardGadgets",
      "summary": "",
      "user": "developer",
      "ideal": "Fetch a list of all available gadgets for dashboards."
    },
    {
      "path": "/rest/api/3/dashboard/search",
      "method": "GET",
      "operationId": "getDashboardsPaginated",
      "summary": "",
      "user": "user",
      "ideal": "Retrieve a paginated list of dashboards based on search criteria."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "GET",
      "operationId": "getAllGadgets",
      "summary": "",
      "user": "user",
      "ideal": "Get all gadgets associated with a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "POST",
      "operationId": "addGadget",
      "summary": "",
      "user": "project_manager",
      "ideal": "Add a new gadget to the specified dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "DELETE",
      "operationId": "removeGadget",
      "summary": "",
      "user": "project_manager",
      "ideal": "Remove a specific gadget from the dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "PUT",
      "operationId": "updateGadget",
      "summary": "",
      "user": "project_manager",
      "ideal": "Update the configuration of a specific gadget on the dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties",
      "method": "GET",
      "operationId": "getDashboardItemPropertyKeys",
      "summary": "",
      "user": "user",
      "ideal": "Retrieve property keys for a specific dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteDashboardItemProperty",
      "summary": "",
      "user": "admin",
      "ideal": "Delete a specific property from a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getDashboardItemProperty",
      "summary": "",
      "user": "user",
      "ideal": "Get the value of a specific property for a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setDashboardItemProperty",
      "summary": "",
      "user": "admin",
      "ideal": "Set a specific property for a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "DELETE",
      "operationId": "deleteDashboard",
      "summary": "",
      "user": "admin",
      "ideal": "Delete a specific dashboard by its ID."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "GET",
      "operationId": "getDashboard",
      "summary": "",
      "user": "user",
      "ideal": "Retrieve details of a specific dashboard by its ID."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "PUT",
      "operationId": "updateDashboard",
      "summary": "",
      "user": "project_manager",
      "ideal": "Update the details of a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{id}/copy",
      "method": "POST",
      "operationId": "copyDashboard",
      "summary": "",
      "user": "project_manager",
      "ideal": "Create a copy of an existing dashboard."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "GET",
      "operationId": "DynamicModulesResource.getModules_get",
      "summary": "",
      "user": "As a developer, I want to retrieve the list of dynamic modules registered in the Jira Cloud platform so that I can verify their status and configuration.",
      "ideal": "The API should return a JSON array of dynamic modules, including their IDs, types, and current status."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "POST",
      "operationId": "DynamicModulesResource.registerModules_post",
      "summary": "",
      "user": "As an app administrator, I want to register new dynamic modules with the Jira Cloud platform so that they can be utilized within the application.",
      "ideal": "The API should accept a JSON payload with module details and return a success message along with the registered module ID."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "DELETE",
      "operationId": "DynamicModulesResource.removeModules_delete",
      "summary": "",
      "user": "As a system administrator, I want to remove specific dynamic modules from the Jira Cloud platform to clean up unused or outdated modules.",
      "ideal": "The API should accept a module ID and return a confirmation message indicating that the module has been successfully removed."
    },
    {
      "path": "/rest/api/3/filter/defaultShareScope",
      "method": "GET",
      "operationId": "getDefaultShareScope",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the default share scope for filters in Jira."
    },
    {
      "path": "/rest/api/3/filter/defaultShareScope",
      "method": "PUT",
      "operationId": "setDefaultShareScope",
      "summary": "",
      "user": "user456",
      "ideal": "Update the default share scope for filters in Jira."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission",
      "method": "GET",
      "operationId": "getSharePermissions",
      "summary": "",
      "user": "user789",
      "ideal": "Get the share permissions for a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission",
      "method": "POST",
      "operationId": "addSharePermission",
      "summary": "",
      "user": "user101",
      "ideal": "Add a new share permission to a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission/{permissionId}",
      "method": "DELETE",
      "operationId": "deleteSharePermission",
      "summary": "",
      "user": "user202",
      "ideal": "Remove a specific share permission from a filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/permission/{permissionId}",
      "method": "GET",
      "operationId": "getSharePermission",
      "summary": "",
      "user": "user303",
      "ideal": "Retrieve details of a specific share permission for a filter."
    },
    {
      "path": "/rest/api/3/filter",
      "method": "POST",
      "operationId": "createFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Create a new filter with specified criteria."
    },
    {
      "path": "/rest/api/3/filter/favourite",
      "method": "GET",
      "operationId": "getFavouriteFilters",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieve a list of filters marked as favourite by the user."
    },
    {
      "path": "/rest/api/3/filter/my",
      "method": "GET",
      "operationId": "getMyFilters",
      "summary": "",
      "user": "user789",
      "ideal": "Get all filters created by the user."
    },
    {
      "path": "/rest/api/3/filter/search",
      "method": "GET",
      "operationId": "getFiltersPaginated",
      "summary": "",
      "user": "user101",
      "ideal": "Search for filters with pagination support."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "DELETE",
      "operationId": "deleteFilter",
      "summary": "",
      "user": "user202",
      "ideal": "Delete a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "GET",
      "operationId": "getFilter",
      "summary": "",
      "user": "user303",
      "ideal": "Retrieve details of a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "PUT",
      "operationId": "updateFilter",
      "summary": "",
      "user": "user404",
      "ideal": "Update an existing filter with new criteria."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "DELETE",
      "operationId": "resetColumns",
      "summary": "",
      "user": "user505",
      "ideal": "Reset the columns of a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "GET",
      "operationId": "getColumns",
      "summary": "",
      "user": "user606",
      "ideal": "Get the columns of a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "PUT",
      "operationId": "setColumns",
      "summary": "",
      "user": "user707",
      "ideal": "Set the columns for a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/favourite",
      "method": "DELETE",
      "operationId": "deleteFavouriteForFilter",
      "summary": "",
      "user": "user808",
      "ideal": "Remove a filter from the user's favourites."
    },
    {
      "path": "/rest/api/3/filter/{id}/favourite",
      "method": "PUT",
      "operationId": "setFavouriteForFilter",
      "summary": "",
      "user": "user909",
      "ideal": "Add a filter to the user's favourites."
    },
    {
      "path": "/rest/api/3/filter/{id}/owner",
      "method": "PUT",
      "operationId": "changeFilterOwner",
      "summary": "",
      "user": "user010",
      "ideal": "Change the owner of a specific filter."
    },
    {
      "path": "/rest/api/3/groupuserpicker",
      "method": "GET",
      "operationId": "findUsersAndGroups",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve a list of users and groups based on the provided query."
    },
    {
      "path": "/rest/api/3/group",
      "method": "GET",
      "operationId": "getGroup",
      "summary": "",
      "user": "Retrieve the details of a specific group in Jira.",
      "ideal": "Returns the group information including its name, description, and members."
    },
    {
      "path": "/rest/api/3/group",
      "method": "POST",
      "operationId": "createGroup",
      "summary": "",
      "user": "Create a new group in Jira with the specified name.",
      "ideal": "Successfully creates the group and returns its details."
    },
    {
      "path": "/rest/api/3/group",
      "method": "DELETE",
      "operationId": "removeGroup",
      "summary": "",
      "user": "Delete an existing group from Jira by its ID.",
      "ideal": "Confirms the group has been removed successfully."
    },
    {
      "path": "/rest/api/3/group/bulk",
      "method": "GET",
      "operationId": "bulkGetGroups",
      "summary": "",
      "user": "Fetch details of multiple groups in a single request.",
      "ideal": "Returns an array of group details."
    },
    {
      "path": "/rest/api/3/group/member",
      "method": "GET",
      "operationId": "getUsersFromGroup",
      "summary": "",
      "user": "List all users that belong to a specific group.",
      "ideal": "Returns a list of user details associated with the group."
    },
    {
      "path": "/rest/api/3/group/user",
      "method": "POST",
      "operationId": "addUserToGroup",
      "summary": "",
      "user": "Add a user to a specified group in Jira.",
      "ideal": "Confirms the user has been added to the group successfully."
    },
    {
      "path": "/rest/api/3/group/user",
      "method": "DELETE",
      "operationId": "removeUserFromGroup",
      "summary": "",
      "user": "Remove a user from a specific group in Jira.",
      "ideal": "Confirms the user has been removed from the group successfully."
    },
    {
      "path": "/rest/api/3/groups/picker",
      "method": "GET",
      "operationId": "findGroups",
      "summary": "",
      "user": "Search for groups based on a query string.",
      "ideal": "Returns a list of groups that match the search criteria."
    },
    {
      "path": "/rest/api/3/attachment/content/12345",
      "method": "GET",
      "operationId": "getAttachmentContent",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the content of the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/meta",
      "method": "GET",
      "operationId": "getAttachmentMeta",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch metadata for all attachments."
    },
    {
      "path": "/rest/api/3/attachment/thumbnail/12345",
      "method": "GET",
      "operationId": "getAttachmentThumbnail",
      "summary": "",
      "user": "user789",
      "ideal": "Get the thumbnail image for the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/12345",
      "method": "DELETE",
      "operationId": "removeAttachment",
      "summary": "",
      "user": "user101",
      "ideal": "Delete the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/12345",
      "method": "GET",
      "operationId": "getAttachment",
      "summary": "",
      "user": "user202",
      "ideal": "Retrieve details of the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/12345/expand/human",
      "method": "GET",
      "operationId": "expandAttachmentForHumans",
      "summary": "",
      "user": "user303",
      "ideal": "Expand the attachment with ID 12345 for human-readable format."
    },
    {
      "path": "/rest/api/3/attachment/12345/expand/raw",
      "method": "GET",
      "operationId": "expandAttachmentForMachines",
      "summary": "",
      "user": "user404",
      "ideal": "Expand the attachment with ID 12345 for machine-readable format."
    },
    {
      "path": "/rest/api/3/issue/ISSUE-123/attachments",
      "method": "POST",
      "operationId": "addAttachment",
      "summary": "",
      "user": "user505",
      "ideal": "Add a new attachment to the issue with key ISSUE-123."
    },
    {
      "path": "/rest/api/3/bulk/issues/delete",
      "method": "POST",
      "operationId": "submitBulkDelete",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully deletes multiple issues in bulk."
    },
    {
      "path": "/rest/api/3/bulk/issues/fields",
      "method": "GET",
      "operationId": "getBulkEditableFields",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieves a list of fields that can be edited in bulk."
    },
    {
      "path": "/rest/api/3/bulk/issues/fields",
      "method": "POST",
      "operationId": "submitBulkEdit",
      "summary": "",
      "user": "user789",
      "ideal": "Applies bulk edits to specified issues."
    },
    {
      "path": "/rest/api/3/bulk/issues/move",
      "method": "POST",
      "operationId": "submitBulkMove",
      "summary": "",
      "user": "user101",
      "ideal": "Moves multiple issues to a different project or issue type."
    },
    {
      "path": "/rest/api/3/bulk/issues/transition",
      "method": "GET",
      "operationId": "getAvailableTransitions",
      "summary": "",
      "user": "user202",
      "ideal": "Fetches available transitions for bulk issues."
    },
    {
      "path": "/rest/api/3/bulk/issues/transition",
      "method": "POST",
      "operationId": "submitBulkTransition",
      "summary": "",
      "user": "user303",
      "ideal": "Transitions multiple issues to a new status."
    },
    {
      "path": "/rest/api/3/bulk/issues/unwatch",
      "method": "POST",
      "operationId": "submitBulkUnwatch",
      "summary": "",
      "user": "user404",
      "ideal": "Unwatches multiple issues at once."
    },
    {
      "path": "/rest/api/3/bulk/issues/watch",
      "method": "POST",
      "operationId": "submitBulkWatch",
      "summary": "",
      "user": "user505",
      "ideal": "Watches multiple issues in bulk."
    },
    {
      "path": "/rest/api/3/bulk/queue/{taskId}",
      "method": "GET",
      "operationId": "getBulkOperationProgress",
      "summary": "",
      "user": "user606",
      "ideal": "Checks the progress of a bulk operation using task ID."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties",
      "method": "GET",
      "operationId": "getCommentPropertyKeys",
      "summary": "",
      "user": "As a project manager, I want to retrieve all property keys associated with a specific comment to understand its metadata and context.",
      "ideal": "The API should return a list of property keys for the specified comment, allowing me to see all custom data associated with it."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getCommentProperty",
      "summary": "",
      "user": "As a developer, I need to fetch a specific property value for a comment to utilize it in my application logic.",
      "ideal": "The API should return the value of the specified property key for the comment, enabling me to access the necessary data."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setCommentProperty",
      "summary": "",
      "user": "As a team lead, I want to set a custom property for a comment to track additional information relevant to our workflow.",
      "ideal": "The API should successfully update or create the specified property for the comment, confirming the action with a success message."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteCommentProperty",
      "summary": "",
      "user": "As a product owner, I need to remove unnecessary properties from comments to keep our data clean and relevant.",
      "ideal": "The API should delete the specified property from the comment and return a confirmation that the property has been removed."
    },
    {
      "path": "/rest/api/3/comment/list",
      "method": "POST",
      "operationId": "getCommentsByIds",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve comments by their IDs for a specific issue."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment",
      "method": "GET",
      "operationId": "getComments",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch all comments associated with the issue identified by PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment",
      "method": "POST",
      "operationId": "addComment",
      "summary": "",
      "user": "user789",
      "ideal": "Add a new comment to the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "DELETE",
      "operationId": "deleteComment",
      "summary": "",
      "user": "user321",
      "ideal": "Delete the comment with ID 10001 from the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "GET",
      "operationId": "getComment",
      "summary": "",
      "user": "user654",
      "ideal": "Retrieve the details of the comment with ID 10001 from the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "PUT",
      "operationId": "updateComment",
      "summary": "",
      "user": "user987",
      "ideal": "Update the comment with ID 10001 on the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/field/association",
      "method": "DELETE",
      "operationId": "removeAssociations",
      "summary": "",
      "user": "Project Manager removing a custom field association from a specific issue type to streamline the workflow.",
      "ideal": "Successfully removed the association of the custom field from the specified issue type."
    },
    {
      "path": "/rest/api/3/field/association",
      "method": "PUT",
      "operationId": "createAssociations",
      "summary": "",
      "user": "System Administrator creating a new association between a custom field and an issue type to ensure that the field appears in the relevant screens.",
      "ideal": "Successfully created the association of the custom field with the specified issue type."
    },
    {
      "path": "/rest/api/3/app/field/context/configuration/list",
      "method": "POST",
      "operationId": "getCustomFieldsConfigurations",
      "summary": "",
      "user": "As a project manager, I want to retrieve a list of custom field configurations for my Jira project so that I can ensure all necessary fields are set up correctly.",
      "ideal": "The API should return a list of custom field configurations, including field IDs, names, and their current settings."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "GET",
      "operationId": "getCustomFieldConfiguration",
      "summary": "",
      "user": "As a developer, I need to fetch the configuration details of a specific custom field by its ID or key to understand how it is being used in the project.",
      "ideal": "The API should return the configuration details of the specified custom field, including its context, options, and any associated settings."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "PUT",
      "operationId": "updateCustomFieldConfiguration",
      "summary": "",
      "user": "As a system administrator, I want to update the configuration of a custom field to modify its options and settings based on user feedback.",
      "ideal": "The API should accept the updated configuration data and return a success message along with the updated configuration details."
    },
    {
      "path": "/rest/api/3/field/10000/context",
      "method": "GET",
      "operationId": "getContextsForField",
      "summary": "",
      "user": "User A is retrieving the contexts for a custom field with ID 10000 to understand its configurations across different projects.",
      "ideal": "The response should contain a list of contexts associated with the specified custom field, including details like context ID, name, and applicable projects."
    },
    {
      "path": "/rest/api/3/field/10000/context",
      "method": "POST",
      "operationId": "createCustomFieldContext",
      "summary": "",
      "user": "User B wants to create a new context for a custom field to apply specific settings for a project.",
      "ideal": "The response should confirm the creation of the new context with its ID and details, indicating successful addition."
    },
    {
      "path": "/rest/api/3/field/10000/context/defaultValue",
      "method": "GET",
      "operationId": "getDefaultValues",
      "summary": "",
      "user": "User C is checking the default values set for a custom field to ensure they align with project requirements.",
      "ideal": "The response should return the current default values for the specified custom field, allowing the user to verify or adjust them."
    },
    {
      "path": "/rest/api/3/field/10000/context/defaultValue",
      "method": "PUT",
      "operationId": "setDefaultValues",
      "summary": "",
      "user": "User D needs to update the default values for a custom field to reflect new business rules.",
      "ideal": "The response should confirm the update of default values and provide the new values set for the custom field."
    },
    {
      "path": "/rest/api/3/field/10000/context/issuetypemapping",
      "method": "GET",
      "operationId": "getIssueTypeMappingsForContexts",
      "summary": "",
      "user": "User E is analyzing the issue type mappings for a custom field to ensure it is correctly configured for various issue types.",
      "ideal": "The response should include a mapping of issue types to contexts for the specified custom field, detailing which issue types are associated."
    },
    {
      "path": "/rest/api/3/field/10000/context/mapping",
      "method": "POST",
      "operationId": "getCustomFieldContextsForProjectsAndIssueTypes",
      "summary": "",
      "user": "User F is looking to retrieve contexts for a custom field based on specific projects and issue types to streamline configuration.",
      "ideal": "The response should return the relevant contexts that match the specified projects and issue types for the custom field."
    },
    {
      "path": "/rest/api/3/field/10000/context/projectmapping",
      "method": "GET",
      "operationId": "getProjectContextMapping",
      "summary": "",
      "user": "User G is interested in understanding how a custom field is mapped to different projects to manage visibility.",
      "ideal": "The response should provide a mapping of projects to the contexts of the specified custom field, indicating where it is used."
    },
    {
      "path": "/rest/api/3/field/10000/context/12345",
      "method": "DELETE",
      "operationId": "deleteCustomFieldContext",
      "summary": "",
      "user": "User H needs to remove an outdated context for a custom field that is no longer relevant to any project.",
      "ideal": "The response should confirm the successful deletion of the specified context, ensuring it is no longer available."
    },
    {
      "path": "/rest/api/3/field/10000/context/12345",
      "method": "PUT",
      "operationId": "updateCustomFieldContext",
      "summary": "",
      "user": "User I is updating the details of a specific context for a custom field to reflect new project requirements.",
      "ideal": "The response should confirm the update of the context with the new details provided, ensuring the context is correctly configured."
    },
    {
      "path": "/rest/api/3/field/10000/context/12345/issuetype",
      "method": "PUT",
      "operationId": "addIssueTypesToContext",
      "summary": "",
      "user": "User J wants to add new issue types to an existing context for a custom field to expand its applicability.",
      "ideal": "The response should confirm the addition of the new issue types to the specified context, detailing the updated mappings."
    },
    {
      "path": "/rest/api/3/field/10000/context/12345/issuetype/remove",
      "method": "POST",
      "operationId": "removeIssueTypesFromContext",
      "summary": "",
      "user": "User K is removing certain issue types from a context for a custom field to refine its usage.",
      "ideal": "The response should confirm the removal of the specified issue types from the context, ensuring the context is now updated."
    },
    {
      "path": "/rest/api/3/field/10000/context/12345/project",
      "method": "PUT",
      "operationId": "assignProjectsToCustomFieldContext",
      "summary": "",
      "user": "User L is assigning new projects to a context for a custom field to enhance its relevance.",
      "ideal": "The response should confirm the successful assignment of the new projects to the specified context, detailing the changes made."
    },
    {
      "path": "/rest/api/3/field/10000/context/12345/project/remove",
      "method": "POST",
      "operationId": "removeCustomFieldContextFromProjects",
      "summary": "",
      "user": "User M needs to remove a context from certain projects as they are no longer applicable.",
      "ideal": "The response should confirm the removal of the context from the specified projects, ensuring it is no longer associated."
    },
    {
      "path": "/rest/api/3/customFieldOption/12345",
      "method": "GET",
      "operationId": "getCustomFieldOption",
      "summary": "",
      "user": "User requests details of a specific custom field option using its ID.",
      "ideal": "Returns the details of the custom field option with ID 12345."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option",
      "method": "GET",
      "operationId": "getOptionsForContext",
      "summary": "",
      "user": "User wants to retrieve all options for a specific field context.",
      "ideal": "Returns a list of options available for the field with ID 10000 in context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option",
      "method": "POST",
      "operationId": "createCustomFieldOption",
      "summary": "",
      "user": "User is creating a new custom field option for a specific field context.",
      "ideal": "Creates a new custom field option in the context of field 10000 and context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option",
      "method": "PUT",
      "operationId": "updateCustomFieldOption",
      "summary": "",
      "user": "User wants to update an existing custom field option in a specific context.",
      "ideal": "Updates the custom field option in the context of field 10000 and context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option/move",
      "method": "PUT",
      "operationId": "reorderCustomFieldOptions",
      "summary": "",
      "user": "User is reordering custom field options for a specific field context.",
      "ideal": "Reorders the custom field options for field 10000 in context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option/12345",
      "method": "DELETE",
      "operationId": "deleteCustomFieldOption",
      "summary": "",
      "user": "User wants to delete a specific custom field option.",
      "ideal": "Deletes the custom field option with ID 12345 from field 10000 in context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option/12345/issue",
      "method": "DELETE",
      "operationId": "replaceCustomFieldOption",
      "summary": "",
      "user": "User is replacing a custom field option for issues in a specific context.",
      "ideal": "Replaces the custom field option with ID 12345 for issues in field 10000 and context 20000."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option",
      "method": "GET",
      "operationId": "getAllIssueFieldOptions",
      "summary": "",
      "user": "User A wants to retrieve all options for a custom field to display them in a dropdown for issue creation.",
      "ideal": "Returns a list of all options available for the specified custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option",
      "method": "POST",
      "operationId": "createIssueFieldOption",
      "summary": "",
      "user": "User B needs to add a new option to a custom field for better categorization of issues.",
      "ideal": "Creates a new option for the specified custom field and returns the created option details."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/suggestions/edit",
      "method": "GET",
      "operationId": "getSelectableIssueFieldOptions",
      "summary": "",
      "user": "User C is looking for editable options for a custom field to allow users to select from them.",
      "ideal": "Returns a list of selectable options for the specified custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/suggestions/search",
      "method": "GET",
      "operationId": "getVisibleIssueFieldOptions",
      "summary": "",
      "user": "User D wants to search for specific options in a custom field to streamline issue reporting.",
      "ideal": "Returns a list of visible options based on the search criteria for the specified custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "DELETE",
      "operationId": "deleteIssueFieldOption",
      "summary": "",
      "user": "User E needs to remove an outdated option from a custom field to prevent confusion.",
      "ideal": "Deletes the specified option from the custom field and confirms the deletion."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "GET",
      "operationId": "getIssueFieldOption",
      "summary": "",
      "user": "User F wants to view the details of a specific option in a custom field for auditing purposes.",
      "ideal": "Returns the details of the specified option in the custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "PUT",
      "operationId": "updateIssueFieldOption",
      "summary": "",
      "user": "User G needs to update the name of an existing option in a custom field to reflect recent changes.",
      "ideal": "Updates the specified option in the custom field and returns the updated option details."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345/issue",
      "method": "DELETE",
      "operationId": "replaceIssueFieldOption",
      "summary": "",
      "user": "User H wants to replace an option in a custom field with a new one to maintain relevance.",
      "ideal": "Replaces the specified option in the custom field with a new option and confirms the replacement."
    },
    {
      "path": "/rest/api/3/app/field/value",
      "method": "POST",
      "operationId": "updateMultipleCustomFieldValues",
      "summary": "",
      "user": "user123",
      "ideal": "Update multiple custom field values for a specific issue in Jira."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/value",
      "method": "PUT",
      "operationId": "updateCustomFieldValue",
      "summary": "",
      "user": "user456",
      "ideal": "Update a specific custom field value for an issue using its field ID or key."
    },
    {
      "path": "/rest/api/3/fieldconfiguration",
      "method": "GET",
      "operationId": "getAllFieldConfigurations",
      "summary": "",
      "user": "User A retrieves all field configurations to review the current setup for their project.",
      "ideal": "Returns a list of all field configurations with their details."
    },
    {
      "path": "/rest/api/3/fieldconfiguration",
      "method": "POST",
      "operationId": "createFieldConfiguration",
      "summary": "",
      "user": "User B creates a new field configuration to meet the requirements of a new project.",
      "ideal": "Successfully creates a new field configuration and returns its details."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}",
      "method": "DELETE",
      "operationId": "deleteFieldConfiguration",
      "summary": "",
      "user": "User C deletes an obsolete field configuration that is no longer in use.",
      "ideal": "Confirms the deletion of the specified field configuration."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}",
      "method": "PUT",
      "operationId": "updateFieldConfiguration",
      "summary": "",
      "user": "User D updates an existing field configuration to add new fields.",
      "ideal": "Successfully updates the field configuration and returns the updated details."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "GET",
      "operationId": "getFieldConfigurationItems",
      "summary": "",
      "user": "User E checks the fields associated with a specific field configuration.",
      "ideal": "Returns a list of fields linked to the specified field configuration."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "PUT",
      "operationId": "updateFieldConfigurationItems",
      "summary": "",
      "user": "User F updates the fields in a field configuration to reflect recent changes.",
      "ideal": "Successfully updates the field items and returns the updated list."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme",
      "method": "GET",
      "operationId": "getAllFieldConfigurationSchemes",
      "summary": "",
      "user": "User G retrieves all field configuration schemes to analyze their usage.",
      "ideal": "Returns a list of all field configuration schemes with their details."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme",
      "method": "POST",
      "operationId": "createFieldConfigurationScheme",
      "summary": "",
      "user": "User H creates a new field configuration scheme for a new project.",
      "ideal": "Successfully creates a new field configuration scheme and returns its details."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/mapping",
      "method": "GET",
      "operationId": "getFieldConfigurationSchemeMappings",
      "summary": "",
      "user": "User I checks the mappings of field configuration schemes to ensure they are correct.",
      "ideal": "Returns a list of mappings for field configuration schemes."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "GET",
      "operationId": "getFieldConfigurationSchemeProjectMapping",
      "summary": "",
      "user": "User J retrieves the project mapping for field configuration schemes.",
      "ideal": "Returns the project mapping details for field configuration schemes."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "PUT",
      "operationId": "assignFieldConfigurationSchemeToProject",
      "summary": "",
      "user": "User K assigns a field configuration scheme to a specific project.",
      "ideal": "Successfully assigns the field configuration scheme to the project."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "DELETE",
      "operationId": "deleteFieldConfigurationScheme",
      "summary": "",
      "user": "User L deletes an outdated field configuration scheme.",
      "ideal": "Confirms the deletion of the specified field configuration scheme."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "PUT",
      "operationId": "updateFieldConfigurationScheme",
      "summary": "",
      "user": "User M updates an existing field configuration scheme to include new settings.",
      "ideal": "Successfully updates the field configuration scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}/mapping",
      "method": "PUT",
      "operationId": "setFieldConfigurationSchemeMapping",
      "summary": "",
      "user": "User N sets the mapping for a field configuration scheme to align with project needs.",
      "ideal": "Successfully sets the mapping for the specified field configuration scheme."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete",
      "method": "POST",
      "operationId": "removeIssueTypesFromGlobalFieldConfigurationScheme",
      "summary": "",
      "user": "User O removes specific issue types from a global field configuration scheme.",
      "ideal": "Successfully removes the specified issue types from the global field configuration scheme."
    },
    {
      "path": "/rest/api/3/field",
      "method": "GET",
      "operationId": "getFields",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available fields in Jira to understand what data can be captured for my projects.",
      "ideal": "The API should return a list of all fields, including their IDs, names, and types, allowing me to see what options are available for my issue types."
    },
    {
      "path": "/rest/api/3/field",
      "method": "POST",
      "operationId": "createCustomField",
      "summary": "",
      "user": "As a product owner, I need to create a custom field for capturing user feedback, so I can gather specific insights from our users.",
      "ideal": "The API should successfully create a new custom field and return the field ID and details of the created field."
    },
    {
      "path": "/rest/api/3/field/search",
      "method": "GET",
      "operationId": "getFieldsPaginated",
      "summary": "",
      "user": "As a developer, I want to fetch fields in a paginated manner to efficiently handle large sets of data without overwhelming the client.",
      "ideal": "The API should return a paginated list of fields, including metadata about the total number of fields and the current page."
    },
    {
      "path": "/rest/api/3/field/search/trashed",
      "method": "GET",
      "operationId": "getTrashedFieldsPaginated",
      "summary": "",
      "user": "As an admin, I want to view trashed fields to decide which ones can be permanently deleted or restored.",
      "ideal": "The API should return a list of trashed fields with their details, allowing me to manage them effectively."
    },
    {
      "path": "/rest/api/3/field/{fieldId}",
      "method": "PUT",
      "operationId": "updateCustomField",
      "summary": "",
      "user": "As a team lead, I need to update an existing custom field to change its name and description based on team feedback.",
      "ideal": "The API should successfully update the custom field and return the updated field details."
    },
    {
      "path": "/rest/api/3/field/{fieldId}/contexts",
      "method": "GET",
      "operationId": "getContextsForFieldDeprecated",
      "summary": "",
      "user": "As a configuration manager, I want to retrieve contexts for a specific field to understand where it is applicable.",
      "ideal": "The API should return a list of contexts associated with the specified field, including their IDs and names."
    },
    {
      "path": "/rest/api/3/field/{id}",
      "method": "DELETE",
      "operationId": "deleteCustomField",
      "summary": "",
      "user": "As a project administrator, I want to delete a custom field that is no longer needed to keep our field list clean.",
      "ideal": "The API should successfully delete the specified custom field and return a confirmation message."
    },
    {
      "path": "/rest/api/3/field/{id}/restore",
      "method": "POST",
      "operationId": "restoreCustomField",
      "summary": "",
      "user": "As an admin, I accidentally trashed a custom field and need to restore it to make it available again.",
      "ideal": "The API should successfully restore the trashed custom field and return the restored field details."
    },
    {
      "path": "/rest/api/3/field/{id}/trash",
      "method": "POST",
      "operationId": "trashCustomField",
      "summary": "",
      "user": "As a product manager, I want to trash a custom field that is no longer relevant to avoid clutter in our field options.",
      "ideal": "The API should successfully move the specified custom field to the trash and return a confirmation message."
    },
    {
      "path": "/rest/api/3/issueLinkType",
      "method": "GET",
      "operationId": "getIssueLinkTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available issue link types in Jira to understand how issues can be related to each other.",
      "ideal": "The response should return a list of issue link types, including their IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/issueLinkType",
      "method": "POST",
      "operationId": "createIssueLinkType",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue link type to represent a specific relationship between issues in my project.",
      "ideal": "The response should confirm the creation of the new issue link type and return its ID, name, and description."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "DELETE",
      "operationId": "deleteIssueLinkType",
      "summary": "",
      "user": "As a project administrator, I want to delete an existing issue link type that is no longer needed to keep the issue linking clean.",
      "ideal": "The response should confirm the deletion of the issue link type and return a success message."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "GET",
      "operationId": "getIssueLinkType",
      "summary": "",
      "user": "As a developer, I want to retrieve details of a specific issue link type to understand its purpose and usage in the project.",
      "ideal": "The response should return the details of the specified issue link type, including its ID, name, and description."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "PUT",
      "operationId": "updateIssueLinkType",
      "summary": "",
      "user": "As a project lead, I want to update an existing issue link type to better reflect the relationship it represents after feedback from the team.",
      "ideal": "The response should confirm the update of the issue link type and return the updated details."
    },
    {
      "path": "/rest/api/3/issueLink",
      "method": "POST",
      "operationId": "linkIssues",
      "summary": "",
      "user": "As a project manager, I want to link related issues in Jira to maintain a clear relationship between tasks, ensuring that dependencies are tracked effectively.",
      "ideal": "Successfully creates a link between two issues with the specified link type."
    },
    {
      "path": "/rest/api/3/issueLink/{linkId}",
      "method": "DELETE",
      "operationId": "deleteIssueLink",
      "summary": "",
      "user": "As a developer, I need to remove a link between issues that are no longer relevant to avoid confusion in the project tracking.",
      "ideal": "Successfully deletes the specified issue link, confirming the removal."
    },
    {
      "path": "/rest/api/3/issueLink/{linkId}",
      "method": "GET",
      "operationId": "getIssueLink",
      "summary": "",
      "user": "As a team lead, I want to retrieve details about a specific issue link to understand the relationship between issues and their statuses.",
      "ideal": "Returns the details of the specified issue link, including the linked issues and the link type."
    },
    {
      "path": "/rest/api/3/settings/columns",
      "method": "GET",
      "operationId": "getIssueNavigatorDefaultColumns",
      "summary": "",
      "user": "As a project manager, I want to retrieve the default columns set for the issue navigator so that I can ensure the visibility of important fields for my team.",
      "ideal": "The API should return a list of default columns currently configured for the issue navigator, including their names and order."
    },
    {
      "path": "/rest/api/3/settings/columns",
      "method": "PUT",
      "operationId": "setIssueNavigatorDefaultColumns",
      "summary": "",
      "user": "As a product owner, I need to update the default columns in the issue navigator to include new fields that are critical for our workflow, ensuring my team has access to the most relevant information.",
      "ideal": "The API should accept a JSON payload with the updated column configuration and return a success message confirming the changes were applied."
    },
    {
      "path": "/rest/api/3/notificationscheme",
      "method": "GET",
      "operationId": "getNotificationSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all notification schemes to understand how notifications are currently configured across projects.",
      "ideal": "Returns a list of all notification schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/notificationscheme",
      "method": "POST",
      "operationId": "createNotificationScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new notification scheme to customize notifications for a new project.",
      "ideal": "Creates a new notification scheme and returns the details of the created scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/project",
      "method": "GET",
      "operationId": "getNotificationSchemeToProjectMappings",
      "summary": "",
      "user": "As a project lead, I want to see which notification schemes are mapped to my projects to ensure proper notifications are sent.",
      "ideal": "Returns a mapping of notification schemes to projects."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}",
      "method": "GET",
      "operationId": "getNotificationScheme",
      "summary": "",
      "user": "As a developer, I want to view the details of a specific notification scheme to understand its configuration.",
      "ideal": "Returns the details of the specified notification scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}",
      "method": "PUT",
      "operationId": "updateNotificationScheme",
      "summary": "",
      "user": "As a project administrator, I want to update an existing notification scheme to modify the recipients of notifications.",
      "ideal": "Updates the specified notification scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}/notification",
      "method": "PUT",
      "operationId": "addNotifications",
      "summary": "",
      "user": "As a project manager, I want to add new notifications to an existing scheme to ensure that all relevant stakeholders are informed.",
      "ideal": "Adds notifications to the specified notification scheme and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/{notificationSchemeId}",
      "method": "DELETE",
      "operationId": "deleteNotificationScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to delete an obsolete notification scheme to clean up the system.",
      "ideal": "Deletes the specified notification scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}",
      "method": "DELETE",
      "operationId": "removeNotificationFromNotificationScheme",
      "summary": "",
      "user": "As a project lead, I want to remove a specific notification from a scheme to prevent unnecessary alerts.",
      "ideal": "Removes the specified notification from the notification scheme and confirms the removal."
    },
    {
      "path": "/rest/api/3/priority",
      "method": "GET",
      "operationId": "getPriorities",
      "summary": "",
      "user": "As a project manager, I want to retrieve all priority levels available in Jira to ensure that my team can categorize tasks effectively.",
      "ideal": "Returns a list of all priority levels with their details."
    },
    {
      "path": "/rest/api/3/priority",
      "method": "POST",
      "operationId": "createPriority",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new priority level for urgent tasks so that my team can prioritize them accordingly.",
      "ideal": "Creates a new priority level and returns the created priority details."
    },
    {
      "path": "/rest/api/3/priority/default",
      "method": "PUT",
      "operationId": "setDefaultPriority",
      "summary": "",
      "user": "As a project lead, I want to set a default priority for new issues to streamline the issue creation process.",
      "ideal": "Sets the specified priority as the default and returns the updated priority details."
    },
    {
      "path": "/rest/api/3/priority/move",
      "method": "PUT",
      "operationId": "movePriorities",
      "summary": "",
      "user": "As a Jira administrator, I want to reorder the priority levels to reflect the new workflow of my team.",
      "ideal": "Reorders the priority levels and returns the updated list of priorities."
    },
    {
      "path": "/rest/api/3/priority/search",
      "method": "GET",
      "operationId": "searchPriorities",
      "summary": "",
      "user": "As a developer, I want to search for specific priority levels to find the one that matches my task requirements.",
      "ideal": "Returns a list of priority levels that match the search criteria."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "DELETE",
      "operationId": "deletePriority",
      "summary": "",
      "user": "As a project manager, I want to delete an obsolete priority level that is no longer relevant to our projects.",
      "ideal": "Deletes the specified priority level and confirms the deletion."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "GET",
      "operationId": "getPriority",
      "summary": "",
      "user": "As a team member, I want to retrieve details of a specific priority level to understand its significance in our workflow.",
      "ideal": "Returns the details of the specified priority level."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "PUT",
      "operationId": "updatePriority",
      "summary": "",
      "user": "As a Jira administrator, I want to update the details of an existing priority level to better reflect its importance.",
      "ideal": "Updates the specified priority level and returns the updated details."
    },
    {
      "path": "/rest/api/3/issue/properties",
      "method": "POST",
      "operationId": "bulkSetIssuesPropertiesList",
      "summary": "",
      "user": "As a project manager, I want to set properties for multiple issues at once to streamline the process of updating issue metadata.",
      "ideal": "Successfully sets properties for the specified list of issues."
    },
    {
      "path": "/rest/api/3/issue/properties/multi",
      "method": "POST",
      "operationId": "bulkSetIssuePropertiesByIssue",
      "summary": "",
      "user": "As a developer, I need to update properties for several issues simultaneously to ensure consistency across related tasks.",
      "ideal": "Updates the properties for the specified issues in bulk."
    },
    {
      "path": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "bulkDeleteIssueProperty",
      "summary": "",
      "user": "As a team lead, I want to remove a specific property from all issues to clean up outdated metadata.",
      "ideal": "Successfully deletes the specified property from all issues."
    },
    {
      "path": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "bulkSetIssueProperty",
      "summary": "",
      "user": "As a product owner, I want to set a new property for all issues in a project to reflect a new business requirement.",
      "ideal": "Successfully sets the specified property for all issues."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties",
      "method": "GET",
      "operationId": "getIssuePropertyKeys",
      "summary": "",
      "user": "As a QA engineer, I need to retrieve all property keys for an issue to understand its current metadata.",
      "ideal": "Returns a list of all property keys associated with the specified issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteIssueProperty",
      "summary": "",
      "user": "As a scrum master, I want to delete a specific property from an issue to remove irrelevant information.",
      "ideal": "Successfully deletes the specified property from the issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getIssueProperty",
      "summary": "",
      "user": "As a business analyst, I want to retrieve the value of a specific property for an issue to analyze its context.",
      "ideal": "Returns the value of the specified property for the issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setIssueProperty",
      "summary": "",
      "user": "As a developer, I need to set a property for an issue to track additional information relevant to the task.",
      "ideal": "Successfully sets the specified property for the issue."
    },
    {
      "path": "/rest/api/3/redact",
      "method": "POST",
      "operationId": "redact",
      "summary": "",
      "user": "A project manager wants to redact sensitive information from a document before sharing it with external stakeholders. They prepare the document and send a request to the API to redact specific fields.",
      "ideal": "The API successfully processes the redaction request and returns a confirmation that the redaction is in progress."
    },
    {
      "path": "/rest/api/3/redact/status/{jobId}",
      "method": "GET",
      "operationId": "getRedactionStatus",
      "summary": "",
      "user": "After submitting a redaction request, the project manager needs to check the status of the redaction job to ensure it has been completed before sharing the document.",
      "ideal": "The API returns the current status of the redaction job, indicating whether it is still in progress or has been completed successfully."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/remotelink",
      "method": "GET",
      "operationId": "getRemoteIssueLinks",
      "summary": "",
      "user": "User A wants to retrieve all remote issue links associated with the Jira issue PROJECT-123 to understand its connections with external resources.",
      "ideal": "The API should return a list of remote issue links for the specified issue, including details such as the global ID, title, and URL of each link."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/remotelink",
      "method": "POST",
      "operationId": "createOrUpdateRemoteIssueLink",
      "summary": "",
      "user": "User B needs to create a new remote issue link for issue PROJECT-123 to link it to an external tracking system.",
      "ideal": "The API should successfully create a new remote issue link and return the details of the created link, including its ID and the associated issue."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/remotelink/456",
      "method": "DELETE",
      "operationId": "deleteRemoteIssueLinkById",
      "summary": "",
      "user": "User C wants to remove a specific remote issue link with ID 456 from issue PROJECT-123 as it is no longer relevant.",
      "ideal": "The API should delete the specified remote issue link and confirm the deletion with a success message."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/remotelink/456",
      "method": "GET",
      "operationId": "getRemoteIssueLinkById",
      "summary": "",
      "user": "User D needs to retrieve details of the remote issue link with ID 456 for issue PROJECT-123 to verify its information.",
      "ideal": "The API should return the details of the specified remote issue link, including its title, URL, and any other relevant metadata."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/remotelink/456",
      "method": "PUT",
      "operationId": "updateRemoteIssueLink",
      "summary": "",
      "user": "User E wants to update the title and URL of the remote issue link with ID 456 for issue PROJECT-123 to reflect recent changes.",
      "ideal": "The API should successfully update the remote issue link and return the updated details, confirming the changes made."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/remotelink/{globalId}",
      "method": "DELETE",
      "operationId": "deleteRemoteIssueLinkByGlobalId",
      "summary": "",
      "user": "User F needs to delete a remote issue link identified by its global ID for issue PROJECT-123 as it is outdated.",
      "ideal": "The API should remove the remote issue link associated with the specified global ID and return a confirmation of the deletion."
    },
    {
      "path": "/rest/api/3/resolution",
      "method": "GET",
      "operationId": "getResolutions",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available resolutions in Jira to ensure I can assign the correct resolution to issues.",
      "ideal": "A successful response with a list of all resolutions, including their IDs and names."
    },
    {
      "path": "/rest/api/3/resolution",
      "method": "POST",
      "operationId": "createResolution",
      "summary": "",
      "user": "As a team lead, I want to create a new resolution for issues that are marked as 'Won't Fix' so that we can categorize issues appropriately.",
      "ideal": "A successful response confirming the creation of the new resolution with its ID and details."
    },
    {
      "path": "/rest/api/3/resolution/default",
      "method": "PUT",
      "operationId": "setDefaultResolution",
      "summary": "",
      "user": "As an administrator, I want to set a default resolution for all new issues to streamline the issue resolution process.",
      "ideal": "A successful response indicating that the default resolution has been updated."
    },
    {
      "path": "/rest/api/3/resolution/move",
      "method": "PUT",
      "operationId": "moveResolutions",
      "summary": "",
      "user": "As a project manager, I want to move multiple resolutions to a different category to better organize our issue tracking.",
      "ideal": "A successful response confirming that the resolutions have been moved."
    },
    {
      "path": "/rest/api/3/resolution/search",
      "method": "GET",
      "operationId": "searchResolutions",
      "summary": "",
      "user": "As a developer, I want to search for specific resolutions by name to quickly find the one I need to apply to an issue.",
      "ideal": "A successful response with a list of resolutions matching the search criteria."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "DELETE",
      "operationId": "deleteResolution",
      "summary": "",
      "user": "As an administrator, I want to delete a resolution that is no longer needed to keep our resolution list clean and relevant.",
      "ideal": "A successful response confirming that the resolution has been deleted."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "GET",
      "operationId": "getResolution",
      "summary": "",
      "user": "As a support agent, I want to retrieve details of a specific resolution to understand its purpose and usage.",
      "ideal": "A successful response with the details of the requested resolution."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "PUT",
      "operationId": "updateResolution",
      "summary": "",
      "user": "As a project manager, I want to update the name of an existing resolution to better reflect its meaning for our team.",
      "ideal": "A successful response confirming that the resolution has been updated."
    },
    {
      "path": "/rest/api/3/issue/picker",
      "method": "GET",
      "operationId": "getIssuePickerResource",
      "summary": "",
      "user": "A user looking to quickly find and select issues from a dropdown for a new task assignment.",
      "ideal": "Returns a list of issues that match the user's input for easy selection."
    },
    {
      "path": "/rest/api/3/jql/match",
      "method": "POST",
      "operationId": "matchIssues",
      "summary": "",
      "user": "A project manager wanting to match specific issues based on a JQL query to review their status.",
      "ideal": "Returns a list of issues that match the provided JQL criteria."
    },
    {
      "path": "/rest/api/3/search",
      "method": "GET",
      "operationId": "searchForIssuesUsingJql",
      "summary": "",
      "user": "A developer searching for all open bugs in a project to prioritize their work.",
      "ideal": "Returns a paginated list of issues that match the JQL query for open bugs."
    },
    {
      "path": "/rest/api/3/search",
      "method": "POST",
      "operationId": "searchForIssuesUsingJqlPost",
      "summary": "",
      "user": "A QA engineer submitting a complex JQL query to find issues related to a specific release.",
      "ideal": "Returns a detailed list of issues that match the submitted JQL query."
    },
    {
      "path": "/rest/api/3/search/approximate-count",
      "method": "POST",
      "operationId": "countIssues",
      "summary": "",
      "user": "A product owner wanting to quickly estimate the number of issues in a backlog without fetching all data.",
      "ideal": "Returns an approximate count of issues that match the given JQL query."
    },
    {
      "path": "/rest/api/3/search/jql",
      "method": "GET",
      "operationId": "searchAndReconsileIssuesUsingJql",
      "summary": "",
      "user": "A team lead reconciling issues from multiple projects to ensure no duplicates exist.",
      "ideal": "Returns a reconciled list of issues based on the provided JQL query."
    },
    {
      "path": "/rest/api/3/search/jql",
      "method": "POST",
      "operationId": "searchAndReconsileIssuesUsingJqlPost",
      "summary": "",
      "user": "An analyst wanting to run a JQL query to find issues across different projects and reconcile them.",
      "ideal": "Returns a consolidated view of issues that match the JQL query for analysis."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members",
      "method": "GET",
      "operationId": "getIssueSecurityLevelMembers",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the members associated with the specified issue security scheme."
    },
    {
      "path": "/rest/api/3/securitylevel/{id}",
      "method": "GET",
      "operationId": "getIssueSecurityLevel",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch details about a specific issue security level using its ID."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes",
      "method": "GET",
      "operationId": "getIssueSecuritySchemes",
      "summary": "",
      "user": "User requests to retrieve all issue security schemes available in the Jira Cloud platform.",
      "ideal": "Returns a list of issue security schemes with their details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes",
      "method": "POST",
      "operationId": "createIssueSecurityScheme",
      "summary": "",
      "user": "User wants to create a new issue security scheme with specific configurations.",
      "ideal": "Creates a new issue security scheme and returns its details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level",
      "method": "GET",
      "operationId": "getSecurityLevels",
      "summary": "",
      "user": "User requests to get all available security levels for issue security schemes.",
      "ideal": "Returns a list of security levels with their descriptions."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level/default",
      "method": "PUT",
      "operationId": "setDefaultLevels",
      "summary": "",
      "user": "User wants to set default security levels for issue security schemes.",
      "ideal": "Updates the default security levels and confirms the changes."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level/member",
      "method": "GET",
      "operationId": "getSecurityLevelMembers",
      "summary": "",
      "user": "User requests to retrieve members associated with specific security levels.",
      "ideal": "Returns a list of members for the specified security levels."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/project",
      "method": "GET",
      "operationId": "searchProjectsUsingSecuritySchemes",
      "summary": "",
      "user": "User wants to find projects that are using specific issue security schemes.",
      "ideal": "Returns a list of projects associated with the specified security schemes."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/project",
      "method": "PUT",
      "operationId": "associateSchemesToProjects",
      "summary": "",
      "user": "User wants to associate existing security schemes with specific projects.",
      "ideal": "Associates the specified security schemes to the projects and confirms the action."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/search",
      "method": "GET",
      "operationId": "searchSecuritySchemes",
      "summary": "",
      "user": "User requests to search for specific issue security schemes based on criteria.",
      "ideal": "Returns a filtered list of issue security schemes matching the search criteria."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "GET",
      "operationId": "getIssueSecurityScheme",
      "summary": "",
      "user": "User wants to retrieve details of a specific issue security scheme by its ID.",
      "ideal": "Returns the details of the specified issue security scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "PUT",
      "operationId": "updateIssueSecurityScheme",
      "summary": "",
      "user": "User wants to update the details of an existing issue security scheme.",
      "ideal": "Updates the specified issue security scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}",
      "method": "DELETE",
      "operationId": "deleteSecurityScheme",
      "summary": "",
      "user": "User requests to delete a specific issue security scheme by its ID.",
      "ideal": "Deletes the specified issue security scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level",
      "method": "PUT",
      "operationId": "addSecurityLevel",
      "summary": "",
      "user": "User wants to add a new security level to an existing issue security scheme.",
      "ideal": "Adds the new security level to the specified scheme and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "DELETE",
      "operationId": "removeLevel",
      "summary": "",
      "user": "User requests to remove a specific security level from an issue security scheme.",
      "ideal": "Removes the specified security level and confirms the action."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "PUT",
      "operationId": "updateSecurityLevel",
      "summary": "",
      "user": "User wants to update the details of a specific security level.",
      "ideal": "Updates the specified security level and returns the updated details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member",
      "method": "PUT",
      "operationId": "addSecurityLevelMembers",
      "summary": "",
      "user": "User wants to add members to a specific security level in an issue security scheme.",
      "ideal": "Adds the specified members to the security level and confirms the addition."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}",
      "method": "DELETE",
      "operationId": "removeMemberFromSecurityLevel",
      "summary": "",
      "user": "User requests to remove a specific member from a security level.",
      "ideal": "Removes the specified member from the security level and confirms the removal."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties",
      "method": "GET",
      "operationId": "getIssueTypePropertyKeys",
      "summary": "",
      "user": "As a project manager, I want to retrieve all custom properties associated with a specific issue type to understand its configuration and ensure it meets our project requirements.",
      "ideal": "The API should return a list of property keys associated with the specified issue type, allowing me to see all customizations made."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getIssueTypeProperty",
      "summary": "",
      "user": "As a developer, I need to fetch the value of a specific property for an issue type to verify its settings before implementing new features that depend on it.",
      "ideal": "The API should return the value of the specified property key for the given issue type, enabling me to confirm its current state."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setIssueTypeProperty",
      "summary": "",
      "user": "As a system administrator, I want to update a property for an issue type to reflect new organizational policies regarding issue tracking.",
      "ideal": "The API should successfully update the specified property key with the new value, confirming the change was applied."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeProperty",
      "summary": "",
      "user": "As a product owner, I need to remove an outdated property from an issue type to clean up our issue tracking system and avoid confusion.",
      "ideal": "The API should successfully delete the specified property key from the issue type, ensuring it is no longer accessible."
    },
    {
      "path": "/rest/api/3/issuetypescheme",
      "method": "GET",
      "operationId": "getAllIssueTypeSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue type schemes to understand the available configurations for my projects.",
      "ideal": "The response should return a list of all issue type schemes with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/issuetypescheme",
      "method": "POST",
      "operationId": "createIssueTypeScheme",
      "summary": "",
      "user": "As a project administrator, I want to create a new issue type scheme so that I can customize issue types for my projects.",
      "ideal": "The response should confirm the creation of the issue type scheme and return its ID and details."
    },
    {
      "path": "/rest/api/3/issuetypescheme/mapping",
      "method": "GET",
      "operationId": "getIssueTypeSchemesMapping",
      "summary": "",
      "user": "As a developer, I need to get the mapping of issue type schemes to projects to ensure proper issue categorization.",
      "ideal": "The response should provide a mapping of issue type schemes to their associated projects."
    },
    {
      "path": "/rest/api/3/issuetypescheme/project",
      "method": "GET",
      "operationId": "getIssueTypeSchemeForProjects",
      "summary": "",
      "user": "As a project lead, I want to find out which issue type scheme is assigned to my project to manage issues effectively.",
      "ideal": "The response should return the issue type scheme assigned to the specified project."
    },
    {
      "path": "/rest/api/3/issuetypescheme/project",
      "method": "PUT",
      "operationId": "assignIssueTypeSchemeToProject",
      "summary": "",
      "user": "As a project manager, I want to assign a specific issue type scheme to my project to standardize issue handling.",
      "ideal": "The response should confirm the assignment of the issue type scheme to the project."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeScheme",
      "summary": "",
      "user": "As an administrator, I want to delete an issue type scheme that is no longer needed to keep the system organized.",
      "ideal": "The response should confirm the deletion of the specified issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "PUT",
      "operationId": "updateIssueTypeScheme",
      "summary": "",
      "user": "As a project administrator, I want to update an existing issue type scheme to reflect changes in project requirements.",
      "ideal": "The response should confirm the update and return the updated details of the issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype",
      "method": "PUT",
      "operationId": "addIssueTypesToIssueTypeScheme",
      "summary": "",
      "user": "As a project manager, I want to add new issue types to an existing issue type scheme to enhance project flexibility.",
      "ideal": "The response should confirm the addition of the new issue types to the specified issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move",
      "method": "PUT",
      "operationId": "reorderIssueTypesInIssueTypeScheme",
      "summary": "",
      "user": "As a project lead, I want to reorder issue types within an issue type scheme to prioritize certain issues.",
      "ideal": "The response should confirm the new order of issue types in the specified issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}",
      "method": "DELETE",
      "operationId": "removeIssueTypeFromIssueTypeScheme",
      "summary": "",
      "user": "As an administrator, I want to remove an issue type from an issue type scheme to streamline the issue management process.",
      "ideal": "The response should confirm the removal of the specified issue type from the issue type scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue type screen schemes to understand how issues are displayed in different contexts.",
      "ideal": "A successful response with a list of issue type screen schemes, including their IDs and names."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme",
      "method": "POST",
      "operationId": "createIssueTypeScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type screen scheme to customize the issue creation process for my team.",
      "ideal": "A successful response indicating the creation of the issue type screen scheme with its ID and details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/mapping",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemeMappings",
      "summary": "",
      "user": "As a developer, I need to check the mappings of issue type screen schemes to ensure that the correct screens are associated with each issue type.",
      "ideal": "A successful response with a list of mappings between issue types and their corresponding screen schemes."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/project",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemeProjectAssociations",
      "summary": "",
      "user": "As a project lead, I want to see which projects are associated with specific issue type screen schemes to manage project configurations effectively.",
      "ideal": "A successful response listing projects associated with the specified issue type screen schemes."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/project",
      "method": "PUT",
      "operationId": "assignIssueTypeScreenSchemeToProject",
      "summary": "",
      "user": "As a Jira administrator, I want to assign an issue type screen scheme to a project to ensure that the project uses the correct screens for issues.",
      "ideal": "A successful response confirming the assignment of the issue type screen scheme to the specified project."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to delete an obsolete issue type screen scheme to keep the system clean and organized.",
      "ideal": "A successful response confirming the deletion of the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "PUT",
      "operationId": "updateIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to update an existing issue type screen scheme to reflect changes in our issue handling process.",
      "ideal": "A successful response indicating that the issue type screen scheme has been updated with the new details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping",
      "method": "PUT",
      "operationId": "appendMappingsForIssueTypeScreenScheme",
      "summary": "",
      "user": "As a developer, I want to append new mappings to an existing issue type screen scheme to include additional issue types.",
      "ideal": "A successful response confirming that the new mappings have been added to the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default",
      "method": "PUT",
      "operationId": "updateDefaultScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to update the default screen scheme for an issue type screen scheme to ensure consistency across projects.",
      "ideal": "A successful response confirming that the default screen scheme has been updated."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove",
      "method": "POST",
      "operationId": "removeMappingsFromIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project lead, I want to remove specific mappings from an issue type screen scheme to streamline the issue creation process.",
      "ideal": "A successful response confirming that the specified mappings have been removed from the issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project",
      "method": "GET",
      "operationId": "getProjectsForIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to retrieve all projects associated with a specific issue type screen scheme to analyze its usage.",
      "ideal": "A successful response listing all projects linked to the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetype",
      "method": "GET",
      "operationId": "getIssueAllTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue types available in Jira to understand the categorization of tasks.",
      "ideal": "Retrieve a list of all issue types with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/issuetype",
      "method": "POST",
      "operationId": "createIssueType",
      "summary": "",
      "user": "As a product owner, I need to create a new issue type for feature requests to better manage our backlog.",
      "ideal": "Create a new issue type with a specified name and description."
    },
    {
      "path": "/rest/api/3/issuetype/project",
      "method": "GET",
      "operationId": "getIssueTypesForProject",
      "summary": "",
      "user": "As a team lead, I want to see which issue types are available for my project to ensure we are using the correct categories.",
      "ideal": "Retrieve a list of issue types specific to the given project."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "DELETE",
      "operationId": "deleteIssueType",
      "summary": "",
      "user": "As an admin, I need to delete an obsolete issue type that is no longer relevant to our workflow.",
      "ideal": "Successfully delete the specified issue type from the system."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "GET",
      "operationId": "getIssueType",
      "summary": "",
      "user": "As a developer, I want to fetch details of a specific issue type to understand its configuration and usage.",
      "ideal": "Retrieve detailed information about the specified issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "PUT",
      "operationId": "updateIssueType",
      "summary": "",
      "user": "As a project administrator, I need to update the name and description of an existing issue type to reflect recent changes.",
      "ideal": "Update the specified issue type with new name and description."
    },
    {
      "path": "/rest/api/3/issuetype/{id}/alternatives",
      "method": "GET",
      "operationId": "getAlternativeIssueTypes",
      "summary": "",
      "user": "As a business analyst, I want to find alternative issue types for a given type to suggest better categorization options.",
      "ideal": "Retrieve a list of alternative issue types for the specified issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{id}/avatar2",
      "method": "POST",
      "operationId": "createIssueTypeAvatar",
      "summary": "",
      "user": "As a designer, I want to upload a custom avatar for a new issue type to enhance its visibility in the project.",
      "ideal": "Successfully upload an avatar for the specified issue type."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/votes",
      "method": "GET",
      "operationId": "getVotes",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve the current votes for the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/votes",
      "method": "POST",
      "operationId": "addVote",
      "summary": "",
      "user": "User456",
      "ideal": "Add a vote to the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/votes",
      "method": "DELETE",
      "operationId": "removeVote",
      "summary": "",
      "user": "User789",
      "ideal": "Remove the vote from the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/watching",
      "method": "POST",
      "operationId": "getIsWatchingIssueBulk",
      "summary": "",
      "user": "user123",
      "ideal": "Check if the user is watching multiple issues at once."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "GET",
      "operationId": "getIssueWatchers",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieve a list of users watching a specific issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "POST",
      "operationId": "addWatcher",
      "summary": "",
      "user": "user789",
      "ideal": "Add the user to the watchers of a specific issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "DELETE",
      "operationId": "removeWatcher",
      "summary": "",
      "user": "user101",
      "ideal": "Remove the user from the watchers of a specific issue."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/456/properties",
      "method": "GET",
      "operationId": "getWorklogPropertyKeys",
      "summary": "",
      "user": "User wants to retrieve all property keys associated with a specific worklog for issue ABC-123.",
      "ideal": "Returns a list of property keys for the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/456/properties/priority",
      "method": "DELETE",
      "operationId": "deleteWorklogProperty",
      "summary": "",
      "user": "User wants to delete the 'priority' property from the worklog of issue ABC-123.",
      "ideal": "Successfully deletes the specified property from the worklog."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/456/properties/priority",
      "method": "GET",
      "operationId": "getWorklogProperty",
      "summary": "",
      "user": "User wants to fetch the value of the 'priority' property for the worklog of issue ABC-123.",
      "ideal": "Returns the value of the 'priority' property for the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/456/properties/priority",
      "method": "PUT",
      "operationId": "setWorklogProperty",
      "summary": "",
      "user": "User wants to set the 'priority' property to 'high' for the worklog of issue ABC-123.",
      "ideal": "Successfully updates the 'priority' property for the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog",
      "method": "GET",
      "operationId": "getIssueWorklog",
      "summary": "",
      "user": "User requests to retrieve all worklogs associated with issue PROJ-123 to review the time spent on the project.",
      "ideal": "Returns a list of worklogs for the specified issue, including details such as time spent and author."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog",
      "method": "POST",
      "operationId": "addWorklog",
      "summary": "",
      "user": "User wants to log 3 hours of work on issue PROJ-123 for the task completed yesterday.",
      "ideal": "Successfully adds a worklog entry for the specified issue with the provided time and date."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456",
      "method": "PUT",
      "operationId": "updateWorklog",
      "summary": "",
      "user": "User needs to update the worklog with ID 456 for issue PROJ-123 to reflect 4 hours instead of 3.",
      "ideal": "Updates the specified worklog entry with the new time and details."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/456",
      "method": "DELETE",
      "operationId": "deleteWorklog",
      "summary": "",
      "user": "User mistakenly logged a worklog for issue PROJ-123 and wants to delete the entry with ID 456.",
      "ideal": "Successfully deletes the specified worklog entry from the issue."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/move",
      "method": "POST",
      "operationId": "bulkMoveWorklogs",
      "summary": "",
      "user": "User needs to move multiple worklogs from issue PROJ-123 to issue PROJ-456 due to a project reorganization.",
      "ideal": "Successfully moves the specified worklogs to the new issue."
    },
    {
      "path": "/rest/api/3/worklog/deleted",
      "method": "GET",
      "operationId": "getIdsOfWorklogsDeletedSince",
      "summary": "",
      "user": "User wants to check which worklogs have been deleted since a specific date to maintain accurate records.",
      "ideal": "Returns a list of IDs of worklogs that have been deleted since the specified date."
    },
    {
      "path": "/rest/api/3/worklog/updated",
      "method": "GET",
      "operationId": "getIdsOfWorklogsModifiedSince",
      "summary": "",
      "user": "User is interested in knowing which worklogs have been modified since last week to ensure updates are tracked.",
      "ideal": "Returns a list of IDs of worklogs that have been modified since the specified date."
    },
    {
      "path": "/rest/api/3/worklog/list",
      "method": "POST",
      "operationId": "getWorklogsForIds",
      "summary": "",
      "user": "User has a list of worklog IDs and wants to retrieve their details for reporting purposes.",
      "ideal": "Returns detailed information for the specified worklog IDs."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/789",
      "method": "GET",
      "operationId": "getWorklog",
      "summary": "",
      "user": "User wants to view the details of a specific worklog with ID 789 for issue PROJ-123.",
      "ideal": "Returns the details of the specified worklog entry."
    },
    {
      "path": "/rest/api/3/issue/PROJ-123/worklog/bulkDelete",
      "method": "DELETE",
      "operationId": "bulkDeleteWorklogs",
      "summary": "",
      "user": "User needs to delete multiple worklogs for issue PROJ-123 due to a project update.",
      "ideal": "Successfully deletes all specified worklogs for the issue."
    },
    {
      "path": "/rest/api/3/issue",
      "method": "POST",
      "operationId": "createIssue",
      "summary": "",
      "user": "User A creates a new issue for the project.",
      "ideal": "The issue is successfully created with a unique ID."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "GET",
      "operationId": "getIssue",
      "summary": "",
      "user": "User B retrieves the details of an existing issue.",
      "ideal": "The issue details are returned with all relevant fields."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "GET",
      "operationId": "getTransitions",
      "summary": "",
      "user": "User C checks the available transitions for an issue.",
      "ideal": "A list of possible transitions is returned."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "POST",
      "operationId": "doTransition",
      "summary": "",
      "user": "User D transitions an issue to the next status.",
      "ideal": "The issue status is updated successfully."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/changelog",
      "method": "GET",
      "operationId": "getChangeLogs",
      "summary": "",
      "user": "User E wants to see the changelog of an issue.",
      "ideal": "The changelog is returned with all changes made."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/editmeta",
      "method": "GET",
      "operationId": "getEditIssueMeta",
      "summary": "",
      "user": "User F retrieves metadata for editing an issue.",
      "ideal": "The edit metadata is returned with valid fields."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/notify",
      "method": "POST",
      "operationId": "notify",
      "summary": "",
      "user": "User G sends notifications about an issue.",
      "ideal": "Notifications are sent successfully to the specified users."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/assignee",
      "method": "PUT",
      "operationId": "assignIssue",
      "summary": "",
      "user": "User H assigns an issue to a team member.",
      "ideal": "The issue is successfully assigned to the new assignee."
    },
    {
      "path": "/rest/api/3/issue/archive",
      "method": "PUT",
      "operationId": "archiveIssues",
      "summary": "",
      "user": "User I archives completed issues.",
      "ideal": "The issues are archived successfully."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "PUT",
      "operationId": "editIssue",
      "summary": "",
      "user": "User J updates the details of an existing issue.",
      "ideal": "The issue is updated successfully with new details."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "DELETE",
      "operationId": "deleteIssue",
      "summary": "",
      "user": "User K deletes an issue that is no longer needed.",
      "ideal": "The issue is deleted successfully."
    },
    {
      "path": "/rest/api/3/issue/createmeta",
      "method": "GET",
      "operationId": "getCreateIssueMeta",
      "summary": "",
      "user": "User L retrieves metadata for creating issues.",
      "ideal": "The create issue metadata is returned with valid fields."
    },
    {
      "path": "/rest/api/3/issue/limit/report",
      "method": "GET",
      "operationId": "getIssueLimitReport",
      "summary": "",
      "user": "User M checks the issue limit report for the project.",
      "ideal": "The issue limit report is returned with current limits."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata",
      "method": "GET",
      "operationId": "getAutoComplete",
      "summary": "",
      "user": "User wants to retrieve autocomplete suggestions for JQL queries to enhance their search experience in Jira.",
      "ideal": "The API should return a list of possible JQL keywords and fields based on the user's input."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata",
      "method": "POST",
      "operationId": "getAutoCompletePost",
      "summary": "",
      "user": "User submits a JQL query string to get autocomplete suggestions for fields and values.",
      "ideal": "The API should return relevant autocomplete suggestions based on the provided JQL query."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata/suggestions",
      "method": "GET",
      "operationId": "getFieldAutoCompleteForQueryString",
      "summary": "",
      "user": "User is looking for specific field suggestions to complete their JQL query.",
      "ideal": "The API should return a list of field suggestions that match the user's query string."
    },
    {
      "path": "/rest/api/3/jql/parse",
      "method": "POST",
      "operationId": "parseJqlQueries",
      "summary": "",
      "user": "User wants to parse a complex JQL query to understand its structure and components.",
      "ideal": "The API should return a structured representation of the parsed JQL query."
    },
    {
      "path": "/rest/api/3/jql/pdcleaner",
      "method": "POST",
      "operationId": "migrateQueries",
      "summary": "",
      "user": "User needs to migrate legacy JQL queries to the new format supported by Jira.",
      "ideal": "The API should return the migrated queries in the new format without losing any information."
    },
    {
      "path": "/rest/api/3/jql/sanitize",
      "method": "POST",
      "operationId": "sanitiseJqlQueries",
      "summary": "",
      "user": "User wants to sanitize their JQL queries to ensure they are safe and free from errors.",
      "ideal": "The API should return sanitized JQL queries that are safe to execute."
    },
    {
      "path": "/rest/api/3/jql/function/computation",
      "method": "GET",
      "operationId": "getPrecomputations",
      "summary": "",
      "user": "As a project manager, I want to retrieve all precomputations available in the Jira system to analyze their performance and usage across different projects.",
      "ideal": "The API should return a list of all precomputations with their details, including IDs, names, and associated projects."
    },
    {
      "path": "/rest/api/3/jql/function/computation",
      "method": "POST",
      "operationId": "updatePrecomputations",
      "summary": "",
      "user": "As a data analyst, I need to update existing precomputations to reflect the latest changes in our data model and ensure accurate reporting.",
      "ideal": "The API should accept a payload with updated precomputation details and return a success message along with the updated precomputation object."
    },
    {
      "path": "/rest/api/3/jql/function/computation/search",
      "method": "POST",
      "operationId": "getPrecomputationsByID",
      "summary": "",
      "user": "As a developer, I want to search for specific precomputations by their IDs to quickly access their configurations and make necessary adjustments.",
      "ideal": "The API should return the precomputation details for the specified ID, including its parameters and any associated metadata."
    },
    {
      "path": "/rest/api/3/expression/analyse",
      "method": "POST",
      "operationId": "analyseExpression",
      "summary": "",
      "user": "{\"expression\": \"issue.key == 'JRA-123'\"}",
      "ideal": "{\"valid\": true, \"errors\": [], \"warnings\": []}"
    },
    {
      "path": "/rest/api/3/expression/eval",
      "method": "POST",
      "operationId": "evaluateJiraExpression",
      "summary": "",
      "user": "{\"expression\": \"issue.status.name == 'Done'\"}",
      "ideal": "{\"result\": true}"
    },
    {
      "path": "/rest/api/3/expression/evaluate",
      "method": "POST",
      "operationId": "evaluateJSISJiraExpression",
      "summary": "",
      "user": "{\"expression\": \"project = 'MYPROJECT' AND status = 'In Progress'\"}",
      "ideal": "{\"result\": [{\"key\": \"JRA-456\", \"fields\": {\"status\": \"In Progress\"}}]}"
    },
    {
      "path": "/rest/api/3/application-properties",
      "method": "GET",
      "operationId": "getApplicationProperty",
      "summary": "",
      "user": "User requests the application properties to check the current settings and configurations of the Jira Cloud platform.",
      "ideal": "Returns a list of application properties with their current values."
    },
    {
      "path": "/rest/api/3/application-properties/advanced-settings",
      "method": "GET",
      "operationId": "getAdvancedSettings",
      "summary": "",
      "user": "User wants to retrieve advanced settings to understand the deeper configuration options available for the application.",
      "ideal": "Returns advanced settings related to the application properties."
    },
    {
      "path": "/rest/api/3/application-properties/{id}",
      "method": "PUT",
      "operationId": "setApplicationProperty",
      "summary": "",
      "user": "User updates a specific application property to modify the behavior of the Jira application.",
      "ideal": "Successfully updates the specified application property and returns the updated value."
    },
    {
      "path": "/rest/api/3/configuration",
      "method": "GET",
      "operationId": "getConfiguration",
      "summary": "",
      "user": "User checks the current configuration settings of the Jira instance to ensure everything is set up correctly.",
      "ideal": "Returns the current configuration settings of the Jira application."
    },
    {
      "path": "/rest/api/3/label",
      "method": "GET",
      "operationId": "getAllLabels",
      "summary": "",
      "user": "A project manager looking to retrieve all labels used in the Jira Cloud project to ensure proper categorization of issues and streamline the workflow.",
      "ideal": "Returns a list of all labels available in the Jira Cloud project, allowing the user to manage and utilize labels effectively for issue tracking."
    },
    {
      "path": "/rest/api/3/instance/license",
      "method": "GET",
      "operationId": "getLicense",
      "summary": "",
      "user": "User requests the current license information for their Jira Cloud instance to verify the active subscription and its details.",
      "ideal": "Returns the license information including the type of license, the number of users allowed, and the expiration date."
    },
    {
      "path": "/rest/api/3/license/approximateLicenseCount",
      "method": "GET",
      "operationId": "getApproximateLicenseCount",
      "summary": "",
      "user": "User wants to know the approximate number of licenses currently in use across the Jira Cloud instance for planning purposes.",
      "ideal": "Returns an approximate count of the licenses in use, helping the user assess their current usage against their license limits."
    },
    {
      "path": "/rest/api/3/license/approximateLicenseCount/product/{applicationKey}",
      "method": "GET",
      "operationId": "getApproximateApplicationLicenseCount",
      "summary": "",
      "user": "User queries the approximate license count for a specific application within their Jira Cloud instance to ensure compliance with licensing agreements.",
      "ideal": "Returns the approximate number of licenses in use for the specified application, allowing the user to manage their application usage effectively."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "DELETE",
      "operationId": "removePreference",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully removed user preference."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "GET",
      "operationId": "getPreference",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieved user preferences successfully."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "PUT",
      "operationId": "setPreference",
      "summary": "",
      "user": "user789",
      "ideal": "User preferences updated successfully."
    },
    {
      "path": "/rest/api/3/mypreferences/locale",
      "method": "GET",
      "operationId": "getLocale",
      "summary": "",
      "user": "user101",
      "ideal": "Retrieved user locale successfully."
    },
    {
      "path": "/rest/api/3/mypreferences/locale",
      "method": "PUT",
      "operationId": "setLocale",
      "summary": "",
      "user": "user202",
      "ideal": "User locale set successfully."
    },
    {
      "path": "/rest/api/3/myself",
      "method": "GET",
      "operationId": "getCurrentUser",
      "summary": "",
      "user": "user303",
      "ideal": "Retrieved current user information successfully."
    },
    {
      "path": "/rest/api/3/permissionscheme",
      "method": "GET",
      "operationId": "getAllPermissionSchemes",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all permission schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/permissionscheme",
      "method": "POST",
      "operationId": "createPermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new permission scheme with specified parameters."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "DELETE",
      "operationId": "deletePermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Delete the specified permission scheme by its ID."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "GET",
      "operationId": "getPermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve details of a specific permission scheme by its ID."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "PUT",
      "operationId": "updatePermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Update the specified permission scheme with new details."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "GET",
      "operationId": "getPermissionSchemeGrants",
      "summary": "",
      "user": "admin",
      "ideal": "Get all permission grants associated with a specific permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "POST",
      "operationId": "createPermissionGrant",
      "summary": "",
      "user": "admin",
      "ideal": "Add a new permission grant to the specified permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "DELETE",
      "operationId": "deletePermissionSchemeEntity",
      "summary": "",
      "user": "admin",
      "ideal": "Remove a specific permission grant from the permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "GET",
      "operationId": "getPermissionSchemeGrant",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve details of a specific permission grant by its ID within a permission scheme."
    },
    {
      "path": "/rest/api/3/mypermissions",
      "method": "GET",
      "operationId": "getMyPermissions",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the permissions of the current user to ensure they have the necessary access rights for various operations."
    },
    {
      "path": "/rest/api/3/permissions",
      "method": "GET",
      "operationId": "getAllPermissions",
      "summary": "",
      "user": "adminUser",
      "ideal": "Fetch a comprehensive list of all permissions available in the Jira instance to manage user roles effectively."
    },
    {
      "path": "/rest/api/3/permissions/check",
      "method": "POST",
      "operationId": "getBulkPermissions",
      "summary": "",
      "user": "projectManager",
      "ideal": "Check multiple permissions for a list of users to ensure they have the required access for a specific project."
    },
    {
      "path": "/rest/api/3/permissions/project",
      "method": "POST",
      "operationId": "getPermittedProjects",
      "summary": "",
      "user": "teamLead",
      "ideal": "Retrieve a list of projects that a user has permissions to access, aiding in project management and resource allocation."
    },
    {
      "path": "/rest/api/3/plans/plan",
      "method": "GET",
      "operationId": "getPlans",
      "summary": "",
      "user": "As a project manager, I want to retrieve all plans to review the current project timelines and resources allocated.",
      "ideal": "The response should return a list of all plans with their details including ID, name, and status."
    },
    {
      "path": "/rest/api/3/plans/plan",
      "method": "POST",
      "operationId": "createPlan",
      "summary": "",
      "user": "As a project manager, I want to create a new plan for the upcoming project to ensure all tasks are organized.",
      "ideal": "The response should confirm the creation of the plan with its ID and initial details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}",
      "method": "GET",
      "operationId": "getPlan",
      "summary": "",
      "user": "As a team lead, I want to view the details of a specific plan to understand its objectives and deadlines.",
      "ideal": "The response should return the details of the specified plan including tasks, deadlines, and team members."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}",
      "method": "PUT",
      "operationId": "updatePlan",
      "summary": "",
      "user": "As a project manager, I want to update the plan details to reflect changes in project scope and timelines.",
      "ideal": "The response should confirm the update and return the updated plan details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/archive",
      "method": "PUT",
      "operationId": "archivePlan",
      "summary": "",
      "user": "As a project manager, I want to archive completed plans to keep the workspace organized.",
      "ideal": "The response should confirm that the plan has been archived successfully."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/duplicate",
      "method": "POST",
      "operationId": "duplicatePlan",
      "summary": "",
      "user": "As a project manager, I want to duplicate an existing plan to create a new plan with similar tasks and timelines.",
      "ideal": "The response should return the details of the newly created duplicate plan."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/trash",
      "method": "PUT",
      "operationId": "trashPlan",
      "summary": "",
      "user": "As a project manager, I want to move outdated plans to trash to declutter my project list.",
      "ideal": "The response should confirm that the plan has been moved to trash successfully."
    },
    {
      "path": "/rest/api/3/priorityscheme",
      "method": "GET",
      "operationId": "getPrioritySchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all priority schemes available in Jira so that I can understand how priorities are organized across different projects.",
      "ideal": "The response should include a list of all priority schemes with their IDs and names."
    },
    {
      "path": "/rest/api/3/priorityscheme",
      "method": "POST",
      "operationId": "createPriorityScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new priority scheme to better manage the priorities for my team's projects.",
      "ideal": "The response should confirm the creation of the priority scheme and return its ID and name."
    },
    {
      "path": "/rest/api/3/priorityscheme/mappings",
      "method": "POST",
      "operationId": "suggestedPrioritiesForMappings",
      "summary": "",
      "user": "As a developer, I want to get suggested priorities for a set of mappings to ensure that my issues are prioritized correctly.",
      "ideal": "The response should provide a list of suggested priorities based on the provided mappings."
    },
    {
      "path": "/rest/api/3/priorityscheme/priorities/available",
      "method": "GET",
      "operationId": "getAvailablePrioritiesByPriorityScheme",
      "summary": "",
      "user": "As a product owner, I want to see the available priorities for a specific priority scheme to make informed decisions on issue prioritization.",
      "ideal": "The response should list all available priorities for the specified priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}",
      "method": "DELETE",
      "operationId": "deletePriorityScheme",
      "summary": "",
      "user": "As a project administrator, I want to delete an obsolete priority scheme to keep our Jira instance clean and organized.",
      "ideal": "The response should confirm the deletion of the priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}",
      "method": "PUT",
      "operationId": "updatePriorityScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to update an existing priority scheme to reflect changes in our project priorities.",
      "ideal": "The response should confirm the update and return the updated priority scheme details."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}/priorities",
      "method": "GET",
      "operationId": "getPrioritiesByPriorityScheme",
      "summary": "",
      "user": "As a team lead, I want to retrieve the priorities associated with a specific priority scheme to understand how tasks are prioritized.",
      "ideal": "The response should include a list of priorities linked to the specified priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}/projects",
      "method": "GET",
      "operationId": "getProjectsByPriorityScheme",
      "summary": "",
      "user": "As a project manager, I want to find out which projects are using a specific priority scheme to assess its impact on project management.",
      "ideal": "The response should list all projects associated with the specified priority scheme."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatar",
      "method": "PUT",
      "operationId": "updateProjectAvatar",
      "summary": "",
      "user": "user123",
      "ideal": "Update the avatar for the project with ID 'PROJ-1' using a new image."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatar/{id}",
      "method": "DELETE",
      "operationId": "deleteProjectAvatar",
      "summary": "",
      "user": "user456",
      "ideal": "Delete the avatar with ID '12345' for the project 'PROJ-2'."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatar2",
      "method": "POST",
      "operationId": "createProjectAvatar",
      "summary": "",
      "user": "user789",
      "ideal": "Create a new avatar for the project 'PROJ-3' using the provided image file."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/avatars",
      "method": "GET",
      "operationId": "getAllProjectAvatars",
      "summary": "",
      "user": "user101",
      "ideal": "Retrieve all avatars associated with the project 'PROJ-4'."
    },
    {
      "path": "/rest/api/3/projectCategory",
      "method": "GET",
      "operationId": "getAllProjectCategories",
      "summary": "",
      "user": "As a project manager, I want to retrieve all project categories to organize my projects effectively.",
      "ideal": "The response should return a list of all project categories with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/projectCategory",
      "method": "POST",
      "operationId": "createProjectCategory",
      "summary": "",
      "user": "As a team lead, I want to create a new project category for my team to better categorize our projects.",
      "ideal": "The response should confirm the creation of the project category and return the new category's ID and name."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "DELETE",
      "operationId": "removeProjectCategory",
      "summary": "",
      "user": "As an administrator, I want to delete a project category that is no longer needed to keep the project list clean.",
      "ideal": "The response should confirm the deletion of the project category and return a success message."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "GET",
      "operationId": "getProjectCategoryById",
      "summary": "",
      "user": "As a project manager, I want to retrieve details of a specific project category to understand its purpose and usage.",
      "ideal": "The response should return the details of the specified project category, including its ID and name."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "PUT",
      "operationId": "updateProjectCategory",
      "summary": "",
      "user": "As a project coordinator, I want to update the name of an existing project category to reflect recent changes in our project structure.",
      "ideal": "The response should confirm the update of the project category and return the updated category's details."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "DELETE",
      "operationId": "removeDefaultProjectClassification",
      "summary": "",
      "user": "admin_user",
      "ideal": "Successfully removed the default classification level for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "GET",
      "operationId": "getDefaultProjectClassification",
      "summary": "",
      "user": "project_manager",
      "ideal": "Retrieved the current default classification level for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "PUT",
      "operationId": "updateDefaultProjectClassification",
      "summary": "",
      "user": "project_admin",
      "ideal": "Successfully updated the default classification level for the specified project."
    },
    {
      "path": "/rest/api/3/component",
      "method": "GET",
      "operationId": "findComponentsForProjects",
      "summary": "",
      "user": "As a project manager, I want to retrieve all components associated with my projects to ensure that I have a clear understanding of the project's structure and dependencies.",
      "ideal": "The API should return a list of components, including their IDs, names, and descriptions, for the specified projects."
    },
    {
      "path": "/rest/api/3/component",
      "method": "POST",
      "operationId": "createComponent",
      "summary": "",
      "user": "As a developer, I want to create a new component for my project so that I can organize my work and track issues related to that component.",
      "ideal": "The API should accept the component details (name, description, etc.) and return the newly created component's ID and details."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "DELETE",
      "operationId": "deleteComponent",
      "summary": "",
      "user": "As a project administrator, I want to delete a component that is no longer needed to keep the project clean and organized.",
      "ideal": "The API should confirm the deletion of the component and return a success message."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "GET",
      "operationId": "getComponent",
      "summary": "",
      "user": "As a team lead, I want to retrieve detailed information about a specific component to understand its purpose and usage within the project.",
      "ideal": "The API should return the component's details, including its name, description, and associated issues."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "PUT",
      "operationId": "updateComponent",
      "summary": "",
      "user": "As a developer, I want to update the details of an existing component to reflect changes in its functionality or ownership.",
      "ideal": "The API should accept the updated component details and return the updated component's information."
    },
    {
      "path": "/rest/api/3/component/{id}/relatedIssueCounts",
      "method": "GET",
      "operationId": "getComponentRelatedIssues",
      "summary": "",
      "user": "As a project manager, I want to see how many issues are related to a specific component to prioritize our work effectively.",
      "ideal": "The API should return a count of issues related to the specified component, categorized by their status."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/component",
      "method": "GET",
      "operationId": "getProjectComponentsPaginated",
      "summary": "",
      "user": "As a scrum master, I want to retrieve components for a project in a paginated format to manage large sets of data efficiently.",
      "ideal": "The API should return a paginated list of components for the specified project, including metadata for pagination."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/components",
      "method": "GET",
      "operationId": "getProjectComponents",
      "summary": "",
      "user": "As a developer, I want to get all components of a project in one request to quickly assess the project's structure.",
      "ideal": "The API should return a complete list of components for the specified project, including their IDs and names."
    },
    {
      "path": "/rest/api/3/project/{projectId}/email",
      "method": "GET",
      "operationId": "getProjectEmail",
      "summary": "",
      "user": "A project manager wants to retrieve the email address associated with a specific Jira project to ensure that notifications are sent to the correct team members.",
      "ideal": "The response should return the email address linked to the project identified by {projectId}."
    },
    {
      "path": "/rest/api/3/project/{projectId}/email",
      "method": "PUT",
      "operationId": "updateProjectEmail",
      "summary": "",
      "user": "A project administrator needs to update the email address for a project to reflect a new contact point for project-related communications.",
      "ideal": "The response should confirm that the email address for the project identified by {projectId} has been successfully updated."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/features",
      "method": "GET",
      "operationId": "getFeaturesForProject",
      "summary": "",
      "user": "Project Manager",
      "ideal": "Retrieve the list of features available for a specific project identified by its ID or key."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/features/{featureKey}",
      "method": "PUT",
      "operationId": "toggleFeatureForProject",
      "summary": "",
      "user": "Developer",
      "ideal": "Enable or disable a specific feature for a project using its ID or key and the feature's key."
    },
    {
      "path": "/rest/api/3/projectvalidate/key",
      "method": "GET",
      "operationId": "validateProjectKey",
      "summary": "",
      "user": "A project manager wants to ensure that the project key 'PROJ123' is valid before creating a new project in Jira.",
      "ideal": "The API should return a response indicating whether 'PROJ123' is a valid project key, along with any relevant error messages if it is not."
    },
    {
      "path": "/rest/api/3/projectvalidate/validProjectKey",
      "method": "GET",
      "operationId": "getValidProjectKey",
      "summary": "",
      "user": "A developer needs to check if the project key 'DEV456' is valid for a new project setup in Jira.",
      "ideal": "The API should return a confirmation that 'DEV456' is a valid project key, allowing the developer to proceed with project creation."
    },
    {
      "path": "/rest/api/3/projectvalidate/validProjectName",
      "method": "GET",
      "operationId": "getValidProjectName",
      "summary": "",
      "user": "A team lead is looking to create a new project named 'New Development Project' and wants to verify if the name is valid according to Jira's naming conventions.",
      "ideal": "The API should return a response indicating whether 'New Development Project' is a valid project name, including any suggestions for adjustments if it is not."
    },
    {
      "path": "/rest/api/3/project/ABC/issuesecuritylevelscheme",
      "method": "GET",
      "operationId": "getProjectIssueSecurityScheme",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve the issue security level scheme for project ABC."
    },
    {
      "path": "/rest/api/3/project/XYZ/permissionscheme",
      "method": "GET",
      "operationId": "getAssignedPermissionScheme",
      "summary": "",
      "user": "User456",
      "ideal": "Get the permission scheme assigned to project XYZ."
    },
    {
      "path": "/rest/api/3/project/DEF/permissionscheme",
      "method": "PUT",
      "operationId": "assignPermissionScheme",
      "summary": "",
      "user": "User789",
      "ideal": "Assign a new permission scheme to project DEF."
    },
    {
      "path": "/rest/api/3/project/GHI/securitylevel",
      "method": "GET",
      "operationId": "getSecurityLevelsForProject",
      "summary": "",
      "user": "User101",
      "ideal": "Fetch the security levels configured for project GHI."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties",
      "method": "GET",
      "operationId": "getProjectPropertyKeys",
      "summary": "",
      "user": "User requests to retrieve all property keys associated with the project identified by 'PROJ-123'.",
      "ideal": "Returns a list of property keys for the specified project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties/customProperty",
      "method": "DELETE",
      "operationId": "deleteProjectProperty",
      "summary": "",
      "user": "User wants to delete the property 'customProperty' from project 'PROJ-123'.",
      "ideal": "Confirms that the property 'customProperty' has been successfully deleted from the project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties/customProperty",
      "method": "GET",
      "operationId": "getProjectProperty",
      "summary": "",
      "user": "User queries the value of the property 'customProperty' for project 'PROJ-123'.",
      "ideal": "Returns the value of 'customProperty' for the specified project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/properties/customProperty",
      "method": "PUT",
      "operationId": "setProjectProperty",
      "summary": "",
      "user": "User wants to set the value of 'customProperty' to 'newValue' for project 'PROJ-123'.",
      "ideal": "Confirms that 'customProperty' has been updated to 'newValue' for the project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "DELETE",
      "operationId": "deleteActor",
      "summary": "",
      "user": "admin_user",
      "ideal": "Successfully removed the actor from the specified project role."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "POST",
      "operationId": "addActorUsers",
      "summary": "",
      "user": "project_manager",
      "ideal": "Successfully added users to the specified project role."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "PUT",
      "operationId": "setActors",
      "summary": "",
      "user": "team_lead",
      "ideal": "Successfully updated the actors for the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "DELETE",
      "operationId": "deleteProjectRoleActorsFromRole",
      "summary": "",
      "user": "admin_user",
      "ideal": "Successfully deleted actors from the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "GET",
      "operationId": "getProjectRoleActorsForRole",
      "summary": "",
      "user": "project_manager",
      "ideal": "Successfully retrieved the list of actors for the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "POST",
      "operationId": "addProjectRoleActorsToRole",
      "summary": "",
      "user": "team_lead",
      "ideal": "Successfully added actors to the specified project role."
    },
    {
      "path": "/rest/api/3/project/TEST/role",
      "method": "GET",
      "operationId": "getProjectRoles",
      "summary": "",
      "user": "As a project manager, I want to retrieve all roles associated with the project identified by 'TEST' so that I can manage team permissions effectively.",
      "ideal": "Returns a list of roles for the specified project."
    },
    {
      "path": "/rest/api/3/project/TEST/role/10000",
      "method": "GET",
      "operationId": "getProjectRole",
      "summary": "",
      "user": "As a developer, I need to get details about the specific role with ID '10000' in the 'TEST' project to understand its permissions.",
      "ideal": "Returns the details of the specified project role."
    },
    {
      "path": "/rest/api/3/project/TEST/roledetails",
      "method": "GET",
      "operationId": "getProjectRoleDetails",
      "summary": "",
      "user": "As a team lead, I want to see detailed information about the roles in the 'TEST' project to ensure all team members have the correct access.",
      "ideal": "Returns detailed information about all roles in the specified project."
    },
    {
      "path": "/rest/api/3/role",
      "method": "GET",
      "operationId": "getAllProjectRoles",
      "summary": "",
      "user": "As an administrator, I want to retrieve all project roles available in the system to manage role assignments across projects.",
      "ideal": "Returns a list of all project roles in the system."
    },
    {
      "path": "/rest/api/3/role",
      "method": "POST",
      "operationId": "createProjectRole",
      "summary": "",
      "user": "As a project manager, I need to create a new project role named 'QA Tester' to facilitate the testing process in our projects.",
      "ideal": "Creates a new project role and returns its details."
    },
    {
      "path": "/rest/api/3/role/10000",
      "method": "DELETE",
      "operationId": "deleteProjectRole",
      "summary": "",
      "user": "As an administrator, I want to delete the project role with ID '10000' as it is no longer needed in any projects.",
      "ideal": "Deletes the specified project role."
    },
    {
      "path": "/rest/api/3/role/10000",
      "method": "GET",
      "operationId": "getProjectRoleById",
      "summary": "",
      "user": "As a project manager, I want to retrieve the role with ID '10000' to review its permissions before making changes.",
      "ideal": "Returns the details of the specified project role by ID."
    },
    {
      "path": "/rest/api/3/role/10000",
      "method": "POST",
      "operationId": "partialUpdateProjectRole",
      "summary": "",
      "user": "As a project lead, I need to update the description of the role with ID '10000' to better reflect its responsibilities.",
      "ideal": "Partially updates the specified project role and returns the updated details."
    },
    {
      "path": "/rest/api/3/role/10000",
      "method": "PUT",
      "operationId": "fullyUpdateProjectRole",
      "summary": "",
      "user": "As an administrator, I want to fully update the role with ID '10000' to change its name and permissions for better clarity.",
      "ideal": "Fully updates the specified project role and returns the updated role details."
    },
    {
      "path": "/rest/api/3/project-template",
      "method": "POST",
      "operationId": "createProjectWithCustomTemplate",
      "summary": "",
      "user": "As a project manager, I want to create a new project using a custom template so that I can streamline the setup process.",
      "ideal": "The API should successfully create a new project based on the specified template and return the project details."
    },
    {
      "path": "/rest/api/3/project-template/edit-template",
      "method": "PUT",
      "operationId": "editTemplate",
      "summary": "",
      "user": "As a template designer, I want to edit an existing project template to update its configurations and improve usability.",
      "ideal": "The API should update the specified template and return the updated template details."
    },
    {
      "path": "/rest/api/3/project-template/live-template",
      "method": "GET",
      "operationId": "liveTemplate",
      "summary": "",
      "user": "As a developer, I want to retrieve the live project template to ensure I am using the latest version for my project.",
      "ideal": "The API should return the current live template details, including any recent changes."
    },
    {
      "path": "/rest/api/3/project-template/remove-template",
      "method": "DELETE",
      "operationId": "removeTemplate",
      "summary": "",
      "user": "As an administrator, I want to remove an outdated project template to keep the template list clean and relevant.",
      "ideal": "The API should successfully delete the specified template and confirm the deletion."
    },
    {
      "path": "/rest/api/3/project-template/save-template",
      "method": "POST",
      "operationId": "saveTemplate",
      "summary": "",
      "user": "As a project coordinator, I want to save a new project template so that it can be reused for future projects.",
      "ideal": "The API should save the new template and return the details of the saved template."
    },
    {
      "path": "/rest/api/3/project/type",
      "method": "GET",
      "operationId": "getAllProjectTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available project types in Jira so that I can choose the appropriate type for my new project.",
      "ideal": "The API should return a list of all project types, including their keys and names, allowing me to understand the options available."
    },
    {
      "path": "/rest/api/3/project/type/accessible",
      "method": "GET",
      "operationId": "getAllAccessibleProjectTypes",
      "summary": "",
      "user": "As a team member, I need to see all project types that I have access to, so I can create or manage projects relevant to my role.",
      "ideal": "The API should return a list of project types that are accessible to the user, including necessary details to identify them."
    },
    {
      "path": "/rest/api/3/project/type/{projectTypeKey}",
      "method": "GET",
      "operationId": "getProjectTypeByKey",
      "summary": "",
      "user": "As a developer, I want to get detailed information about a specific project type using its key, so I can understand its configuration and capabilities.",
      "ideal": "The API should return detailed information about the specified project type, including its name, description, and any associated settings."
    },
    {
      "path": "/rest/api/3/project/type/{projectTypeKey}/accessible",
      "method": "GET",
      "operationId": "getAccessibleProjectTypeByKey",
      "summary": "",
      "user": "As a project administrator, I need to check if a specific project type is accessible to my team, so I can ensure they can create projects.",
      "ideal": "The API should return a confirmation of accessibility for the specified project type, along with any relevant permissions or restrictions."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/version",
      "method": "GET",
      "operationId": "getProjectVersionsPaginated",
      "summary": "",
      "user": "User requests to retrieve all versions associated with project PROJ-123 to check the progress of ongoing releases.",
      "ideal": "Returns a paginated list of versions for the specified project."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/versions",
      "method": "GET",
      "operationId": "getProjectVersions",
      "summary": "",
      "user": "User wants to see all versions of project PROJ-123 to plan for upcoming releases.",
      "ideal": "Returns a complete list of versions for the specified project."
    },
    {
      "path": "/rest/api/3/version",
      "method": "POST",
      "operationId": "createVersion",
      "summary": "",
      "user": "User creates a new version '1.0.0' for project PROJ-123 to mark the first stable release.",
      "ideal": "Successfully creates a new version and returns the version details."
    },
    {
      "path": "/rest/api/3/version/456",
      "method": "DELETE",
      "operationId": "deleteVersion",
      "summary": "",
      "user": "User deletes version with ID 456 as it is no longer needed for project PROJ-123.",
      "ideal": "Successfully deletes the specified version."
    },
    {
      "path": "/rest/api/3/version/456",
      "method": "GET",
      "operationId": "getVersion",
      "summary": "",
      "user": "User retrieves details of version with ID 456 to review its attributes before making changes.",
      "ideal": "Returns the details of the specified version."
    },
    {
      "path": "/rest/api/3/version/456",
      "method": "PUT",
      "operationId": "updateVersion",
      "summary": "",
      "user": "User updates version 456 to change its name to '1.0.1' and adjust the release date.",
      "ideal": "Successfully updates the version and returns the updated details."
    },
    {
      "path": "/rest/api/3/version/456/mergeto/789",
      "method": "PUT",
      "operationId": "mergeVersions",
      "summary": "",
      "user": "User merges version 456 into version 789 to consolidate releases.",
      "ideal": "Successfully merges the specified versions."
    },
    {
      "path": "/rest/api/3/version/456/move",
      "method": "POST",
      "operationId": "moveVersion",
      "summary": "",
      "user": "User moves version 456 to a different project to better organize releases.",
      "ideal": "Successfully moves the version to the specified project."
    },
    {
      "path": "/rest/api/3/version/456/relatedIssueCounts",
      "method": "GET",
      "operationId": "getVersionRelatedIssues",
      "summary": "",
      "user": "User checks how many issues are related to version 456 to assess its impact.",
      "ideal": "Returns the count of issues related to the specified version."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork",
      "method": "GET",
      "operationId": "getRelatedWork",
      "summary": "",
      "user": "User retrieves related work items for version 456 to understand dependencies.",
      "ideal": "Returns a list of related work for the specified version."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork",
      "method": "POST",
      "operationId": "createRelatedWork",
      "summary": "",
      "user": "User adds a new related work item to version 456 to track additional tasks.",
      "ideal": "Successfully creates a related work item for the specified version."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork",
      "method": "PUT",
      "operationId": "updateRelatedWork",
      "summary": "",
      "user": "User updates a related work item for version 456 to reflect changes in task status.",
      "ideal": "Successfully updates the related work item."
    },
    {
      "path": "/rest/api/3/version/456/removeAndSwap",
      "method": "POST",
      "operationId": "deleteAndReplaceVersion",
      "summary": "",
      "user": "User deletes version 456 and replaces it with a new version to streamline releases.",
      "ideal": "Successfully deletes the old version and replaces it with the new one."
    },
    {
      "path": "/rest/api/3/version/456/unresolvedIssueCount",
      "method": "GET",
      "operationId": "getVersionUnresolvedIssues",
      "summary": "",
      "user": "User checks the count of unresolved issues for version 456 to prioritize fixes.",
      "ideal": "Returns the count of unresolved issues for the specified version."
    },
    {
      "path": "/rest/api/3/version/456/relatedwork/789",
      "method": "DELETE",
      "operationId": "deleteRelatedWork",
      "summary": "",
      "user": "User deletes related work item with ID 789 from version 456 as it is no longer relevant.",
      "ideal": "Successfully deletes the specified related work item."
    },
    {
      "path": "/rest/api/3/project",
      "method": "GET",
      "operationId": "getAllProjects",
      "summary": "",
      "user": "As a project manager, I want to retrieve a list of all projects in the Jira Cloud platform so that I can review their statuses and manage resources effectively.",
      "ideal": "The API should return a JSON array of all projects, including their IDs, names, and statuses."
    },
    {
      "path": "/rest/api/3/project",
      "method": "POST",
      "operationId": "createProject",
      "summary": "",
      "user": "As a team lead, I want to create a new project in Jira so that my team can start tracking tasks and issues.",
      "ideal": "The API should accept a JSON object with project details and return the created project's ID and status."
    },
    {
      "path": "/rest/api/3/project/recent",
      "method": "GET",
      "operationId": "getRecent",
      "summary": "",
      "user": "As a user, I want to see the most recently accessed projects so that I can quickly navigate to them.",
      "ideal": "The API should return a list of recently accessed projects with their IDs and names."
    },
    {
      "path": "/rest/api/3/project/search",
      "method": "GET",
      "operationId": "searchProjects",
      "summary": "",
      "user": "As a developer, I want to search for specific projects by name or key so that I can find the project I need to work on.",
      "ideal": "The API should return a filtered list of projects matching the search criteria."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "DELETE",
      "operationId": "deleteProject",
      "summary": "",
      "user": "As an administrator, I want to delete a project that is no longer needed to keep the Jira environment clean.",
      "ideal": "The API should confirm the deletion of the project and return a success message."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "GET",
      "operationId": "getProject",
      "summary": "",
      "user": "As a project manager, I want to retrieve detailed information about a specific project to assess its progress.",
      "ideal": "The API should return a JSON object with all relevant details of the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "PUT",
      "operationId": "updateProject",
      "summary": "",
      "user": "As a project owner, I want to update the details of my project to reflect changes in scope or team members.",
      "ideal": "The API should accept updated project details and return the updated project's information."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/archive",
      "method": "POST",
      "operationId": "archiveProject",
      "summary": "",
      "user": "As a project manager, I want to archive a completed project to keep my project list organized.",
      "ideal": "The API should confirm the archiving of the project and return a success message."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/delete",
      "method": "POST",
      "operationId": "deleteProjectAsynchronously",
      "summary": "",
      "user": "As an administrator, I want to delete a project asynchronously to avoid blocking the UI while the operation completes.",
      "ideal": "The API should initiate the deletion process and return a job ID for tracking the status."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/restore",
      "method": "POST",
      "operationId": "restore",
      "summary": "",
      "user": "As a project manager, I want to restore a previously archived project in case it is needed again.",
      "ideal": "The API should confirm the restoration of the project and return the project's current status."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/statuses",
      "method": "GET",
      "operationId": "getAllStatuses",
      "summary": "",
      "user": "As a developer, I want to retrieve all statuses associated with a project to understand its workflow.",
      "ideal": "The API should return a list of statuses with their IDs and names."
    },
    {
      "path": "/rest/api/3/project/{projectId}/hierarchy",
      "method": "GET",
      "operationId": "getHierarchy",
      "summary": "",
      "user": "As a project manager, I want to view the hierarchy of tasks within a project to better manage dependencies.",
      "ideal": "The API should return a structured representation of the project's task hierarchy."
    },
    {
      "path": "/rest/api/3/project/{projectKeyOrId}/notificationscheme",
      "method": "GET",
      "operationId": "getNotificationSchemeForProject",
      "summary": "",
      "user": "As an administrator, I want to check the notification scheme for a project to ensure the right stakeholders are informed.",
      "ideal": "The API should return the notification scheme details associated with the specified project."
    },
    {
      "path": "/rest/api/3/screenscheme",
      "method": "GET",
      "operationId": "getScreenSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all screen schemes in order to understand how issues are displayed across different projects.",
      "ideal": "The API should return a list of all screen schemes with their respective IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/screenscheme",
      "method": "POST",
      "operationId": "createScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new screen scheme to customize how issues are presented in my project.",
      "ideal": "The API should successfully create a new screen scheme and return the ID, name, and details of the created scheme."
    },
    {
      "path": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "DELETE",
      "operationId": "deleteScreenScheme",
      "summary": "",
      "user": "As a project administrator, I want to delete an obsolete screen scheme to keep the project clean and organized.",
      "ideal": "The API should confirm the deletion of the specified screen scheme and return a success message."
    },
    {
      "path": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "PUT",
      "operationId": "updateScreenScheme",
      "summary": "",
      "user": "As a team lead, I want to update an existing screen scheme to reflect the new workflow requirements of my team.",
      "ideal": "The API should successfully update the screen scheme and return the updated details including the new configuration."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields",
      "method": "GET",
      "operationId": "getAllScreenTabFields",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve all fields associated with the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields",
      "method": "POST",
      "operationId": "addScreenTabField",
      "summary": "",
      "user": "User456",
      "ideal": "Add a new field to the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields/3001",
      "method": "DELETE",
      "operationId": "removeScreenTabField",
      "summary": "",
      "user": "User789",
      "ideal": "Remove the specified field from the screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields/3001/move",
      "method": "POST",
      "operationId": "moveScreenTabField",
      "summary": "",
      "user": "User101",
      "ideal": "Move the specified field to a new position within the screen tab."
    },
    {
      "path": "/rest/api/3/screens/tabs",
      "method": "GET",
      "operationId": "getBulkScreenTabs",
      "summary": "",
      "user": "As a project manager, I want to retrieve all screen tabs available in the Jira Cloud platform to understand the layout of my project's screens.",
      "ideal": "The API should return a list of all screen tabs with their respective details, such as tab IDs and names."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs",
      "method": "GET",
      "operationId": "getAllScreenTabs",
      "summary": "",
      "user": "As a developer, I need to get all tabs for a specific screen to ensure I am aware of all the fields available for that screen.",
      "ideal": "The API should return a list of tabs associated with the specified screen ID, including their names and positions."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs",
      "method": "POST",
      "operationId": "addScreenTab",
      "summary": "",
      "user": "As a product owner, I want to add a new tab to a specific screen to organize my fields better.",
      "ideal": "The API should successfully create a new tab and return the details of the newly created tab, including its ID and name."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "DELETE",
      "operationId": "deleteScreenTab",
      "summary": "",
      "user": "As a team lead, I need to remove an unnecessary tab from a screen to streamline the user interface.",
      "ideal": "The API should confirm the deletion of the specified tab and return a success message."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "PUT",
      "operationId": "renameScreenTab",
      "summary": "",
      "user": "As a UX designer, I want to rename a tab to better reflect its purpose for the users.",
      "ideal": "The API should update the tab's name and return the updated tab details, confirming the change."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
      "method": "POST",
      "operationId": "moveScreenTab",
      "summary": "",
      "user": "As a scrum master, I want to rearrange the order of tabs on a screen to improve the workflow for my team.",
      "ideal": "The API should successfully move the specified tab to the new position and return the updated order of tabs."
    },
    {
      "path": "/rest/api/3/field/{fieldId}/screens",
      "method": "GET",
      "operationId": "getScreensForField",
      "summary": "",
      "user": "User requests to see which screens a specific field is associated with.",
      "ideal": "Returns a list of screens that include the specified field."
    },
    {
      "path": "/rest/api/3/screens",
      "method": "GET",
      "operationId": "getScreens",
      "summary": "",
      "user": "User wants to retrieve all available screens in the Jira instance.",
      "ideal": "Returns a list of all screens with their details."
    },
    {
      "path": "/rest/api/3/screens",
      "method": "POST",
      "operationId": "createScreen",
      "summary": "",
      "user": "User needs to create a new screen for issue types.",
      "ideal": "Returns the newly created screen's details including its ID."
    },
    {
      "path": "/rest/api/3/screens/addToDefault/{fieldId}",
      "method": "POST",
      "operationId": "addFieldToDefaultScreen",
      "summary": "",
      "user": "User wants to add a field to the default screen.",
      "ideal": "Confirms that the field has been successfully added to the default screen."
    },
    {
      "path": "/rest/api/3/screens/{screenId}",
      "method": "DELETE",
      "operationId": "deleteScreen",
      "summary": "",
      "user": "User intends to delete a specific screen that is no longer needed.",
      "ideal": "Confirms that the screen has been successfully deleted."
    },
    {
      "path": "/rest/api/3/screens/{screenId}",
      "method": "PUT",
      "operationId": "updateScreen",
      "summary": "",
      "user": "User wants to update the name and description of an existing screen.",
      "ideal": "Returns the updated screen's details."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/availableFields",
      "method": "GET",
      "operationId": "getAvailableScreenFields",
      "summary": "",
      "user": "User is looking for fields that can be added to a specific screen.",
      "ideal": "Returns a list of fields that are available for the specified screen."
    },
    {
      "path": "/rest/api/3/serverInfo",
      "method": "GET",
      "operationId": "getServerInfo",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve server information including version, build number, and other relevant details."
    },
    {
      "path": "/rest/atlassian-connect/1/service-registry",
      "method": "GET",
      "operationId": "ServiceRegistryResource.services_get",
      "summary": "",
      "user": "As a Jira administrator, I want to retrieve the list of services registered with the Atlassian Connect framework so that I can manage integrations effectively.",
      "ideal": "The API should return a JSON array of services, including their IDs, names, and statuses, allowing me to see which services are currently active and available for use."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "GET",
      "operationId": "getStatusesById",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current statuses available in Jira to understand the workflow stages.",
      "ideal": "Retrieve a list of all statuses in the system."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "POST",
      "operationId": "createStatuses",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new status called 'In Review' to enhance our workflow.",
      "ideal": "Create a new status in the Jira system."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}",
      "method": "PUT",
      "operationId": "updateStatuses",
      "summary": "",
      "user": "As a team lead, I want to update the status 'In Progress' to 'In Development' to better reflect our workflow.",
      "ideal": "Update the existing status with the new name."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/project/{projectId}/issueTypeUsages",
      "method": "GET",
      "operationId": "getProjectIssueTypeUsagesForStatus",
      "summary": "",
      "user": "As a product owner, I want to see which issue types are associated with the 'Done' status in my project.",
      "ideal": "Retrieve issue type usages for a specific status in a project."
    },
    {
      "path": "/rest/api/3/statuses/byNames",
      "method": "GET",
      "operationId": "getStatusesByName",
      "summary": "",
      "user": "As a developer, I want to fetch statuses by their names to ensure I am using the correct identifiers in my API calls.",
      "ideal": "Retrieve statuses based on their names."
    },
    {
      "path": "/rest/api/3/statuses/search",
      "method": "GET",
      "operationId": "search",
      "summary": "",
      "user": "As a QA engineer, I want to search for statuses that contain the word 'Test' to find relevant statuses for my testing process.",
      "ideal": "Search for statuses based on a query."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForStatus",
      "summary": "",
      "user": "As an operations manager, I want to know which projects are using the 'Blocked' status to assess its impact.",
      "ideal": "Retrieve all projects that utilize a specific status."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/workflowUsages",
      "method": "GET",
      "operationId": "getWorkflowUsagesForStatus",
      "summary": "",
      "user": "As a business analyst, I want to find out which workflows include the 'In Progress' status to analyze our process flows.",
      "ideal": "Retrieve workflows that include a specific status."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}",
      "method": "DELETE",
      "operationId": "deleteStatusesById",
      "summary": "",
      "user": "As a system administrator, I want to delete the obsolete status 'Archived' to clean up our status list.",
      "ideal": "Remove a specific status from the system."
    },
    {
      "path": "/rest/api/3/task/12345",
      "method": "GET",
      "operationId": "getTask",
      "summary": "",
      "user": "Alice is a project manager who needs to check the details of a specific task in Jira to ensure it is on track for completion. She uses the task ID 12345 to retrieve the task information.",
      "ideal": "The API should return the task details including its status, assignee, due date, and any comments associated with it."
    },
    {
      "path": "/rest/api/3/task/12345/cancel",
      "method": "POST",
      "operationId": "cancelTask",
      "summary": "",
      "user": "Bob is a team member who realizes that the task with ID 12345 is no longer relevant due to a change in project scope. He wants to cancel the task to avoid confusion.",
      "ideal": "The API should successfully cancel the task and return a confirmation message indicating that the task has been canceled."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team",
      "method": "GET",
      "operationId": "getTeams",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the list of teams associated with the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian",
      "method": "POST",
      "operationId": "addAtlassianTeam",
      "summary": "",
      "user": "user456",
      "ideal": "Add a new Atlassian team to the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian/789",
      "method": "DELETE",
      "operationId": "removeAtlassianTeam",
      "summary": "",
      "user": "user789",
      "ideal": "Remove the specified Atlassian team from the plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian/789",
      "method": "GET",
      "operationId": "getAtlassianTeam",
      "summary": "",
      "user": "user101",
      "ideal": "Retrieve details of the specified Atlassian team."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian/789",
      "method": "PUT",
      "operationId": "updateAtlassianTeam",
      "summary": "",
      "user": "user202",
      "ideal": "Update the details of the specified Atlassian team."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly",
      "method": "POST",
      "operationId": "createPlanOnlyTeam",
      "summary": "",
      "user": "user303",
      "ideal": "Create a new plan-only team for the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly/456",
      "method": "DELETE",
      "operationId": "deletePlanOnlyTeam",
      "summary": "",
      "user": "user404",
      "ideal": "Delete the specified plan-only team from the plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly/456",
      "method": "GET",
      "operationId": "getPlanOnlyTeam",
      "summary": "",
      "user": "user505",
      "ideal": "Retrieve details of the specified plan-only team."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly/456",
      "method": "PUT",
      "operationId": "updatePlanOnlyTeam",
      "summary": "",
      "user": "user606",
      "ideal": "Update the details of the specified plan-only team."
    },
    {
      "path": "/rest/api/3/configuration/timetracking",
      "method": "GET",
      "operationId": "getSelectedTimeTrackingImplementation",
      "summary": "",
      "user": "As a project manager, I want to retrieve the currently selected time tracking implementation for my Jira project to ensure that we are using the correct method for tracking time spent on tasks.",
      "ideal": "The API should return the currently selected time tracking implementation, including details such as the implementation name and any relevant configuration settings."
    },
    {
      "path": "/rest/api/3/configuration/timetracking",
      "method": "PUT",
      "operationId": "selectTimeTrackingImplementation",
      "summary": "",
      "user": "As a system administrator, I need to update the time tracking implementation for our Jira instance to switch from one method to another based on our team's needs.",
      "ideal": "The API should accept the new time tracking implementation and return a success message confirming the update, along with the new configuration details."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/list",
      "method": "GET",
      "operationId": "getAvailableTimeTrackingImplementations",
      "summary": "",
      "user": "As a product owner, I want to view all available time tracking implementations so that I can evaluate which one best fits our workflow requirements.",
      "ideal": "The API should return a list of all available time tracking implementations, including their names, descriptions, and any specific features they offer."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/options",
      "method": "GET",
      "operationId": "getSharedTimeTrackingConfiguration",
      "summary": "",
      "user": "As a team lead, I need to access the shared time tracking configuration to ensure that all team members are aligned on how time is tracked across different projects.",
      "ideal": "The API should return the current shared time tracking configuration, including settings such as default time tracking fields and any shared rules."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/options",
      "method": "PUT",
      "operationId": "setSharedTimeTrackingConfiguration",
      "summary": "",
      "user": "As an operations manager, I want to update the shared time tracking configuration to enforce new rules for how time is logged across all projects in Jira.",
      "ideal": "The API should accept the new configuration settings and return a confirmation message indicating that the shared time tracking configuration has been successfully updated."
    },
    {
      "path": "/rest/api/3/uiModifications",
      "method": "GET",
      "operationId": "getUiModifications",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current UI modifications applied to my Jira instance so that I can review and manage them effectively.",
      "ideal": "The API should return a list of all UI modifications, including their IDs, types, and statuses."
    },
    {
      "path": "/rest/api/3/uiModifications",
      "method": "POST",
      "operationId": "createUiModification",
      "summary": "",
      "user": "As a developer, I want to create a new UI modification to enhance the user experience for my team, ensuring that it aligns with our branding.",
      "ideal": "The API should accept the modification details and return the created modification's ID and confirmation of success."
    },
    {
      "path": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "DELETE",
      "operationId": "deleteUiModification",
      "summary": "",
      "user": "As an admin, I want to delete a specific UI modification that is no longer needed to keep the interface clean and user-friendly.",
      "ideal": "The API should confirm the deletion of the specified UI modification and return a success message."
    },
    {
      "path": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "PUT",
      "operationId": "updateUiModification",
      "summary": "",
      "user": "As a UX designer, I want to update an existing UI modification to improve its functionality based on user feedback.",
      "ideal": "The API should accept the updated details and return the modified UI modification's ID along with a success confirmation."
    },
    {
      "path": "/rest/api/3/user/properties",
      "method": "GET",
      "operationId": "getUserPropertyKeys",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all property keys associated with the user."
    },
    {
      "path": "/rest/api/3/user/properties/notifications",
      "method": "DELETE",
      "operationId": "deleteUserProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Delete the user property 'notifications' for user123."
    },
    {
      "path": "/rest/api/3/user/properties/theme",
      "method": "GET",
      "operationId": "getUserProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Fetch the value of the user property 'theme' for user123."
    },
    {
      "path": "/rest/api/3/user/properties/language",
      "method": "PUT",
      "operationId": "setUserProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Set the user property 'language' to 'en-US' for user123."
    },
    {
      "path": "/rest/api/3/user/assignable/multiProjectSearch",
      "method": "GET",
      "operationId": "findBulkAssignableUsers",
      "summary": "",
      "user": "projectManager",
      "ideal": "Retrieve a list of users who can be assigned issues across multiple projects."
    },
    {
      "path": "/rest/api/3/user/assignable/search",
      "method": "GET",
      "operationId": "findAssignableUsers",
      "summary": "",
      "user": "teamLead",
      "ideal": "Get a list of users that can be assigned issues in a specific project."
    },
    {
      "path": "/rest/api/3/user/permission/search",
      "method": "GET",
      "operationId": "findUsersWithAllPermissions",
      "summary": "",
      "user": "adminUser",
      "ideal": "Find users who have all permissions in the Jira instance."
    },
    {
      "path": "/rest/api/3/user/picker",
      "method": "GET",
      "operationId": "findUsersForPicker",
      "summary": "",
      "user": "issueReporter",
      "ideal": "Fetch a list of users for the user picker dropdown in issue creation."
    },
    {
      "path": "/rest/api/3/user/search",
      "method": "GET",
      "operationId": "findUsers",
      "summary": "",
      "user": "hrManager",
      "ideal": "Search for users in the Jira system based on various criteria."
    },
    {
      "path": "/rest/api/3/user/search/query",
      "method": "GET",
      "operationId": "findUsersByQuery",
      "summary": "",
      "user": "devTeam",
      "ideal": "Execute a search query to find users matching specific parameters."
    },
    {
      "path": "/rest/api/3/user/search/query/key",
      "method": "GET",
      "operationId": "findUserKeysByQuery",
      "summary": "",
      "user": "qaTester",
      "ideal": "Retrieve user keys based on a search query for integration purposes."
    },
    {
      "path": "/rest/api/3/user/viewissue/search",
      "method": "GET",
      "operationId": "findUsersWithBrowsePermission",
      "summary": "",
      "user": "projectOwner",
      "ideal": "Identify users who have permission to view issues in a project."
    },
    {
      "path": "/rest/api/3/user",
      "method": "GET",
      "operationId": "getUser",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve user details for John Doe."
    },
    {
      "path": "/rest/api/3/user",
      "method": "POST",
      "operationId": "createUser",
      "summary": "",
      "user": "jane.smith@example.com",
      "ideal": "Create a new user with the email jane.smith@example.com."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "GET",
      "operationId": "getUserDefaultColumns",
      "summary": "",
      "user": "alice.brown@example.com",
      "ideal": "Fetch default columns for user Alice Brown."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "PUT",
      "operationId": "setUserColumns",
      "summary": "",
      "user": "bob.johnson@example.com",
      "ideal": "Update column settings for Bob Johnson."
    },
    {
      "path": "/rest/api/3/user/groups",
      "method": "GET",
      "operationId": "getUserGroups",
      "summary": "",
      "user": "charlie.white@example.com",
      "ideal": "List all groups for user Charlie White."
    },
    {
      "path": "/rest/api/3/user/bulk",
      "method": "GET",
      "operationId": "bulkGetUsers",
      "summary": "",
      "user": "team@example.com",
      "ideal": "Retrieve details for multiple users in bulk."
    },
    {
      "path": "/rest/api/3/user/email",
      "method": "GET",
      "operationId": "getUserEmail",
      "summary": "",
      "user": "david.green@example.com",
      "ideal": "Get the email address for David Green."
    },
    {
      "path": "/rest/api/3/user/email/bulk",
      "method": "GET",
      "operationId": "getUserEmailBulk",
      "summary": "",
      "user": "support@example.com",
      "ideal": "Fetch email addresses for a list of users in bulk."
    },
    {
      "path": "/rest/api/3/users",
      "method": "GET",
      "operationId": "getAllUsersDefault",
      "summary": "",
      "user": "admin@example.com",
      "ideal": "Retrieve all users with default settings."
    },
    {
      "path": "/rest/api/3/users/search",
      "method": "GET",
      "operationId": "getAllUsers",
      "summary": "",
      "user": "manager@example.com",
      "ideal": "Search for users based on specific criteria."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "DELETE",
      "operationId": "resetUserColumns",
      "summary": "",
      "user": "emily.jones@example.com",
      "ideal": "Reset column settings for Emily Jones."
    },
    {
      "path": "/rest/api/3/user/bulk/migration",
      "method": "GET",
      "operationId": "bulkGetUsersMigration",
      "summary": "",
      "user": "migration_team@example.com",
      "ideal": "Retrieve users for migration purposes."
    },
    {
      "path": "/rest/api/3/user",
      "method": "DELETE",
      "operationId": "removeUser",
      "summary": "",
      "user": "mark.taylor@example.com",
      "ideal": "Remove user Mark Taylor from the system."
    },
    {
      "path": "/rest/api/3/webhook",
      "method": "GET",
      "operationId": "getDynamicWebhooksForApp",
      "summary": "",
      "user": "As a developer, I want to retrieve all dynamic webhooks associated with my application to ensure that I have the latest configurations and can manage them effectively.",
      "ideal": "The API should return a list of dynamic webhooks in JSON format, including their IDs, URLs, and events they are subscribed to."
    },
    {
      "path": "/rest/api/3/webhook",
      "method": "POST",
      "operationId": "registerDynamicWebhooks",
      "summary": "",
      "user": "As a developer, I need to register a new dynamic webhook for my application to receive notifications about specific events in Jira.",
      "ideal": "The API should accept a JSON payload with the webhook details and return a confirmation response with the webhook ID and status."
    },
    {
      "path": "/rest/api/3/webhook/{webhookId}",
      "method": "DELETE",
      "operationId": "deleteWebhookById",
      "summary": "",
      "user": "As a developer, I want to delete a specific webhook that is no longer needed to keep my application clean and avoid unnecessary notifications.",
      "ideal": "The API should confirm the deletion of the webhook and return a success message."
    },
    {
      "path": "/rest/api/3/webhook/failed",
      "method": "GET",
      "operationId": "getFailedWebhooks",
      "summary": "",
      "user": "As a developer, I want to check for any failed webhooks to troubleshoot issues and ensure my application is receiving the necessary event notifications.",
      "ideal": "The API should return a list of failed webhooks with details about the errors encountered."
    },
    {
      "path": "/rest/api/3/webhook/refresh",
      "method": "PUT",
      "operationId": "refreshWebhooks",
      "summary": "",
      "user": "As a developer, I need to refresh the webhooks to ensure they are up-to-date with the latest configurations and settings.",
      "ideal": "The API should process the refresh request and return a success message indicating that the webhooks have been updated."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/createdraft",
      "method": "POST",
      "operationId": "createWorkflowSchemeDraftFromParent",
      "summary": "",
      "user": "User A creates a draft workflow scheme based on an existing one.",
      "ideal": "Successfully creates a draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeDraft",
      "summary": "",
      "user": "User B deletes the draft workflow scheme that is no longer needed.",
      "ideal": "Successfully deletes the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "GET",
      "operationId": "getWorkflowSchemeDraft",
      "summary": "",
      "user": "User C retrieves the details of the draft workflow scheme to review changes.",
      "ideal": "Successfully retrieves the draft workflow scheme details."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "PUT",
      "operationId": "updateWorkflowSchemeDraft",
      "summary": "",
      "user": "User D updates the draft workflow scheme with new configurations.",
      "ideal": "Successfully updates the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "DELETE",
      "operationId": "deleteDraftDefaultWorkflow",
      "summary": "",
      "user": "User E removes the default workflow from the draft scheme.",
      "ideal": "Successfully deletes the default workflow from the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "GET",
      "operationId": "getDraftDefaultWorkflow",
      "summary": "",
      "user": "User F checks which workflow is set as default in the draft.",
      "ideal": "Successfully retrieves the default workflow from the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "PUT",
      "operationId": "updateDraftDefaultWorkflow",
      "summary": "",
      "user": "User G updates the default workflow in the draft to a new one.",
      "ideal": "Successfully updates the default workflow in the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "User H removes the issue type 'bug' from the draft workflow scheme.",
      "ideal": "Successfully deletes the issue type from the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "GET",
      "operationId": "getWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "User I retrieves the details of the 'bug' issue type in the draft.",
      "ideal": "Successfully retrieves the issue type details from the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "PUT",
      "operationId": "setWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "User J sets the 'bug' issue type in the draft workflow scheme.",
      "ideal": "Successfully sets the issue type in the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/publish",
      "method": "POST",
      "operationId": "publishDraftWorkflowScheme",
      "summary": "",
      "user": "User K publishes the draft workflow scheme to make it active.",
      "ideal": "Successfully publishes the draft workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "DELETE",
      "operationId": "deleteDraftWorkflowMapping",
      "summary": "",
      "user": "User L deletes a workflow mapping from the draft workflow scheme.",
      "ideal": "Successfully deletes the workflow mapping from the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "GET",
      "operationId": "getDraftWorkflow",
      "summary": "",
      "user": "User M retrieves the workflow mappings in the draft workflow scheme.",
      "ideal": "Successfully retrieves the workflow mappings from the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "PUT",
      "operationId": "updateDraftWorkflowMapping",
      "summary": "",
      "user": "User N updates the workflow mapping in the draft workflow scheme.",
      "ideal": "Successfully updates the workflow mapping in the draft."
    },
    {
      "path": "/rest/api/3/workflowscheme/project",
      "method": "GET",
      "operationId": "getWorkflowSchemeProjectAssociations",
      "summary": "",
      "user": "As a project manager, I want to retrieve the workflow scheme associations for a specific project to ensure that the correct workflows are applied to my project tasks.",
      "ideal": "The API should return a list of workflow schemes associated with the specified project, including details such as the workflow scheme ID, name, and the associated project key."
    },
    {
      "path": "/rest/api/3/workflowscheme/project",
      "method": "PUT",
      "operationId": "assignSchemeToProject",
      "summary": "",
      "user": "As a Jira administrator, I need to assign a specific workflow scheme to a project to ensure that the project follows the correct processes and workflows defined for it.",
      "ideal": "The API should successfully update the project to use the specified workflow scheme and return a confirmation message along with the updated project details."
    },
    {
      "path": "/rest/api/3/workflowscheme",
      "method": "GET",
      "operationId": "getAllWorkflowSchemes",
      "summary": "",
      "user": "Admin user requesting all workflow schemes to review current configurations.",
      "ideal": "Returns a list of all workflow schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/workflowscheme",
      "method": "POST",
      "operationId": "createWorkflowScheme",
      "summary": "",
      "user": "Project manager creating a new workflow scheme for a new project.",
      "ideal": "Creates a new workflow scheme and returns the created scheme details."
    },
    {
      "path": "/rest/api/3/workflowscheme/read",
      "method": "POST",
      "operationId": "readWorkflowSchemes",
      "summary": "",
      "user": "User looking to read specific workflow schemes for analysis.",
      "ideal": "Returns the details of specified workflow schemes."
    },
    {
      "path": "/rest/api/3/workflowscheme/update",
      "method": "POST",
      "operationId": "updateSchemes",
      "summary": "",
      "user": "Admin updating multiple workflow schemes for compliance.",
      "ideal": "Updates the specified workflow schemes and returns the updated details."
    },
    {
      "path": "/rest/api/3/workflowscheme/update/mappings",
      "method": "POST",
      "operationId": "updateWorkflowSchemeMappings",
      "summary": "",
      "user": "Developer updating workflow scheme mappings after project changes.",
      "ideal": "Updates the mappings of workflow schemes and returns the updated mappings."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "DELETE",
      "operationId": "deleteWorkflowScheme",
      "summary": "",
      "user": "Admin deleting an obsolete workflow scheme.",
      "ideal": "Deletes the specified workflow scheme and confirms deletion."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "GET",
      "operationId": "getWorkflowScheme",
      "summary": "",
      "user": "User retrieving details of a specific workflow scheme for documentation.",
      "ideal": "Returns the details of the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "PUT",
      "operationId": "updateWorkflowScheme",
      "summary": "",
      "user": "Admin updating the name and description of a workflow scheme.",
      "ideal": "Updates the specified workflow scheme and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "DELETE",
      "operationId": "deleteDefaultWorkflow",
      "summary": "",
      "user": "Admin removing the default workflow from a scheme.",
      "ideal": "Deletes the default workflow from the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "GET",
      "operationId": "getDefaultWorkflow",
      "summary": "",
      "user": "User checking the default workflow for a specific scheme.",
      "ideal": "Returns the default workflow associated with the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "PUT",
      "operationId": "updateDefaultWorkflow",
      "summary": "",
      "user": "Admin setting a new default workflow for a workflow scheme.",
      "ideal": "Updates the default workflow for the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeIssueType",
      "summary": "",
      "user": "Admin removing an issue type from a workflow scheme.",
      "ideal": "Deletes the specified issue type from the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "GET",
      "operationId": "getWorkflowSchemeIssueType",
      "summary": "",
      "user": "User retrieving the issue type associated with a workflow scheme.",
      "ideal": "Returns the details of the specified issue type in the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "PUT",
      "operationId": "setWorkflowSchemeIssueType",
      "summary": "",
      "user": "Admin assigning a new issue type to a workflow scheme.",
      "ideal": "Sets the specified issue type for the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "DELETE",
      "operationId": "deleteWorkflowMapping",
      "summary": "",
      "user": "Admin removing a workflow mapping from a workflow scheme.",
      "ideal": "Deletes the workflow mapping from the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "GET",
      "operationId": "getWorkflow",
      "summary": "",
      "user": "User checking the workflow mapping for a specific scheme.",
      "ideal": "Returns the workflow mapping associated with the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "PUT",
      "operationId": "updateWorkflowMapping",
      "summary": "",
      "user": "Admin updating the workflow mapping for a workflow scheme.",
      "ideal": "Updates the workflow mapping for the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{workflowSchemeId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForWorkflowScheme",
      "summary": "",
      "user": "User analyzing project usages for a specific workflow scheme.",
      "ideal": "Returns the projects that are using the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/statuscategory",
      "method": "GET",
      "operationId": "getStatusCategories",
      "summary": "",
      "user": "As a project manager, I want to retrieve all status categories in Jira to understand the different stages my tasks can be in.",
      "ideal": "The response should include a list of all status categories with their IDs and names, allowing me to categorize my tasks effectively."
    },
    {
      "path": "/rest/api/3/statuscategory/{idOrKey}",
      "method": "GET",
      "operationId": "getStatusCategory",
      "summary": "",
      "user": "As a developer, I need to get detailed information about a specific status category by its ID or key to ensure I'm using the correct category in my workflow.",
      "ideal": "The response should provide detailed information about the specified status category, including its ID, name, and any associated metadata."
    },
    {
      "path": "/rest/api/3/status",
      "method": "GET",
      "operationId": "getStatuses",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available statuses in Jira so that I can understand the workflow options for my team's tasks.",
      "ideal": "The API should return a list of all statuses, including their IDs and names, allowing me to see the current workflow states."
    },
    {
      "path": "/rest/api/3/status/{idOrName}",
      "method": "GET",
      "operationId": "getStatus",
      "summary": "",
      "user": "As a developer, I need to fetch the details of a specific status by its ID or name to ensure I am using the correct status in my API calls.",
      "ideal": "The API should return the details of the specified status, including its ID, name, and description, so I can confirm its attributes."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "DELETE",
      "operationId": "deleteWorkflowTransitionProperty",
      "summary": "",
      "user": "Admin user attempting to remove a specific property from a workflow transition identified by transitionId 123.",
      "ideal": "Successfully deletes the property associated with the transition."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "GET",
      "operationId": "getWorkflowTransitionProperties",
      "summary": "",
      "user": "Project manager looking to retrieve all properties for the workflow transition with transitionId 123 to understand its configuration.",
      "ideal": "Returns a list of properties associated with the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "POST",
      "operationId": "createWorkflowTransitionProperty",
      "summary": "",
      "user": "Developer adding a new property to the workflow transition with transitionId 123 to enhance its functionality.",
      "ideal": "Successfully creates a new property for the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "PUT",
      "operationId": "updateWorkflowTransitionProperty",
      "summary": "",
      "user": "System administrator updating an existing property for the workflow transition with transitionId 123 to correct its value.",
      "ideal": "Successfully updates the property for the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/rule/config",
      "method": "GET",
      "operationId": "getWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current workflow transition rule configurations for my project to ensure they align with our process requirements.",
      "ideal": "The API should return a list of all workflow transition rule configurations currently set for the project, including details such as rule IDs, conditions, and actions."
    },
    {
      "path": "/rest/api/3/workflow/rule/config",
      "method": "PUT",
      "operationId": "updateWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "As a workflow administrator, I need to update the existing workflow transition rule configurations to reflect the new business logic we have defined.",
      "ideal": "The API should accept the updated configurations and return a success message along with the updated rule details, confirming the changes have been applied."
    },
    {
      "path": "/rest/api/3/workflow/rule/config/delete",
      "method": "PUT",
      "operationId": "deleteWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "As a system administrator, I want to delete obsolete workflow transition rule configurations that are no longer needed to maintain a clean and efficient workflow setup.",
      "ideal": "The API should successfully remove the specified rule configurations and return a confirmation message indicating which rules were deleted."
    },
    {
      "path": "/rest/api/3/workflow",
      "method": "GET",
      "operationId": "getAllWorkflows",
      "summary": "",
      "user": "As a project manager, I want to retrieve all workflows in the Jira Cloud platform to understand the current processes in place.",
      "ideal": "The API should return a list of all workflows with their details, including names, IDs, and statuses."
    },
    {
      "path": "/rest/api/3/workflow",
      "method": "POST",
      "operationId": "createWorkflow",
      "summary": "",
      "user": "As a developer, I want to create a new workflow for our project to streamline our issue tracking process.",
      "ideal": "The API should accept a workflow definition and return the created workflow's ID and details."
    },
    {
      "path": "/rest/api/3/workflow/search",
      "method": "GET",
      "operationId": "getWorkflowsPaginated",
      "summary": "",
      "user": "As a product owner, I want to search for specific workflows to find the one that fits our needs.",
      "ideal": "The API should return a paginated list of workflows based on search criteria, including total count and next page link."
    },
    {
      "path": "/rest/api/3/workflow/{entityId}",
      "method": "DELETE",
      "operationId": "deleteInactiveWorkflow",
      "summary": "",
      "user": "As an administrator, I want to delete an inactive workflow to keep our workflow list clean and manageable.",
      "ideal": "The API should confirm the deletion of the specified workflow and return a success message."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/project/{projectId}/issueTypeUsages",
      "method": "GET",
      "operationId": "getWorkflowProjectIssueTypeUsages",
      "summary": "",
      "user": "As a team lead, I want to check which issue types are using a specific workflow in our project.",
      "ideal": "The API should return a list of issue types associated with the specified workflow and project."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForWorkflow",
      "summary": "",
      "user": "As a project manager, I want to see all projects that are using a specific workflow to assess its impact.",
      "ideal": "The API should return a list of projects utilizing the specified workflow."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/workflowSchemes",
      "method": "GET",
      "operationId": "getWorkflowSchemeUsagesForWorkflow",
      "summary": "",
      "user": "As a system administrator, I want to find out which workflow schemes are associated with a specific workflow.",
      "ideal": "The API should return a list of workflow schemes linked to the specified workflow."
    },
    {
      "path": "/rest/api/3/workflows",
      "method": "POST",
      "operationId": "readWorkflows",
      "summary": "",
      "user": "As a developer, I want to read multiple workflows at once to analyze their configurations.",
      "ideal": "The API should accept a list of workflow IDs and return their corresponding details."
    },
    {
      "path": "/rest/api/3/workflows/capabilities",
      "method": "GET",
      "operationId": "workflowCapabilities",
      "summary": "",
      "user": "As a product manager, I want to know the capabilities of the workflow API to better plan our integration.",
      "ideal": "The API should return a list of capabilities supported by the workflow API."
    },
    {
      "path": "/rest/api/3/workflows/create",
      "method": "POST",
      "operationId": "createWorkflows",
      "summary": "",
      "user": "As a project manager, I want to create multiple workflows at once to save time during setup.",
      "ideal": "The API should accept a batch of workflow definitions and return the details of the created workflows."
    },
    {
      "path": "/rest/api/3/workflows/create/validation",
      "method": "POST",
      "operationId": "validateCreateWorkflows",
      "summary": "",
      "user": "As a developer, I want to validate my workflow definitions before creating them to avoid errors.",
      "ideal": "The API should check the provided workflow definitions and return any validation errors."
    },
    {
      "path": "/rest/api/3/workflows/defaultEditor",
      "method": "GET",
      "operationId": "getDefaultEditor",
      "summary": "",
      "user": "As a system administrator, I want to know the default editor for workflows to ensure consistency in our configurations.",
      "ideal": "The API should return the default editor settings for workflows."
    },
    {
      "path": "/rest/api/3/workflows/preview",
      "method": "POST",
      "operationId": "readWorkflowPreviews",
      "summary": "",
      "user": "As a product owner, I want to preview a workflow before finalizing it to ensure it meets our requirements.",
      "ideal": "The API should return a preview of the specified workflow based on the provided definition."
    },
    {
      "path": "/rest/api/3/workflows/search",
      "method": "GET",
      "operationId": "searchWorkflows",
      "summary": "",
      "user": "As a project manager, I want to search for workflows by name to quickly find the one I need.",
      "ideal": "The API should return a list of workflows that match the search criteria."
    },
    {
      "path": "/rest/api/3/workflows/update",
      "method": "POST",
      "operationId": "updateWorkflows",
      "summary": "",
      "user": "As a developer, I want to update existing workflows to reflect changes in our processes.",
      "ideal": "The API should accept updated workflow definitions and return the updated workflow details."
    },
    {
      "path": "/rest/api/3/workflows/update/validation",
      "method": "POST",
      "operationId": "validateUpdateWorkflows",
      "summary": "",
      "user": "As a developer, I want to validate my updates to workflows before applying them to prevent issues.",
      "ideal": "The API should check the updated workflow definitions and return any validation errors."
    },
    {
      "path": "/rest/api/3/user/nav4-opt-property/theme",
      "method": "GET",
      "operationId": "getUserNavProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current theme property for the user."
    },
    {
      "path": "/rest/api/3/user/nav4-opt-property/theme",
      "method": "PUT",
      "operationId": "setUserNavProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Update the theme property for the user to 'dark'."
    }
  ]
}