//@provengo summon rest

/**
 * Auto-generated interfaces & lifecycle (readable)
 * From GOLD only â€“ full CRUD + verifications + match/wait helpers.
 * This approximates the "Library SUT" interface style.
 */

const svc = new RESTSession("http://" + host + ":" + port, "provengo basedclient", {
  headers: { "Content-Type": "application/json" },
});

// Common helpers
function matchesDescription(text) {
  return bp.EventSet("desc-eq", function(e) {
    return !!(e && e.data && e.data.parameters && e.data.parameters.description === text);
  });
}
function matchesDescriptionRegex(rx) {
  return bp.EventSet("desc-rx", function(e) {
    if (!e || !e.data || !e.data.parameters || !e.data.parameters.description) return false;
    return rx.test(e.data.parameters.description);
  });
}

/** === Rest Operations === */

// CREATE
function addRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.post("/rest", {
      body: JSON.stringify({ id: id, projectIdOrKey: projectIdOrKey, schemeId: schemeId, issueIdOrKey: issueIdOrKey, propertyKey: propertyKey, dashboardId: dashboardId, issueTypeScreenSchemeId: issueTypeScreenSchemeId, issueTypeId: issueTypeId, issueTypeSchemeId: issueTypeSchemeId, planId: planId, projectId: projectId, screenId: screenId, itemId: itemId, permissionId: permissionId, commentId: commentId, levelId: levelId, statusId: statusId, fieldIdOrKey: fieldIdOrKey, issueLinkTypeId: issueLinkTypeId, linkId: linkId, tabId: tabId, issueType: issueType, workflowId: workflowId, gadgetId: gadgetId, fieldId: fieldId, notificationSchemeId: notificationSchemeId, projectTypeKey: projectTypeKey, screenSchemeId: screenSchemeId, uiModificationId: uiModificationId, entityType: entityType, key: key, taskId: taskId, notificationId: notificationId, jobId: jobId, issueSecuritySchemeId: issueSecuritySchemeId, memberId: memberId, applicationKey: applicationKey, projectKeyOrId: projectKeyOrId, pos: pos, webhookId: webhookId, workflowSchemeId: workflowSchemeId, idOrKey: idOrKey, idOrName: idOrName, entityId: entityId }),
      parameters: { description: "Add a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "" }
    });
}

// DELETE
function deleteRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.delete("/rest/" + id + "/"+ projectIdOrKey + "/"+ schemeId + "/"+ issueIdOrKey + "/"+ propertyKey + "/"+ dashboardId + "/"+ issueTypeScreenSchemeId + "/"+ issueTypeId + "/"+ issueTypeSchemeId + "/"+ planId + "/"+ projectId + "/"+ screenId + "/"+ itemId + "/"+ permissionId + "/"+ commentId + "/"+ levelId + "/"+ statusId + "/"+ fieldIdOrKey + "/"+ issueLinkTypeId + "/"+ linkId + "/"+ tabId + "/"+ issueType + "/"+ workflowId + "/"+ gadgetId + "/"+ fieldId + "/"+ notificationSchemeId + "/"+ projectTypeKey + "/"+ screenSchemeId + "/"+ uiModificationId + "/"+ entityType + "/"+ key + "/"+ taskId + "/"+ notificationId + "/"+ jobId + "/"+ issueSecuritySchemeId + "/"+ memberId + "/"+ applicationKey + "/"+ projectKeyOrId + "/"+ pos + "/"+ webhookId + "/"+ workflowSchemeId + "/"+ idOrKey + "/"+ idOrName + "/"+ entityId, {
    parameters: { description: "Delete a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "" }
  });
}

// Negative: delete non-existing (404/401)
function tryToDeleteANonExistingRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.delete("/rest/" + id + "/"+ projectIdOrKey + "/"+ schemeId + "/"+ issueIdOrKey + "/"+ propertyKey + "/"+ dashboardId + "/"+ issueTypeScreenSchemeId + "/"+ issueTypeId + "/"+ issueTypeSchemeId + "/"+ planId + "/"+ projectId + "/"+ screenId + "/"+ itemId + "/"+ permissionId + "/"+ commentId + "/"+ levelId + "/"+ statusId + "/"+ fieldIdOrKey + "/"+ issueLinkTypeId + "/"+ linkId + "/"+ tabId + "/"+ issueType + "/"+ workflowId + "/"+ gadgetId + "/"+ fieldId + "/"+ notificationSchemeId + "/"+ projectTypeKey + "/"+ screenSchemeId + "/"+ uiModificationId + "/"+ entityType + "/"+ key + "/"+ taskId + "/"+ notificationId + "/"+ jobId + "/"+ issueSecuritySchemeId + "/"+ memberId + "/"+ applicationKey + "/"+ projectKeyOrId + "/"+ pos + "/"+ webhookId + "/"+ workflowSchemeId + "/"+ idOrKey + "/"+ idOrName + "/"+ entityId, {
    expectedResponseCodes: [404, 401],
    parameters: { description: "Delete a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "" }
  });
}

// Negative: add existing (400/409)
function tryToAddExistingRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.post("/rest", {
      body: JSON.stringify({ id: id, projectIdOrKey: projectIdOrKey, schemeId: schemeId, issueIdOrKey: issueIdOrKey, propertyKey: propertyKey, dashboardId: dashboardId, issueTypeScreenSchemeId: issueTypeScreenSchemeId, issueTypeId: issueTypeId, issueTypeSchemeId: issueTypeSchemeId, planId: planId, projectId: projectId, screenId: screenId, itemId: itemId, permissionId: permissionId, commentId: commentId, levelId: levelId, statusId: statusId, fieldIdOrKey: fieldIdOrKey, issueLinkTypeId: issueLinkTypeId, linkId: linkId, tabId: tabId, issueType: issueType, workflowId: workflowId, gadgetId: gadgetId, fieldId: fieldId, notificationSchemeId: notificationSchemeId, projectTypeKey: projectTypeKey, screenSchemeId: screenSchemeId, uiModificationId: uiModificationId, entityType: entityType, key: key, taskId: taskId, notificationId: notificationId, jobId: jobId, issueSecuritySchemeId: issueSecuritySchemeId, memberId: memberId, applicationKey: applicationKey, projectKeyOrId: projectKeyOrId, pos: pos, webhookId: webhookId, workflowSchemeId: workflowSchemeId, idOrKey: idOrKey, idOrName: idOrName, entityId: entityId }),
      parameters: { description: "Add a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "" }
    , 
    expectedResponseCodes: [400, 409],
    parameters: { description: "Add a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "" }
  });
}

// UPDATE (if your SUT supports it; path heuristic)
function updateRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.put("/rest/" + id + "/"+ projectIdOrKey + "/"+ schemeId + "/"+ issueIdOrKey + "/"+ propertyKey + "/"+ dashboardId + "/"+ issueTypeScreenSchemeId + "/"+ issueTypeId + "/"+ issueTypeSchemeId + "/"+ planId + "/"+ projectId + "/"+ screenId + "/"+ itemId + "/"+ permissionId + "/"+ commentId + "/"+ levelId + "/"+ statusId + "/"+ fieldIdOrKey + "/"+ issueLinkTypeId + "/"+ linkId + "/"+ tabId + "/"+ issueType + "/"+ workflowId + "/"+ gadgetId + "/"+ fieldId + "/"+ notificationSchemeId + "/"+ projectTypeKey + "/"+ screenSchemeId + "/"+ uiModificationId + "/"+ entityType + "/"+ key + "/"+ taskId + "/"+ notificationId + "/"+ jobId + "/"+ issueSecuritySchemeId + "/"+ memberId + "/"+ applicationKey + "/"+ projectKeyOrId + "/"+ pos + "/"+ webhookId + "/"+ workflowSchemeId + "/"+ idOrKey + "/"+ idOrName + "/"+ entityId, {
      body: JSON.stringify({ id: id, projectIdOrKey: projectIdOrKey, schemeId: schemeId, issueIdOrKey: issueIdOrKey, propertyKey: propertyKey, dashboardId: dashboardId, issueTypeScreenSchemeId: issueTypeScreenSchemeId, issueTypeId: issueTypeId, issueTypeSchemeId: issueTypeSchemeId, planId: planId, projectId: projectId, screenId: screenId, itemId: itemId, permissionId: permissionId, commentId: commentId, levelId: levelId, statusId: statusId, fieldIdOrKey: fieldIdOrKey, issueLinkTypeId: issueLinkTypeId, linkId: linkId, tabId: tabId, issueType: issueType, workflowId: workflowId, gadgetId: gadgetId, fieldId: fieldId, notificationSchemeId: notificationSchemeId, projectTypeKey: projectTypeKey, screenSchemeId: screenSchemeId, uiModificationId: uiModificationId, entityType: entityType, key: key, taskId: taskId, notificationId: notificationId, jobId: jobId, issueSecuritySchemeId: issueSecuritySchemeId, memberId: memberId, applicationKey: applicationKey, projectKeyOrId: projectKeyOrId, pos: pos, webhookId: webhookId, workflowSchemeId: workflowSchemeId, idOrKey: idOrKey, idOrName: idOrName, entityId: entityId }),
      parameters: { description: "Update a rest" }
    });
}

// GET one
function getRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.get("/rest/" + id + "/"+ projectIdOrKey + "/"+ schemeId + "/"+ issueIdOrKey + "/"+ propertyKey + "/"+ dashboardId + "/"+ issueTypeScreenSchemeId + "/"+ issueTypeId + "/"+ issueTypeSchemeId + "/"+ planId + "/"+ projectId + "/"+ screenId + "/"+ itemId + "/"+ permissionId + "/"+ commentId + "/"+ levelId + "/"+ statusId + "/"+ fieldIdOrKey + "/"+ issueLinkTypeId + "/"+ linkId + "/"+ tabId + "/"+ issueType + "/"+ workflowId + "/"+ gadgetId + "/"+ fieldId + "/"+ notificationSchemeId + "/"+ projectTypeKey + "/"+ screenSchemeId + "/"+ uiModificationId + "/"+ entityType + "/"+ key + "/"+ taskId + "/"+ notificationId + "/"+ jobId + "/"+ issueSecuritySchemeId + "/"+ memberId + "/"+ applicationKey + "/"+ projectKeyOrId + "/"+ pos + "/"+ webhookId + "/"+ workflowSchemeId + "/"+ idOrKey + "/"+ idOrName + "/"+ entityId, {
    parameters: { description: "Get a rest" }
  });
}

// LIST all
function listRest() {
  svc.get("/rest", {
    parameters: { description: "List rest" }
  });
}

// Verify exists (by list)
function verifyRestExists(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.get("/rest", {
    callback: function (response) {
      rest = JSON.parse(response.body);
      for (let i = 0; i < rest.length; i++) {
        if (rest[i].id === id && rest[i].projectIdOrKey === projectIdOrKey && rest[i].schemeId === schemeId && rest[i].issueIdOrKey === issueIdOrKey && rest[i].propertyKey === propertyKey && rest[i].dashboardId === dashboardId && rest[i].issueTypeScreenSchemeId === issueTypeScreenSchemeId && rest[i].issueTypeId === issueTypeId && rest[i].issueTypeSchemeId === issueTypeSchemeId && rest[i].planId === planId && rest[i].projectId === projectId && rest[i].screenId === screenId && rest[i].itemId === itemId && rest[i].permissionId === permissionId && rest[i].commentId === commentId && rest[i].levelId === levelId && rest[i].statusId === statusId && rest[i].fieldIdOrKey === fieldIdOrKey && rest[i].issueLinkTypeId === issueLinkTypeId && rest[i].linkId === linkId && rest[i].tabId === tabId && rest[i].issueType === issueType && rest[i].workflowId === workflowId && rest[i].gadgetId === gadgetId && rest[i].fieldId === fieldId && rest[i].notificationSchemeId === notificationSchemeId && rest[i].projectTypeKey === projectTypeKey && rest[i].screenSchemeId === screenSchemeId && rest[i].uiModificationId === uiModificationId && rest[i].entityType === entityType && rest[i].key === key && rest[i].taskId === taskId && rest[i].notificationId === notificationId && rest[i].jobId === jobId && rest[i].issueSecuritySchemeId === issueSecuritySchemeId && rest[i].memberId === memberId && rest[i].applicationKey === applicationKey && rest[i].projectKeyOrId === projectKeyOrId && rest[i].pos === pos && rest[i].webhookId === webhookId && rest[i].workflowSchemeId === workflowSchemeId && rest[i].idOrKey === idOrKey && rest[i].idOrName === idOrName && rest[i].entityId === entityId) {
          return pvg.success("Rest exists");
        }
      }
      return pvg.fail("Expected a rest to exist but it does not");
    },
    parameters: { description: "Verify rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + " exists" }
  });
}

// Verify NOT exists (by list)
function verifyRestDoesNotExist(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  svc.get("/rest", {
    callback: function (response) {
      rest = JSON.parse(response.body);
      for (let i = 0; i < rest.length; i++) {
        if (rest[i].id === id && rest[i].projectIdOrKey === projectIdOrKey && rest[i].schemeId === schemeId && rest[i].issueIdOrKey === issueIdOrKey && rest[i].propertyKey === propertyKey && rest[i].dashboardId === dashboardId && rest[i].issueTypeScreenSchemeId === issueTypeScreenSchemeId && rest[i].issueTypeId === issueTypeId && rest[i].issueTypeSchemeId === issueTypeSchemeId && rest[i].planId === planId && rest[i].projectId === projectId && rest[i].screenId === screenId && rest[i].itemId === itemId && rest[i].permissionId === permissionId && rest[i].commentId === commentId && rest[i].levelId === levelId && rest[i].statusId === statusId && rest[i].fieldIdOrKey === fieldIdOrKey && rest[i].issueLinkTypeId === issueLinkTypeId && rest[i].linkId === linkId && rest[i].tabId === tabId && rest[i].issueType === issueType && rest[i].workflowId === workflowId && rest[i].gadgetId === gadgetId && rest[i].fieldId === fieldId && rest[i].notificationSchemeId === notificationSchemeId && rest[i].projectTypeKey === projectTypeKey && rest[i].screenSchemeId === screenSchemeId && rest[i].uiModificationId === uiModificationId && rest[i].entityType === entityType && rest[i].key === key && rest[i].taskId === taskId && rest[i].notificationId === notificationId && rest[i].jobId === jobId && rest[i].issueSecuritySchemeId === issueSecuritySchemeId && rest[i].memberId === memberId && rest[i].applicationKey === applicationKey && rest[i].projectKeyOrId === projectKeyOrId && rest[i].pos === pos && rest[i].webhookId === webhookId && rest[i].workflowSchemeId === workflowSchemeId && rest[i].idOrKey === idOrKey && rest[i].idOrName === idOrName && rest[i].entityId === entityId) {
          return pvg.fail("Expected a rest to not exist but it does");
        }
      }
      return pvg.success("Rest does not exist");
    },
    parameters: { description: "Verify rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + " does not exist" }
  });
}

// Match helpers
function matchAnyAddRest() {
  return bp.EventSet("any-add-rest", function (e) {
    if (!e.data || !e.data.parameters || !e.data.parameters.description) return false;
    return e.data.parameters.description.startsWith("Add a rest");
  });
}
function matchAddRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  return bp.EventSet("add-rest", function (e) {
    if (!e.data || !e.data.parameters || !e.data.parameters.description) return false;
    return e.data.parameters.description === "Add a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "";
  });
}
function matchAnyDeleteRest() {
  return bp.EventSet("any-del-rest", function (e) {
    if (!e.data || !e.data.parameters || !e.data.parameters.description) return false;
    return e.data.parameters.description.startsWith("Delete a rest");
  });
}
function matchDeleteRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  return bp.EventSet("del-rest", function (e) {
    if (!e.data || !e.data.parameters || !e.data.parameters.description) return false;
    return e.data.parameters.description === "Delete a rest with id " + id + " and projectIdOrKey " + projectIdOrKey + " and schemeId " + schemeId + " and issueIdOrKey " + issueIdOrKey + " and propertyKey " + propertyKey + " and dashboardId " + dashboardId + " and issueTypeScreenSchemeId " + issueTypeScreenSchemeId + " and issueTypeId " + issueTypeId + " and issueTypeSchemeId " + issueTypeSchemeId + " and planId " + planId + " and projectId " + projectId + " and screenId " + screenId + " and itemId " + itemId + " and permissionId " + permissionId + " and commentId " + commentId + " and levelId " + levelId + " and statusId " + statusId + " and fieldIdOrKey " + fieldIdOrKey + " and issueLinkTypeId " + issueLinkTypeId + " and linkId " + linkId + " and tabId " + tabId + " and issueType " + issueType + " and workflowId " + workflowId + " and gadgetId " + gadgetId + " and fieldId " + fieldId + " and notificationSchemeId " + notificationSchemeId + " and projectTypeKey " + projectTypeKey + " and screenSchemeId " + screenSchemeId + " and uiModificationId " + uiModificationId + " and entityType " + entityType + " and key " + key + " and taskId " + taskId + " and notificationId " + notificationId + " and jobId " + jobId + " and issueSecuritySchemeId " + issueSecuritySchemeId + " and memberId " + memberId + " and applicationKey " + applicationKey + " and projectKeyOrId " + projectKeyOrId + " and pos " + pos + " and webhookId " + webhookId + " and workflowSchemeId " + workflowSchemeId + " and idOrKey " + idOrKey + " and idOrName " + idOrName + " and entityId " + entityId + "";
  });
}

// Wait helpers
function waitForAnyRestAdded() {
  let e = waitFor(matchesDescriptionRegex(/^Add\ a\ rest\ with\ id\ (.+) and projectIdOrKey\ (.+) and schemeId\ (.+) and issueIdOrKey\ (.+) and propertyKey\ (.+) and dashboardId\ (.+) and issueTypeScreenSchemeId\ (.+) and issueTypeId\ (.+) and issueTypeSchemeId\ (.+) and planId\ (.+) and projectId\ (.+) and screenId\ (.+) and itemId\ (.+) and permissionId\ (.+) and commentId\ (.+) and levelId\ (.+) and statusId\ (.+) and fieldIdOrKey\ (.+) and issueLinkTypeId\ (.+) and linkId\ (.+) and tabId\ (.+) and issueType\ (.+) and workflowId\ (.+) and gadgetId\ (.+) and fieldId\ (.+) and notificationSchemeId\ (.+) and projectTypeKey\ (.+) and screenSchemeId\ (.+) and uiModificationId\ (.+) and entityType\ (.+) and key\ (.+) and taskId\ (.+) and notificationId\ (.+) and jobId\ (.+) and issueSecuritySchemeId\ (.+) and memberId\ (.+) and applicationKey\ (.+) and projectKeyOrId\ (.+) and pos\ (.+) and webhookId\ (.+) and workflowSchemeId\ (.+) and idOrKey\ (.+) and idOrName\ (.+) and entityId\ (.+)$/));
    let m = e.data.parameters.description.match(/^Add\ a\ rest\ with\ id\ (.+) and projectIdOrKey\ (.+) and schemeId\ (.+) and issueIdOrKey\ (.+) and propertyKey\ (.+) and dashboardId\ (.+) and issueTypeScreenSchemeId\ (.+) and issueTypeId\ (.+) and issueTypeSchemeId\ (.+) and planId\ (.+) and projectId\ (.+) and screenId\ (.+) and itemId\ (.+) and permissionId\ (.+) and commentId\ (.+) and levelId\ (.+) and statusId\ (.+) and fieldIdOrKey\ (.+) and issueLinkTypeId\ (.+) and linkId\ (.+) and tabId\ (.+) and issueType\ (.+) and workflowId\ (.+) and gadgetId\ (.+) and fieldId\ (.+) and notificationSchemeId\ (.+) and projectTypeKey\ (.+) and screenSchemeId\ (.+) and uiModificationId\ (.+) and entityType\ (.+) and key\ (.+) and taskId\ (.+) and notificationId\ (.+) and jobId\ (.+) and issueSecuritySchemeId\ (.+) and memberId\ (.+) and applicationKey\ (.+) and projectKeyOrId\ (.+) and pos\ (.+) and webhookId\ (.+) and workflowSchemeId\ (.+) and idOrKey\ (.+) and idOrName\ (.+) and entityId\ (.+)$/);
    return { id: parseInt(m[1]), projectIdOrKey: (x)=>x(m[2]), schemeId: (x)=>x(m[3]), issueIdOrKey: (x)=>x(m[4]), propertyKey: (x)=>x(m[5]), dashboardId: (x)=>x(m[6]), issueTypeScreenSchemeId: (x)=>x(m[7]), issueTypeId: (x)=>x(m[8]), issueTypeSchemeId: (x)=>x(m[9]), planId: (x)=>x(m[10]), projectId: (x)=>x(m[11]), screenId: (x)=>x(m[12]), itemId: (x)=>x(m[13]), permissionId: (x)=>x(m[14]), commentId: (x)=>x(m[15]), levelId: (x)=>x(m[16]), statusId: (x)=>x(m[17]), fieldIdOrKey: (x)=>x(m[18]), issueLinkTypeId: (x)=>x(m[19]), linkId: (x)=>x(m[20]), tabId: (x)=>x(m[21]), issueType: (x)=>x(m[22]), workflowId: (x)=>x(m[23]), gadgetId: (x)=>x(m[24]), fieldId: (x)=>x(m[25]), notificationSchemeId: (x)=>x(m[26]), projectTypeKey: (x)=>x(m[27]), screenSchemeId: (x)=>x(m[28]), uiModificationId: (x)=>x(m[29]), entityType: (x)=>x(m[30]), key: (x)=>x(m[31]), taskId: (x)=>x(m[32]), notificationId: (x)=>x(m[33]), jobId: (x)=>x(m[34]), issueSecuritySchemeId: (x)=>x(m[35]), memberId: (x)=>x(m[36]), applicationKey: (x)=>x(m[37]), projectKeyOrId: (x)=>x(m[38]), pos: (x)=>x(m[39]), webhookId: (x)=>x(m[40]), workflowSchemeId: (x)=>x(m[41]), idOrKey: (x)=>x(m[42]), idOrName: (x)=>x(m[43]), entityId: (x)=>x(m[44]) };
}
function waitForRestAdded(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  waitFor(matchAddRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId));
}
function waitForRestDeleted(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId) {
  waitFor(matchDeleteRest(id, projectIdOrKey, schemeId, issueIdOrKey, propertyKey, dashboardId, issueTypeScreenSchemeId, issueTypeId, issueTypeSchemeId, planId, projectId, screenId, itemId, permissionId, commentId, levelId, statusId, fieldIdOrKey, issueLinkTypeId, linkId, tabId, issueType, workflowId, gadgetId, fieldId, notificationSchemeId, projectTypeKey, screenSchemeId, uiModificationId, entityType, key, taskId, notificationId, jobId, issueSecuritySchemeId, memberId, applicationKey, projectKeyOrId, pos, webhookId, workflowSchemeId, idOrKey, idOrName, entityId));
}
function waitForAnyRestDeleted() {
  let e = waitFor(matchesDescriptionRegex(/^Delete\ a\ rest\ with\ id\ (.+) and projectIdOrKey\ (.+) and schemeId\ (.+) and issueIdOrKey\ (.+) and propertyKey\ (.+) and dashboardId\ (.+) and issueTypeScreenSchemeId\ (.+) and issueTypeId\ (.+) and issueTypeSchemeId\ (.+) and planId\ (.+) and projectId\ (.+) and screenId\ (.+) and itemId\ (.+) and permissionId\ (.+) and commentId\ (.+) and levelId\ (.+) and statusId\ (.+) and fieldIdOrKey\ (.+) and issueLinkTypeId\ (.+) and linkId\ (.+) and tabId\ (.+) and issueType\ (.+) and workflowId\ (.+) and gadgetId\ (.+) and fieldId\ (.+) and notificationSchemeId\ (.+) and projectTypeKey\ (.+) and screenSchemeId\ (.+) and uiModificationId\ (.+) and entityType\ (.+) and key\ (.+) and taskId\ (.+) and notificationId\ (.+) and jobId\ (.+) and issueSecuritySchemeId\ (.+) and memberId\ (.+) and applicationKey\ (.+) and projectKeyOrId\ (.+) and pos\ (.+) and webhookId\ (.+) and workflowSchemeId\ (.+) and idOrKey\ (.+) and idOrName\ (.+) and entityId\ (.+)$/));
    let m = e.data.parameters.description.match(/^Delete\ a\ rest\ with\ id\ (.+) and projectIdOrKey\ (.+) and schemeId\ (.+) and issueIdOrKey\ (.+) and propertyKey\ (.+) and dashboardId\ (.+) and issueTypeScreenSchemeId\ (.+) and issueTypeId\ (.+) and issueTypeSchemeId\ (.+) and planId\ (.+) and projectId\ (.+) and screenId\ (.+) and itemId\ (.+) and permissionId\ (.+) and commentId\ (.+) and levelId\ (.+) and statusId\ (.+) and fieldIdOrKey\ (.+) and issueLinkTypeId\ (.+) and linkId\ (.+) and tabId\ (.+) and issueType\ (.+) and workflowId\ (.+) and gadgetId\ (.+) and fieldId\ (.+) and notificationSchemeId\ (.+) and projectTypeKey\ (.+) and screenSchemeId\ (.+) and uiModificationId\ (.+) and entityType\ (.+) and key\ (.+) and taskId\ (.+) and notificationId\ (.+) and jobId\ (.+) and issueSecuritySchemeId\ (.+) and memberId\ (.+) and applicationKey\ (.+) and projectKeyOrId\ (.+) and pos\ (.+) and webhookId\ (.+) and workflowSchemeId\ (.+) and idOrKey\ (.+) and idOrName\ (.+) and entityId\ (.+)$/);
    return { id: parseInt(m[1]), projectIdOrKey: (x)=>x(m[2]), schemeId: (x)=>x(m[3]), issueIdOrKey: (x)=>x(m[4]), propertyKey: (x)=>x(m[5]), dashboardId: (x)=>x(m[6]), issueTypeScreenSchemeId: (x)=>x(m[7]), issueTypeId: (x)=>x(m[8]), issueTypeSchemeId: (x)=>x(m[9]), planId: (x)=>x(m[10]), projectId: (x)=>x(m[11]), screenId: (x)=>x(m[12]), itemId: (x)=>x(m[13]), permissionId: (x)=>x(m[14]), commentId: (x)=>x(m[15]), levelId: (x)=>x(m[16]), statusId: (x)=>x(m[17]), fieldIdOrKey: (x)=>x(m[18]), issueLinkTypeId: (x)=>x(m[19]), linkId: (x)=>x(m[20]), tabId: (x)=>x(m[21]), issueType: (x)=>x(m[22]), workflowId: (x)=>x(m[23]), gadgetId: (x)=>x(m[24]), fieldId: (x)=>x(m[25]), notificationSchemeId: (x)=>x(m[26]), projectTypeKey: (x)=>x(m[27]), screenSchemeId: (x)=>x(m[28]), uiModificationId: (x)=>x(m[29]), entityType: (x)=>x(m[30]), key: (x)=>x(m[31]), taskId: (x)=>x(m[32]), notificationId: (x)=>x(m[33]), jobId: (x)=>x(m[34]), issueSecuritySchemeId: (x)=>x(m[35]), memberId: (x)=>x(m[36]), applicationKey: (x)=>x(m[37]), projectKeyOrId: (x)=>x(m[38]), pos: (x)=>x(m[39]), webhookId: (x)=>x(m[40]), workflowSchemeId: (x)=>x(m[41]), idOrKey: (x)=>x(m[42]), idOrName: (x)=>x(m[43]), entityId: (x)=>x(m[44]) };
}

