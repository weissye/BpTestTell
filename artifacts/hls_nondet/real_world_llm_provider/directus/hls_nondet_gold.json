{
  "stories": [
    {
      "name": "addCollection",
      "entities": {
        "active": [
          "Collection"
        ],
        "lifecycle": [
          "deleteCollection"
        ],
        "passive": [
          "Collection"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCollectionExists"
        ],
        "postconditions": [
          "verifyCollectionExists"
        ],
        "guards": [
          "deleteCollection"
        ]
      },
      "steps": [
        "addCollection"
      ],
      "notes": [
        "Ensure the Collection ID is unique."
      ]
    },
    {
      "name": "deleteCollection",
      "entities": {
        "active": [
          "Collection"
        ],
        "lifecycle": [
          "addCollection"
        ],
        "passive": [
          "verifyCollectionNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "collectionExists"
        ],
        "postconditions": [
          "verifyCollectionNotExists"
        ],
        "guards": [
          "collectionIsNotInUse"
        ]
      },
      "steps": [
        "deleteCollection"
      ],
      "notes": [
        "Ensure that the collection is not referenced by any other entities."
      ]
    },
    {
      "name": "updateCollectionWithNewData",
      "entities": {
        "active": [
          "Collection"
        ],
        "lifecycle": [
          "updateCollection"
        ],
        "passive": [
          "Collection"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCollectionExists"
        ],
        "postconditions": [
          "verifyCollectionUpdated"
        ],
        "guards": [
          "validateUpdateParams"
        ]
      },
      "steps": [
        "updateCollection"
      ],
      "notes": [
        "Ensure the update parameters are valid."
      ]
    },
    {
      "name": "addComment",
      "entities": {
        "active": [
          "Comment"
        ],
        "lifecycle": [
          "deleteComment"
        ],
        "passive": [
          "verifyCommentExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyCommentExists"
        ],
        "guards": [
          "validateCommentData"
        ]
      },
      "steps": [
        "addComment"
      ],
      "notes": [
        "Ensure id is valid before adding the comment."
      ]
    },
    {
      "name": "deleteComment",
      "entities": {
        "active": [
          "Comment"
        ],
        "lifecycle": [
          "addComment"
        ],
        "passive": [
          "verifyCommentNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "commentExists"
        ],
        "postconditions": [
          "verifyCommentNotExists"
        ],
        "guards": [
          "commentIsNotDeleted"
        ]
      },
      "steps": [
        "deleteComment"
      ],
      "notes": [
        "Ensure the comment ID is valid before deletion."
      ]
    },
    {
      "name": "updateCommentWithNewContent",
      "entities": {
        "active": [
          "Comment"
        ],
        "lifecycle": [
          "updateComment"
        ],
        "passive": [
          "Comment"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCommentExists"
        ],
        "postconditions": [
          "verifyCommentUpdated"
        ],
        "guards": [
          "validateCommentContent"
        ]
      },
      "steps": [
        "updateComment"
      ],
      "notes": [
        "Ensure the new content is valid and meets the requirements."
      ]
    },
    {
      "name": "deleteComments",
      "entities": {
        "active": [
          "Comments"
        ],
        "lifecycle": [
          "addComments"
        ],
        "passive": [
          "verifyCommentsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyCommentsNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteComments"
      ],
      "notes": [
        "Ensure that the Comments entity is properly referenced by id."
      ]
    },
    {
      "name": "updateCommentsWithNewContent",
      "entities": {
        "active": [
          "Comments"
        ],
        "lifecycle": [
          "updateComments"
        ],
        "passive": [
          "CommentsUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCommentsExists"
        ],
        "postconditions": [
          "verifyCommentsUpdated"
        ],
        "guards": [
          "checkCommentsUpdatePermissions"
        ]
      },
      "steps": [
        "updateComments"
      ],
      "notes": [
        "Ensure the updated content is valid and conforms to the schema."
      ]
    },
    {
      "name": "addContentVersion_1",
      "entities": {
        "active": [
          "ContentVersion"
        ],
        "lifecycle": [
          "deleteContentVersion"
        ],
        "passive": [
          "ContentVersion"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyContentVersionExists"
        ],
        "postconditions": [
          "verifyContentVersionExists"
        ],
        "guards": [
          "deleteContentVersion"
        ]
      },
      "steps": [
        "addContentVersion"
      ],
      "notes": [
        "Ensure the ContentVersion is added successfully."
      ]
    },
    {
      "name": "deleteContentVersion",
      "entities": {
        "active": [
          "ContentVersion"
        ],
        "lifecycle": [
          "addContentVersion"
        ],
        "passive": [
          "ContentVersion"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyContentVersionExists"
        ],
        "postconditions": [
          "verifyContentVersionNotExists"
        ],
        "guards": [
          "validateDeleteContentVersion"
        ]
      },
      "steps": [
        "deleteContentVersion"
      ],
      "notes": [
        "Ensure that the ContentVersion ID is valid before deletion."
      ]
    },
    {
      "name": "updateContentVersionWithNewData",
      "entities": {
        "active": [
          "ContentVersion"
        ],
        "lifecycle": [
          "createContentVersion"
        ],
        "passive": [
          "ContentVersion"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyContentVersionExists"
        ],
        "postconditions": [
          "verifyContentVersionUpdated"
        ],
        "guards": [
          "verifyContentVersionNotDeleted"
        ]
      },
      "steps": [
        "updateContentVersion"
      ],
      "notes": [
        "Ensure the update includes all required fields."
      ]
    },
    {
      "name": "deleteContentVersions",
      "entities": {
        "active": [
          "ContentVersions"
        ],
        "lifecycle": [
          "addContentVersions"
        ],
        "passive": [
          "ContentVersions"
        ]
      },
      "checks": {
        "preconditions": [
          "contentVersionsExists"
        ],
        "postconditions": [
          "verifyContentVersionsNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteContentVersions"
      ],
      "notes": [
        "Ensure to handle dependencies if any."
      ]
    },
    {
      "name": "updateContentVersions_v1",
      "entities": {
        "active": [
          "ContentVersions"
        ],
        "lifecycle": [
          "createContentVersions"
        ],
        "passive": [
          "ContentVersions"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyContentVersionsExists"
        ],
        "postconditions": [
          "verifyContentVersionsUpdated"
        ],
        "guards": [
          "validateContentVersionsUpdate"
        ]
      },
      "steps": [
        "updateContentVersions"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "updateExtensionBundle_v1",
      "entities": {
        "active": [
          "ExtensionBundle"
        ],
        "lifecycle": [
          "createExtensionBundle"
        ],
        "passive": [
          "ExtensionBundle"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyExtensionBundleExists"
        ],
        "postconditions": [
          "verifyExtensionBundleUpdated"
        ],
        "guards": [
          "verifyExtensionBundleNotUpdated"
        ]
      },
      "steps": [
        "updateExtensionBundle"
      ],
      "notes": [
        "Ensure the ExtensionBundle ID is valid."
      ]
    },
    {
      "name": "updateExtensionsWithNewData",
      "entities": {
        "active": [
          "Extensions"
        ],
        "lifecycle": [
          "updateExtensions"
        ],
        "passive": [
          "ExtensionsUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyExtensionsExists"
        ],
        "postconditions": [
          "verifyExtensionsUpdated"
        ],
        "guards": [
          "validateUpdateExtensions"
        ]
      },
      "steps": [
        "updateExtensions"
      ],
      "notes": [
        "Ensure the update data is valid and conforms to the schema."
      ]
    },
    {
      "name": "addFieldVariant1",
      "entities": {
        "active": [
          "Field"
        ],
        "lifecycle": [
          "addField"
        ],
        "passive": [
          "deleteField"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldExists"
        ],
        "postconditions": [
          "verifyFieldExists"
        ],
        "guards": [
          "deleteField"
        ]
      },
      "steps": [
        "addField"
      ],
      "notes": [
        "Ensure the Field ID is unique before adding."
      ]
    },
    {
      "name": "deleteField",
      "entities": {
        "active": [
          "Field"
        ],
        "lifecycle": [
          "addField"
        ],
        "passive": [
          "Field"
        ]
      },
      "checks": {
        "preconditions": [
          "fieldExists"
        ],
        "postconditions": [
          "verifyFieldNotExists"
        ],
        "guards": [
          "fieldExists"
        ]
      },
      "steps": [
        "deleteField"
      ],
      "notes": [
        "Ensure the field is not referenced in any other entity."
      ]
    },
    {
      "name": "updateFieldName",
      "entities": {
        "active": [
          "Field"
        ],
        "lifecycle": [
          "updateFieldName"
        ],
        "passive": [
          "FieldUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldExists"
        ],
        "postconditions": [
          "verifyFieldUpdated"
        ],
        "guards": [
          "checkFieldNameFormat"
        ]
      },
      "steps": [
        "updateFieldName"
      ],
      "notes": [
        "Ensure the Field name follows the naming conventions."
      ]
    },
    {
      "name": "addFileWithDelete",
      "entities": {
        "active": [
          "File"
        ],
        "lifecycle": [
          "deleteFile"
        ],
        "passive": [
          "File"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFileExists"
        ],
        "postconditions": [
          "verifyFileExists"
        ],
        "guards": [
          "deleteFile"
        ]
      },
      "steps": [
        "addFile"
      ],
      "notes": [
        "Ensure the file ID is unique before adding."
      ]
    },
    {
      "name": "deleteFileVariant",
      "entities": {
        "active": [
          "File"
        ],
        "lifecycle": [
          "addFile"
        ],
        "passive": [
          "verifyFileNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "fileExists"
        ],
        "postconditions": [
          "verifyFileNotExists"
        ],
        "guards": [
          "fileIsNotInUse"
        ]
      },
      "steps": [
        "deleteFile"
      ],
      "notes": [
        "Ensure the file is not in use before deletion."
      ]
    },
    {
      "name": "updateFileWithNewContent",
      "entities": {
        "active": [
          "File"
        ],
        "lifecycle": [
          "updateFile"
        ],
        "passive": [
          "File"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFileExists"
        ],
        "postconditions": [
          "verifyFileUpdated"
        ],
        "guards": [
          "checkFileContent"
        ]
      },
      "steps": [
        "updateFile"
      ],
      "notes": [
        "Ensure the updated file content is valid."
      ]
    },
    {
      "name": "deleteFilesVariant1",
      "entities": {
        "active": [
          "Files"
        ],
        "lifecycle": [
          "addFiles"
        ],
        "passive": [
          "verifyFilesNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "id is valid"
        ],
        "postconditions": [
          "verifyFilesNotExists"
        ],
        "guards": [
          "id exists"
        ]
      },
      "steps": [
        "deleteFiles"
      ],
      "notes": [
        "Ensure that the file ID is correctly specified."
      ]
    },
    {
      "name": "updateFilesVariant1",
      "entities": {
        "active": [
          "Files"
        ],
        "lifecycle": [
          "updateFiles"
        ],
        "passive": [
          "FilesUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFilesExists"
        ],
        "postconditions": [
          "verifyFilesUpdated"
        ],
        "guards": [
          "checkFilesUpdate"
        ]
      },
      "steps": [
        "updateFiles"
      ],
      "notes": [
        "Ensure the file ID is valid before updating."
      ]
    },
    {
      "name": "addFlowWithValidation",
      "entities": {
        "active": [
          "Flow"
        ],
        "lifecycle": [
          "addFlow"
        ],
        "passive": [
          "verifyFlowExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFlowExists"
        ],
        "postconditions": [
          "verifyFlowExists"
        ],
        "guards": [
          "deleteFlow"
        ]
      },
      "steps": [
        "addFlow"
      ],
      "notes": [
        "Ensure that the Flow is added successfully before verification."
      ]
    },
    {
      "name": "deleteFlow",
      "entities": {
        "active": [
          "Flow"
        ],
        "lifecycle": [
          "addFlow"
        ],
        "passive": [
          "Flow"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFlowExists"
        ],
        "postconditions": [
          "verifyFlowNotExists"
        ],
        "guards": [
          "validateFlowDeletion"
        ]
      },
      "steps": [
        "deleteFlow"
      ],
      "notes": [
        "Ensure the Flow is not in use before deletion."
      ]
    },
    {
      "name": "updateFlowWithNewData",
      "entities": {
        "active": [
          "Flow"
        ],
        "lifecycle": [
          "updateFlow"
        ],
        "passive": [
          "FlowUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFlowExists"
        ],
        "postconditions": [
          "verifyFlowUpdated"
        ],
        "guards": [
          "checkFlowUpdatePermissions"
        ]
      },
      "steps": [
        "updateFlow"
      ],
      "notes": [
        "Ensure that the Flow ID is valid before updating."
      ]
    },
    {
      "name": "deleteFlows",
      "entities": {
        "active": [
          "Flows"
        ],
        "lifecycle": [
          "addFlows"
        ],
        "passive": [
          "verifyFlowsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Flows exists"
        ],
        "postconditions": [
          "verifyFlowsNotExists"
        ],
        "guards": [
          "id is valid"
        ]
      },
      "steps": [
        "delete Flows"
      ],
      "notes": []
    },
    {
      "name": "updateFlowsVariant1",
      "entities": {
        "active": [
          "Flows"
        ],
        "lifecycle": [
          "updateFlows"
        ],
        "passive": [
          "FlowsUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFlowsExists"
        ],
        "postconditions": [
          "verifyFlowsUpdated"
        ],
        "guards": [
          "validateFlowsUpdate"
        ]
      },
      "steps": [
        "updateFlows"
      ],
      "notes": [
        "Ensure the Flows entity is correctly identified by id."
      ]
    },
    {
      "name": "addFolderWithDelete",
      "entities": {
        "active": [
          "Folder"
        ],
        "lifecycle": [
          "deleteFolder"
        ],
        "passive": [
          "verifyFolderExists"
        ]
      },
      "checks": {
        "preconditions": [
          "folderIdExists"
        ],
        "postconditions": [
          "verifyFolderExists"
        ],
        "guards": [
          "folderIdIsValid"
        ]
      },
      "steps": [
        "addFolder"
      ],
      "notes": [
        "Ensure folderId is unique before adding."
      ]
    },
    {
      "name": "deleteFolder",
      "entities": {
        "active": [
          "Folder"
        ],
        "lifecycle": [
          "addFolder"
        ],
        "passive": [
          "verifyFolderNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "folderExists"
        ],
        "postconditions": [
          "verifyFolderNotExists"
        ],
        "guards": [
          "folderIsNotInUse"
        ]
      },
      "steps": [
        "deleteFolder"
      ],
      "notes": [
        "Ensure the folder is not in use before deletion."
      ]
    },
    {
      "name": "updateFolderWithNewName",
      "entities": {
        "active": [
          "Folder"
        ],
        "lifecycle": [
          "updateFolder"
        ],
        "passive": [
          "Folder"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFolderExists"
        ],
        "postconditions": [
          "verifyFolderUpdated"
        ],
        "guards": [
          "verifyFolderNameChanged"
        ]
      },
      "steps": [
        "updateFolder"
      ],
      "notes": [
        "Ensure the new name is valid and does not conflict with existing folders."
      ]
    },
    {
      "name": "deleteFoldersVariant",
      "entities": {
        "active": [
          "Folders"
        ],
        "lifecycle": [
          "addFolders"
        ],
        "passive": [
          "verifyFoldersNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Folders exist"
        ],
        "postconditions": [
          "verifyFoldersNotExists"
        ],
        "guards": [
          "idExists"
        ]
      },
      "steps": [
        "deleteFolders"
      ],
      "notes": [
        "Ensure the correct id is provided for deletion."
      ]
    },
    {
      "name": "updateFoldersVariant1",
      "entities": {
        "active": [
          "Folders"
        ],
        "lifecycle": [
          "createFolders"
        ],
        "passive": [
          "updatedFolders"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFoldersExists"
        ],
        "postconditions": [
          "verifyFoldersUpdated"
        ],
        "guards": [
          "verifyCreateFolders"
        ]
      },
      "steps": [
        "updateFolders"
      ],
      "notes": [
        "Ensure the Folders ID is valid before updating."
      ]
    },
    {
      "name": "addItemWithDelete",
      "entities": {
        "active": [
          "Item"
        ],
        "lifecycle": [
          "deleteItem"
        ],
        "passive": [
          "verifyItemExists"
        ]
      },
      "checks": {
        "preconditions": [
          "itemIdExists"
        ],
        "postconditions": [
          "verifyItemExists"
        ],
        "guards": [
          "deleteItem"
        ]
      },
      "steps": [
        "addItem"
      ],
      "notes": [
        "Ensure itemIdExists before adding the item."
      ]
    },
    {
      "name": "deleteItem",
      "entities": {
        "active": [
          "Item"
        ],
        "lifecycle": [
          "addItem"
        ],
        "passive": [
          "Item"
        ]
      },
      "checks": {
        "preconditions": [
          "itemExists"
        ],
        "postconditions": [
          "verifyItemNotExists"
        ],
        "guards": [
          "itemIsNotInUse"
        ]
      },
      "steps": [
        "deleteItem"
      ],
      "notes": [
        "Ensure the item is not referenced by any other entities."
      ]
    },
    {
      "name": "updateItemWithNewData",
      "entities": {
        "active": [
          "Item"
        ],
        "lifecycle": [
          "updateItem"
        ],
        "passive": [
          "Item"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyItemExists"
        ],
        "postconditions": [
          "verifyItemUpdated"
        ],
        "guards": [
          "validateUpdateParams"
        ]
      },
      "steps": [
        "updateItem"
      ],
      "notes": [
        "Ensure the update parameters are valid."
      ]
    },
    {
      "name": "deleteItems",
      "entities": {
        "active": [
          "Items"
        ],
        "lifecycle": [
          "addItems"
        ],
        "passive": [
          "verifyItemsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "addItems"
        ],
        "postconditions": [
          "verifyItemsNotExists"
        ],
        "guards": []
      },
      "steps": [
        "deleteItems"
      ],
      "notes": []
    },
    {
      "name": "updateItemsById",
      "entities": {
        "active": [
          "Items"
        ],
        "lifecycle": [
          "updateItems"
        ],
        "passive": [
          "Items"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyItemsExists"
        ],
        "postconditions": [
          "verifyItemsUpdated"
        ],
        "guards": [
          "validateUpdateItems"
        ]
      },
      "steps": [
        "updateItems"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "updateLastUsedPageMe_v1",
      "entities": {
        "active": [
          "LastUsedPageMe"
        ],
        "lifecycle": [
          "createLastUsedPageMe"
        ],
        "passive": [
          "LastUsedPageMe"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyLastUsedPageMeExists"
        ],
        "postconditions": [
          "verifyLastUsedPageMeUpdated"
        ],
        "guards": [
          "verifyLastUsedPageMeNotUpdated"
        ]
      },
      "steps": [
        "updateLastUsedPageMe"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "updateUser",
      "entities": {
        "active": [
          "Me"
        ],
        "lifecycle": [
          "updateMe"
        ],
        "passive": [
          "user"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyUserExists"
        ],
        "postconditions": [
          "verifyUserUpdated"
        ],
        "guards": [
          "validateUserUpdate"
        ]
      },
      "steps": [
        "updateUser"
      ],
      "notes": [
        "Ensure user ID is valid before updating."
      ]
    },
    {
      "name": "addOperation",
      "entities": {
        "active": [
          "Operation"
        ],
        "lifecycle": [
          "deleteOperation"
        ],
        "passive": [
          "Operation"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOperationExists"
        ],
        "postconditions": [
          "verifyOperationExists"
        ],
        "guards": [
          "deleteOperation"
        ]
      },
      "steps": [
        "addOperation"
      ],
      "notes": [
        "Ensure the Operation ID is unique before adding."
      ]
    },
    {
      "name": "deleteOperation",
      "entities": {
        "active": [
          "Operation"
        ],
        "lifecycle": [
          "addOperation"
        ],
        "passive": [
          "verifyOperationNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "id is valid"
        ],
        "postconditions": [
          "verifyOperationNotExists"
        ],
        "guards": [
          "id exists"
        ]
      },
      "steps": [
        "deleteOperation"
      ],
      "notes": [
        "Ensure the operation ID is correctly specified."
      ]
    },
    {
      "name": "updateOperationWithNewParams",
      "entities": {
        "active": [
          "Operation"
        ],
        "lifecycle": [
          "updateOperation"
        ],
        "passive": [
          "OperationUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOperationExists"
        ],
        "postconditions": [
          "verifyOperationUpdated"
        ],
        "guards": [
          "checkOperationUpdatePermissions"
        ]
      },
      "steps": [
        "updateOperation"
      ],
      "notes": [
        "Ensure the update parameters are valid."
      ]
    },
    {
      "name": "deleteOperations",
      "entities": {
        "active": [
          "Operations"
        ],
        "lifecycle": [
          "addOperations"
        ],
        "passive": [
          "verifyOperationsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyOperationsNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteOperations"
      ],
      "notes": [
        "Ensure the id is valid before deletion."
      ]
    },
    {
      "name": "updateOperationsWithNewData",
      "entities": {
        "active": [
          "Operations"
        ],
        "lifecycle": [
          "updateOperations"
        ],
        "passive": [
          "OperationsUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOperationsExists"
        ],
        "postconditions": [
          "verifyOperationsUpdated"
        ],
        "guards": [
          "validateUpdateParameters"
        ]
      },
      "steps": [
        "updateOperations"
      ],
      "notes": [
        "Ensure the update parameters are valid."
      ]
    },
    {
      "name": "addPermission_001",
      "entities": {
        "active": [
          "Permission"
        ],
        "lifecycle": [
          "deletePermission"
        ],
        "passive": [
          "verifyPermissionExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyPermissionExists"
        ],
        "postconditions": [
          "verifyPermissionExists"
        ],
        "guards": [
          "deletePermission"
        ]
      },
      "steps": [
        "addPermission"
      ],
      "notes": [
        "Ensure the Permission ID is valid before adding."
      ]
    },
    {
      "name": "deletePermission",
      "entities": {
        "active": [
          "Permission"
        ],
        "lifecycle": [
          "addPermission"
        ],
        "passive": [
          "verifyPermissionNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Permission exists"
        ],
        "postconditions": [
          "verifyPermissionNotExists"
        ],
        "guards": [
          "checkPermissionDeletion"
        ]
      },
      "steps": [
        "deletePermission"
      ],
      "notes": [
        "Ensure that the Permission ID is valid before deletion."
      ]
    },
    {
      "name": "updatePermissionRole",
      "entities": {
        "active": [
          "Permission"
        ],
        "lifecycle": [
          "updateRole"
        ],
        "passive": [
          "Role"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyPermissionExists"
        ],
        "postconditions": [
          "verifyPermissionUpdated",
          "verifyRoleUpdated"
        ],
        "guards": [
          "checkRoleExists"
        ]
      },
      "steps": [
        "updatePermission",
        "updateRole"
      ],
      "notes": [
        "Ensure the Role is correctly associated with the updated Permission."
      ]
    },
    {
      "name": "deletePermissions",
      "entities": {
        "active": [
          "Permissions"
        ],
        "lifecycle": [
          "addPermissions"
        ],
        "passive": [
          "verifyPermissionsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Permissions exists"
        ],
        "postconditions": [
          "verifyPermissionsNotExists"
        ],
        "guards": [
          "validatePermissionsDeletion"
        ]
      },
      "steps": [
        "deletePermissions"
      ],
      "notes": [
        "Ensure that the Permissions ID is valid before deletion."
      ]
    },
    {
      "name": "updatePermissionsWithNewRole",
      "entities": {
        "active": [
          "Permissions"
        ],
        "lifecycle": [
          "updatePermissions"
        ],
        "passive": [
          "Roles"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyPermissionsExists"
        ],
        "postconditions": [
          "verifyPermissionsUpdated",
          "verifyRolesUpdated"
        ],
        "guards": [
          "checkRolePermissions"
        ]
      },
      "steps": [
        "updatePermissions"
      ],
      "notes": [
        "Ensure the new role is compatible with existing permissions."
      ]
    },
    {
      "name": "addPreset_001",
      "entities": {
        "active": [
          "Preset"
        ],
        "lifecycle": [
          "deletePreset"
        ],
        "passive": [
          "verifyPresetExists"
        ]
      },
      "checks": {
        "preconditions": [
          "presetIdExists"
        ],
        "postconditions": [
          "verifyPresetExists"
        ],
        "guards": [
          "deletePreset"
        ]
      },
      "steps": [
        "addPreset"
      ],
      "notes": [
        "Ensure presetId is valid before adding."
      ]
    },
    {
      "name": "deletePreset_001",
      "entities": {
        "active": [
          "Preset"
        ],
        "lifecycle": [
          "addPreset"
        ],
        "passive": [
          "verifyPresetNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "presetExists"
        ],
        "postconditions": [
          "verifyPresetNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deletePreset"
      ],
      "notes": [
        "Ensure the preset ID is valid before deletion."
      ]
    },
    {
      "name": "updatePresetWithNewValues",
      "entities": {
        "active": [
          "Preset"
        ],
        "lifecycle": [
          "updatePreset"
        ],
        "passive": [
          "PresetUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyPresetExists"
        ],
        "postconditions": [
          "verifyPresetUpdated"
        ],
        "guards": [
          "verifyPresetUpdated"
        ]
      },
      "steps": [
        "updatePreset"
      ],
      "notes": [
        "Ensure the updated values are valid and conform to the schema."
      ]
    },
    {
      "name": "deletePresets",
      "entities": {
        "active": [
          "Presets"
        ],
        "lifecycle": [
          "addPresets"
        ],
        "passive": [
          "verifyPresetsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Presets exists"
        ],
        "postconditions": [
          "verifyPresetsNotExists"
        ],
        "guards": [
          "addPresets"
        ]
      },
      "steps": [
        "deletePresets"
      ],
      "notes": [
        "Ensure that the Presets to be deleted are correctly identified."
      ]
    },
    {
      "name": "updatePresetsById",
      "entities": {
        "active": [
          "Presets"
        ],
        "lifecycle": [
          "updatePresets"
        ],
        "passive": [
          "PresetsUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyPresetsExists"
        ],
        "postconditions": [
          "verifyPresetsUpdated"
        ],
        "guards": [
          "checkPresetsUpdate"
        ]
      },
      "steps": [
        "updatePresets"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "addRelationWithDelete",
      "entities": {
        "active": [
          "Relation"
        ],
        "lifecycle": [
          "deleteRelation"
        ],
        "passive": [
          "verifyRelationExists"
        ]
      },
      "checks": {
        "preconditions": [
          "relationIdExists"
        ],
        "postconditions": [
          "verifyRelationExists"
        ],
        "guards": [
          "relationIdIsValid"
        ]
      },
      "steps": [
        "addRelation"
      ],
      "notes": [
        "Ensure relationId is valid before adding."
      ]
    },
    {
      "name": "deleteRelation",
      "entities": {
        "active": [
          "Relation"
        ],
        "lifecycle": [
          "addRelation"
        ],
        "passive": [
          "verifyRelationNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "relationExists"
        ],
        "postconditions": [
          "verifyRelationNotExists"
        ],
        "guards": [
          "relationIsNotReferenced"
        ]
      },
      "steps": [
        "deleteRelation"
      ],
      "notes": [
        "Ensure that the relation is not in use before deletion."
      ]
    },
    {
      "name": "updateRelationWithNewData",
      "entities": {
        "active": [
          "Relation"
        ],
        "lifecycle": [
          "updateRelation"
        ],
        "passive": [
          "Relation"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyRelationExists"
        ],
        "postconditions": [
          "verifyRelationUpdated"
        ],
        "guards": [
          "verifyRelationNotUpdated"
        ]
      },
      "steps": [
        "updateRelation"
      ],
      "notes": [
        "Ensure the updated data is valid and conforms to the schema."
      ]
    },
    {
      "name": "addRoleVariant1",
      "entities": {
        "active": [
          "Role"
        ],
        "lifecycle": [
          "addRole"
        ],
        "passive": [
          "deleteRole"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyRoleExists"
        ],
        "postconditions": [
          "verifyRoleExists"
        ],
        "guards": [
          "deleteRole"
        ]
      },
      "steps": [
        "addRole"
      ],
      "notes": [
        "Ensure the Role ID is unique before adding."
      ]
    },
    {
      "name": "deleteRoleAdmin",
      "entities": {
        "active": [
          "Role"
        ],
        "lifecycle": [
          "addRole"
        ],
        "passive": [
          "verifyRoleNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "roleExists"
        ],
        "postconditions": [
          "verifyRoleNotExists"
        ],
        "guards": [
          "roleIsDeletable"
        ]
      },
      "steps": [
        "deleteRole"
      ],
      "notes": [
        "Ensure the role to be deleted is not in use by any users."
      ]
    }
  ]
}