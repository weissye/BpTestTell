{
  "gold": [
    {
      "path": "/fetch_api_key",
      "method": "POST",
      "operationId": "fetch-api-key",
      "summary": "",
      "user": "{\"email\":\"user@example.com\",\"password\":\"securepassword123\"}",
      "ideal": "{\"api_key\":\"abc123xyz456\"}"
    },
    {
      "path": "/dev_fetch_api_key",
      "method": "POST",
      "operationId": "dev-fetch-api-key",
      "summary": "",
      "user": "{\"email\":\"dev@example.com\",\"password\":\"devpassword456\"}",
      "ideal": "{\"api_key\":\"devkey789xyz\"}"
    },
    {
      "path": "/get_stream_id",
      "method": "GET",
      "operationId": "get-stream-id",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the ID of a specific stream."
    },
    {
      "path": "/default_streams",
      "method": "POST",
      "operationId": "add-default-stream",
      "summary": "",
      "user": "user456",
      "ideal": "Add a stream to the default streams list."
    },
    {
      "path": "/default_streams",
      "method": "DELETE",
      "operationId": "remove-default-stream",
      "summary": "",
      "user": "user789",
      "ideal": "Remove a stream from the default streams list."
    },
    {
      "path": "/users/me/{stream_id}/topics",
      "method": "GET",
      "operationId": "get-stream-topics",
      "summary": "",
      "user": "user101",
      "ideal": "Fetch topics from a specific stream."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "GET",
      "operationId": "get-subscriptions",
      "summary": "",
      "user": "user202",
      "ideal": "Get a list of subscriptions for the user."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "POST",
      "operationId": "subscribe",
      "summary": "",
      "user": "user303",
      "ideal": "Subscribe the user to a new stream."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "PATCH",
      "operationId": "update-subscriptions",
      "summary": "",
      "user": "user404",
      "ideal": "Update the user's existing subscriptions."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "DELETE",
      "operationId": "unsubscribe",
      "summary": "",
      "user": "user505",
      "ideal": "Unsubscribe the user from a stream."
    },
    {
      "path": "/users/me/subscriptions/muted_topics",
      "method": "PATCH",
      "operationId": "mute-topic",
      "summary": "",
      "user": "user606",
      "ideal": "Mute a specific topic in a subscription."
    },
    {
      "path": "/user_topics",
      "method": "POST",
      "operationId": "update-user-topic",
      "summary": "",
      "user": "user707",
      "ideal": "Update a user's topic preferences."
    },
    {
      "path": "/users/{user_id}/subscriptions/{stream_id}",
      "method": "GET",
      "operationId": "get-subscription-status",
      "summary": "",
      "user": "user808",
      "ideal": "Check the subscription status of a user for a stream."
    },
    {
      "path": "/users/me/subscriptions/properties",
      "method": "POST",
      "operationId": "update-subscription-settings",
      "summary": "",
      "user": "user909",
      "ideal": "Update settings for the user's subscriptions."
    },
    {
      "path": "/streams/{stream_id}/members",
      "method": "GET",
      "operationId": "get-subscribers",
      "summary": "",
      "user": "user111",
      "ideal": "Retrieve the members subscribed to a stream."
    },
    {
      "path": "/streams",
      "method": "GET",
      "operationId": "get-streams",
      "summary": "",
      "user": "user222",
      "ideal": "Get a list of all available streams."
    },
    {
      "path": "/streams/{stream_id}",
      "method": "GET",
      "operationId": "get-stream-by-id",
      "summary": "",
      "user": "user333",
      "ideal": "Retrieve details of a specific stream by ID."
    },
    {
      "path": "/streams/{stream_id}",
      "method": "DELETE",
      "operationId": "archive-stream",
      "summary": "",
      "user": "user444",
      "ideal": "Archive a specific stream."
    },
    {
      "path": "/streams/{stream_id}",
      "method": "PATCH",
      "operationId": "update-stream",
      "summary": "",
      "user": "user555",
      "ideal": "Update the details of a specific stream."
    },
    {
      "path": "/streams/{stream_id}/email_address",
      "method": "GET",
      "operationId": "get-stream-email-address",
      "summary": "",
      "user": "user666",
      "ideal": "Get the email address associated with a stream."
    },
    {
      "path": "/streams/{stream_id}/delete_topic",
      "method": "POST",
      "operationId": "delete-topic",
      "summary": "",
      "user": "user777",
      "ideal": "Delete a specific topic from a stream."
    },
    {
      "path": "/channels/create",
      "method": "POST",
      "operationId": "create-channel",
      "summary": "",
      "user": "user888",
      "ideal": "Create a new channel."
    },
    {
      "path": "/channel_folders/create",
      "method": "POST",
      "operationId": "create-channel-folder",
      "summary": "",
      "user": "user999",
      "ideal": "Create a new folder for channels."
    },
    {
      "path": "/channel_folders",
      "method": "GET",
      "operationId": "get-channel-folders",
      "summary": "",
      "user": "user000",
      "ideal": "Retrieve a list of channel folders."
    },
    {
      "path": "/channel_folders",
      "method": "PATCH",
      "operationId": "patch-channel-folders",
      "summary": "",
      "user": "user1234",
      "ideal": "Update properties of channel folders."
    },
    {
      "path": "/channel_folders/{channel_folder_id}",
      "method": "PATCH",
      "operationId": "update-channel-folder",
      "summary": "",
      "user": "user5678",
      "ideal": "Update a specific channel folder."
    },
    {
      "path": "/calls/bigbluebutton/create",
      "method": "GET",
      "operationId": "create-big-blue-button-video-call",
      "summary": "",
      "user": "user91011",
      "ideal": "Create a BigBlueButton video call."
    },
    {
      "path": "/drafts",
      "method": "GET",
      "operationId": "get-drafts",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of all drafts created by the user."
    },
    {
      "path": "/drafts",
      "method": "POST",
      "operationId": "create-drafts",
      "summary": "",
      "user": "user456",
      "ideal": "Create a new draft with the provided content and title."
    },
    {
      "path": "/drafts/1",
      "method": "PATCH",
      "operationId": "edit-draft",
      "summary": "",
      "user": "user789",
      "ideal": "Update the content of the draft with ID 1."
    },
    {
      "path": "/drafts/2",
      "method": "DELETE",
      "operationId": "delete-draft",
      "summary": "",
      "user": "user101",
      "ideal": "Delete the draft with ID 2 from the user's drafts."
    },
    {
      "path": "/saved_snippets",
      "method": "GET",
      "operationId": "get-saved-snippets",
      "summary": "",
      "user": "user202",
      "ideal": "Fetch all saved snippets for the user."
    },
    {
      "path": "/saved_snippets",
      "method": "POST",
      "operationId": "create-saved-snippet",
      "summary": "",
      "user": "user303",
      "ideal": "Save a new snippet with the specified content."
    },
    {
      "path": "/saved_snippets/1",
      "method": "PATCH",
      "operationId": "edit-saved-snippet",
      "summary": "",
      "user": "user404",
      "ideal": "Modify the saved snippet with ID 1."
    },
    {
      "path": "/saved_snippets/2",
      "method": "DELETE",
      "operationId": "delete-saved-snippet",
      "summary": "",
      "user": "user505",
      "ideal": "Remove the saved snippet with ID 2 from the user's collection."
    },
    {
      "path": "/invites",
      "method": "GET",
      "operationId": "get-invites",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all pending invites for the organization."
    },
    {
      "path": "/invites",
      "method": "POST",
      "operationId": "send-invites",
      "summary": "",
      "user": "admin",
      "ideal": "Send an email invite to a new user with the specified email address."
    },
    {
      "path": "/invites/multiuse",
      "method": "POST",
      "operationId": "create-invite-link",
      "summary": "",
      "user": "admin",
      "ideal": "Create a multi-use invite link that can be shared with multiple users."
    },
    {
      "path": "/invites/{invite_id}",
      "method": "DELETE",
      "operationId": "revoke-email-invite",
      "summary": "",
      "user": "admin",
      "ideal": "Revoke a specific email invite using its unique invite ID."
    },
    {
      "path": "/invites/multiuse/{invite_id}",
      "method": "DELETE",
      "operationId": "revoke-invite-link",
      "summary": "",
      "user": "admin",
      "ideal": "Revoke a specific multi-use invite link using its unique invite ID."
    },
    {
      "path": "/invites/{invite_id}/resend",
      "method": "POST",
      "operationId": "resend-email-invite",
      "summary": "",
      "user": "admin",
      "ideal": "Resend the email invite for a user using their unique invite ID."
    },
    {
      "path": "/mark_all_as_read",
      "method": "POST",
      "operationId": "mark-all-as-read",
      "summary": "",
      "user": "User requests to mark all messages as read after a busy day.",
      "ideal": "Successfully marks all messages as read."
    },
    {
      "path": "/mark_stream_as_read",
      "method": "POST",
      "operationId": "mark-stream-as-read",
      "summary": "",
      "user": "User wants to mark a specific stream as read to focus on other topics.",
      "ideal": "Successfully marks the specified stream as read."
    },
    {
      "path": "/mark_topic_as_read",
      "method": "POST",
      "operationId": "mark-topic-as-read",
      "summary": "",
      "user": "User marks a topic as read to clear notifications.",
      "ideal": "Successfully marks the specified topic as read."
    },
    {
      "path": "/messages",
      "method": "GET",
      "operationId": "get-messages",
      "summary": "",
      "user": "User retrieves messages from a specific stream to catch up.",
      "ideal": "Returns a list of messages from the specified stream."
    },
    {
      "path": "/messages",
      "method": "POST",
      "operationId": "send-message",
      "summary": "",
      "user": "User sends a message to a group chat to share updates.",
      "ideal": "Successfully sends the message to the group chat."
    },
    {
      "path": "/messages/{message_id}/history",
      "method": "GET",
      "operationId": "get-message-history",
      "summary": "",
      "user": "User checks the history of a specific message for context.",
      "ideal": "Returns the history of the specified message."
    },
    {
      "path": "/messages/flags",
      "method": "POST",
      "operationId": "update-message-flags",
      "summary": "",
      "user": "User updates flags on messages to categorize them.",
      "ideal": "Successfully updates the flags on the specified messages."
    },
    {
      "path": "/messages/flags/narrow",
      "method": "POST",
      "operationId": "update-message-flags-for-narrow",
      "summary": "",
      "user": "User updates flags for messages in a narrowed view.",
      "ideal": "Successfully updates flags for messages in the narrowed context."
    },
    {
      "path": "/messages/render",
      "method": "POST",
      "operationId": "render-message",
      "summary": "",
      "user": "User requests to render a message with markdown formatting.",
      "ideal": "Successfully renders the message with the appropriate formatting."
    },
    {
      "path": "/messages/{message_id}/reactions",
      "method": "POST",
      "operationId": "add-reaction",
      "summary": "",
      "user": "User adds a reaction to a message to express agreement.",
      "ideal": "Successfully adds the reaction to the specified message."
    },
    {
      "path": "/messages/{message_id}/reactions",
      "method": "DELETE",
      "operationId": "remove-reaction",
      "summary": "",
      "user": "User removes their reaction from a message.",
      "ideal": "Successfully removes the reaction from the specified message."
    },
    {
      "path": "/messages/{message_id}/read_receipts",
      "method": "GET",
      "operationId": "get-read-receipts",
      "summary": "",
      "user": "User checks read receipts for a specific message to see who has read it.",
      "ideal": "Returns the read receipts for the specified message."
    },
    {
      "path": "/messages/matches_narrow",
      "method": "GET",
      "operationId": "check-messages-match-narrow",
      "summary": "",
      "user": "User checks if messages match a specific narrow filter.",
      "ideal": "Returns messages that match the specified narrow criteria."
    },
    {
      "path": "/messages/{message_id}",
      "method": "GET",
      "operationId": "get-message",
      "summary": "",
      "user": "User retrieves a specific message to review its content.",
      "ideal": "Returns the content of the specified message."
    },
    {
      "path": "/messages/{message_id}",
      "method": "PATCH",
      "operationId": "update-message",
      "summary": "",
      "user": "User updates a message to correct a typo.",
      "ideal": "Successfully updates the specified message."
    },
    {
      "path": "/messages/{message_id}",
      "method": "DELETE",
      "operationId": "delete-message",
      "summary": "",
      "user": "User deletes a message that was sent by mistake.",
      "ideal": "Successfully deletes the specified message."
    },
    {
      "path": "/messages/{message_id}/report",
      "method": "POST",
      "operationId": "report-message",
      "summary": "",
      "user": "User reports a message for inappropriate content.",
      "ideal": "Successfully reports the specified message."
    },
    {
      "path": "/user_uploads",
      "method": "POST",
      "operationId": "upload-file",
      "summary": "",
      "user": "User uploads a file to share with the team.",
      "ideal": "Successfully uploads the file."
    },
    {
      "path": "/user_uploads/{realm_id_str}/{filename}",
      "method": "GET",
      "operationId": "get-file-temporary-url",
      "summary": "",
      "user": "User retrieves a temporary URL for a recently uploaded file.",
      "ideal": "Returns the temporary URL for the specified file."
    },
    {
      "path": "/mobile_push/test_notification",
      "method": "POST",
      "operationId": "test-notify",
      "summary": "",
      "user": "user123",
      "ideal": "Send a test notification to verify mobile push setup."
    },
    {
      "path": "/mobile_push/e2ee/test_notification",
      "method": "POST",
      "operationId": "e2ee-test-notify",
      "summary": "",
      "user": "user456",
      "ideal": "Send an end-to-end encrypted test notification."
    },
    {
      "path": "/mobile_push/register",
      "method": "POST",
      "operationId": "register-push-device",
      "summary": "",
      "user": "user789",
      "ideal": "Register a mobile device for push notifications."
    },
    {
      "path": "/remotes/push/e2ee/register",
      "method": "POST",
      "operationId": "register-remote-push-device",
      "summary": "",
      "user": "user101112",
      "ideal": "Register a remote device for end-to-end encrypted push notifications."
    },
    {
      "path": "/navigation_views",
      "method": "GET",
      "operationId": "get-navigation-views",
      "summary": "",
      "user": "As a user, I want to retrieve the list of navigation views available in my Zulip organization so that I can understand how to navigate through the application.",
      "ideal": "The response should return a JSON array containing all the navigation views, including their names and associated fragments."
    },
    {
      "path": "/navigation_views",
      "method": "POST",
      "operationId": "add-navigation-view",
      "summary": "",
      "user": "As a user, I want to add a new navigation view to my Zulip organization so that I can customize my navigation experience.",
      "ideal": "The response should confirm the successful creation of the navigation view and return the details of the newly added view."
    },
    {
      "path": "/navigation_views/{fragment}",
      "method": "PATCH",
      "operationId": "edit-navigation-view",
      "summary": "",
      "user": "As a user, I want to edit an existing navigation view in my Zulip organization so that I can update its name or properties.",
      "ideal": "The response should confirm the successful update of the navigation view and return the updated details."
    },
    {
      "path": "/navigation_views/{fragment}",
      "method": "DELETE",
      "operationId": "remove-navigation-view",
      "summary": "",
      "user": "As a user, I want to remove a navigation view from my Zulip organization so that I can declutter my navigation options.",
      "ideal": "The response should confirm the successful deletion of the navigation view and indicate that it is no longer available."
    },
    {
      "path": "/events",
      "method": "GET",
      "operationId": "get-events",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of events from the Zulip server."
    },
    {
      "path": "/events",
      "method": "DELETE",
      "operationId": "delete-queue",
      "summary": "",
      "user": "user456",
      "ideal": "Delete all events from the user's event queue."
    },
    {
      "path": "/register",
      "method": "POST",
      "operationId": "register-queue",
      "summary": "",
      "user": "user789",
      "ideal": "Register a new user to the Zulip server and create an event queue."
    },
    {
      "path": "/real-time",
      "method": "POST",
      "operationId": "real-time",
      "summary": "",
      "user": "user101",
      "ideal": "Establish a real-time connection to receive events as they occur."
    },
    {
      "path": "/rest-error-handling",
      "method": "POST",
      "operationId": "rest-error-handling",
      "summary": "",
      "user": "user202",
      "ideal": "Test the API's error handling by triggering a known error condition."
    },
    {
      "path": "/reminders",
      "method": "GET",
      "operationId": "get-reminders",
      "summary": "",
      "user": "User requests to retrieve all reminders set in their Zulip account to manage their tasks effectively.",
      "ideal": "Returns a list of reminders with details such as reminder ID, content, and time."
    },
    {
      "path": "/reminders",
      "method": "POST",
      "operationId": "create-message-reminder",
      "summary": "",
      "user": "User wants to create a reminder for an important message to follow up later.",
      "ideal": "Successfully creates a reminder and returns the reminder ID and confirmation message."
    },
    {
      "path": "/reminders/{reminder_id}",
      "method": "DELETE",
      "operationId": "delete-reminder",
      "summary": "",
      "user": "User decides to delete a reminder that is no longer needed.",
      "ideal": "Confirms the deletion of the reminder and returns a success message."
    },
    {
      "path": "/scheduled_messages",
      "method": "GET",
      "operationId": "get-scheduled-messages",
      "summary": "",
      "user": "user_123",
      "ideal": "Retrieve a list of scheduled messages for the user."
    },
    {
      "path": "/scheduled_messages",
      "method": "POST",
      "operationId": "create-scheduled-message",
      "summary": "",
      "user": "user_456",
      "ideal": "Create a new scheduled message with specified content and time."
    },
    {
      "path": "/scheduled_messages/{scheduled_message_id}",
      "method": "PATCH",
      "operationId": "update-scheduled-message",
      "summary": "",
      "user": "user_789",
      "ideal": "Update the content or time of an existing scheduled message."
    },
    {
      "path": "/scheduled_messages/{scheduled_message_id}",
      "method": "DELETE",
      "operationId": "delete-scheduled-message",
      "summary": "",
      "user": "user_101",
      "ideal": "Delete a specific scheduled message by its ID."
    },
    {
      "path": "/realm/emoji/custom_emoji",
      "method": "POST",
      "operationId": "upload-custom-emoji",
      "summary": "",
      "user": "User123 uploaded a new custom emoji named 'custom_emoji' to enhance the team's communication.",
      "ideal": "Successfully uploaded the custom emoji."
    },
    {
      "path": "/realm/emoji/custom_emoji",
      "method": "DELETE",
      "operationId": "deactivate-custom-emoji",
      "summary": "",
      "user": "User123 decided to deactivate the custom emoji 'custom_emoji' as it was no longer relevant.",
      "ideal": "Successfully deactivated the custom emoji."
    },
    {
      "path": "/realm/emoji",
      "method": "GET",
      "operationId": "get-custom-emoji",
      "summary": "",
      "user": "User123 wanted to view all custom emojis available in the realm.",
      "ideal": "Retrieved a list of all custom emojis."
    },
    {
      "path": "/realm/presence",
      "method": "GET",
      "operationId": "get-presence",
      "summary": "",
      "user": "User123 checked the presence status of team members to see who is online.",
      "ideal": "Successfully retrieved presence information."
    },
    {
      "path": "/realm/profile_fields",
      "method": "GET",
      "operationId": "get-custom-profile-fields",
      "summary": "",
      "user": "User123 wanted to see the custom profile fields set up for the realm.",
      "ideal": "Retrieved a list of custom profile fields."
    },
    {
      "path": "/realm/profile_fields",
      "method": "PATCH",
      "operationId": "reorder-custom-profile-fields",
      "summary": "",
      "user": "User123 reordered the custom profile fields to prioritize important information.",
      "ideal": "Successfully reordered the custom profile fields."
    },
    {
      "path": "/realm/profile_fields",
      "method": "POST",
      "operationId": "create-custom-profile-field",
      "summary": "",
      "user": "User123 created a new custom profile field for 'Favorite Color' to personalize profiles.",
      "ideal": "Successfully created a new custom profile field."
    },
    {
      "path": "/realm/user_settings_defaults",
      "method": "PATCH",
      "operationId": "update-realm-user-settings-defaults",
      "summary": "",
      "user": "User123 updated the default user settings for better user experience.",
      "ideal": "Successfully updated user settings defaults."
    },
    {
      "path": "/realm/linkifiers",
      "method": "GET",
      "operationId": "get-linkifiers",
      "summary": "",
      "user": "User123 wanted to review the linkifiers set up in the realm.",
      "ideal": "Retrieved a list of all linkifiers."
    },
    {
      "path": "/realm/linkifiers",
      "method": "PATCH",
      "operationId": "reorder-linkifiers",
      "summary": "",
      "user": "User123 reordered the linkifiers to improve their effectiveness.",
      "ideal": "Successfully reordered the linkifiers."
    },
    {
      "path": "/realm/filters",
      "method": "POST",
      "operationId": "add-linkifier",
      "summary": "",
      "user": "User123 added a new linkifier for URLs to enhance message formatting.",
      "ideal": "Successfully added a new linkifier."
    },
    {
      "path": "/realm/filters/1",
      "method": "DELETE",
      "operationId": "remove-linkifier",
      "summary": "",
      "user": "User123 removed an outdated linkifier that was no longer needed.",
      "ideal": "Successfully removed the linkifier."
    },
    {
      "path": "/realm/filters/1",
      "method": "PATCH",
      "operationId": "update-linkifier",
      "summary": "",
      "user": "User123 updated the linkifier to improve its matching criteria.",
      "ideal": "Successfully updated the linkifier."
    },
    {
      "path": "/realm/playgrounds",
      "method": "POST",
      "operationId": "add-code-playground",
      "summary": "",
      "user": "User123 created a new code playground for testing JavaScript snippets.",
      "ideal": "Successfully added a new code playground."
    },
    {
      "path": "/realm/playgrounds/1",
      "method": "DELETE",
      "operationId": "remove-code-playground",
      "summary": "",
      "user": "User123 deleted an unused code playground to keep the workspace tidy.",
      "ideal": "Successfully removed the code playground."
    },
    {
      "path": "/export/realm",
      "method": "GET",
      "operationId": "get-realm-exports",
      "summary": "",
      "user": "User123 checked the status of realm exports to ensure data availability.",
      "ideal": "Retrieved the status of realm exports."
    },
    {
      "path": "/export/realm",
      "method": "POST",
      "operationId": "export-realm",
      "summary": "",
      "user": "User123 initiated a realm export to back up important data.",
      "ideal": "Successfully initiated realm export."
    },
    {
      "path": "/export/realm/consents",
      "method": "GET",
      "operationId": "get-realm-export-consents",
      "summary": "",
      "user": "User123 wanted to review the consents related to realm exports.",
      "ideal": "Retrieved a list of export consents."
    },
    {
      "path": "/realm/test_welcome_bot_custom_message",
      "method": "POST",
      "operationId": "test-welcome-bot-custom-message",
      "summary": "",
      "user": "User123 tested the welcome bot's custom message to ensure it works as intended.",
      "ideal": "Successfully tested the welcome bot custom message."
    },
    {
      "path": "/server_settings",
      "method": "GET",
      "operationId": "get-server-settings",
      "summary": "",
      "user": "User123 checked the server settings to verify configurations.",
      "ideal": "Retrieved the current server settings."
    },
    {
      "path": "/users",
      "method": "GET",
      "operationId": "get-users",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of all users in the organization."
    },
    {
      "path": "/users",
      "method": "POST",
      "operationId": "create-user",
      "summary": "",
      "user": "adminUser",
      "ideal": "Create a new user with the provided details."
    },
    {
      "path": "/users/me",
      "method": "GET",
      "operationId": "get-own-user",
      "summary": "",
      "user": "currentUser",
      "ideal": "Fetch the details of the currently authenticated user."
    },
    {
      "path": "/users/me/alert_words",
      "method": "POST",
      "operationId": "add-alert-words",
      "summary": "",
      "user": "alertUser",
      "ideal": "Add specific words to the user's alert words list."
    },
    {
      "path": "/users/{user_id}/status",
      "method": "POST",
      "operationId": "update-status-for-user",
      "summary": "",
      "user": "managerUser",
      "ideal": "Update the status message for a specific user."
    },
    {
      "path": "/users/{user_id}/presence",
      "method": "GET",
      "operationId": "get-user-presence",
      "summary": "",
      "user": "teamLead",
      "ideal": "Check the presence status of a specific user."
    },
    {
      "path": "/user_groups",
      "method": "GET",
      "operationId": "get-user-groups",
      "summary": "",
      "user": "groupAdmin",
      "ideal": "Retrieve a list of all user groups in the organization."
    },
    {
      "path": "/user_groups/{user_group_id}/members",
      "method": "GET",
      "operationId": "get-user-group-members",
      "summary": "",
      "user": "groupManager",
      "ideal": "Get the members of a specific user group."
    },
    {
      "path": "/user_groups/{user_group_id}/members",
      "method": "POST",
      "operationId": "update-user-group-members",
      "summary": "",
      "user": "groupAdmin",
      "ideal": "Add or remove members from a specific user group."
    },
    {
      "path": "/attachments",
      "method": "GET",
      "operationId": "get-attachments",
      "summary": "",
      "user": "fileManager",
      "ideal": "Retrieve a list of all attachments available."
    },
    {
      "path": "/zulip-outgoing-webhook",
      "method": "POST",
      "operationId": "zulip-outgoing-webhooks",
      "summary": "",
      "user": "user@example.com",
      "ideal": "This endpoint allows you to send outgoing webhooks from Zulip to an external service. The request should include the necessary payload, such as the content of the message and the stream it originated from."
    }
  ]
}