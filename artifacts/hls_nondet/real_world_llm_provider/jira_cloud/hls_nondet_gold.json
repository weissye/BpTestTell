{
  "stories": [
    {
      "name": "deleteActor",
      "entities": {
        "active": [
          "Actor"
        ],
        "lifecycle": [
          "addActor"
        ],
        "passive": [
          "Actor"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyActorExists"
        ],
        "postconditions": [
          "verifyActorNotExists"
        ],
        "guards": [
          "validateDeleteActor"
        ]
      },
      "steps": [
        "deleteActor"
      ],
      "notes": [
        "Ensure the Actor ID is valid before deletion."
      ]
    },
    {
      "name": "addActorUsers",
      "entities": {
        "active": [
          "ActorUsers"
        ],
        "lifecycle": [
          "deleteActorUsers"
        ],
        "passive": [
          "verifyActorUsersExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyActorUsersExists"
        ],
        "guards": [
          "idNotEmpty"
        ]
      },
      "steps": [
        "addActorUsers"
      ],
      "notes": [
        "Ensure id is valid before adding ActorUsers."
      ]
    },
    {
      "name": "deleteAddonProperty",
      "entities": {
        "active": [
          "AddonProperty_delete"
        ],
        "lifecycle": [
          "addAddonProperty_delete"
        ],
        "passive": [
          "AddonProperty_delete"
        ]
      },
      "checks": {
        "preconditions": [
          "AddonProperty_deleteExists"
        ],
        "postconditions": [
          "verifyAddonProperty_deleteNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteAddonProperty_delete"
      ],
      "notes": [
        "Ensure the AddonProperty_delete is not referenced by other entities."
      ]
    },
    {
      "name": "deleteAndReplaceVersion",
      "entities": {
        "active": [
          "addAndReplaceVersion"
        ],
        "lifecycle": [
          "deleteAndReplaceVersion"
        ],
        "passive": [
          "verifyAndReplaceVersionNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyAndReplaceVersionNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteAndReplaceVersion"
      ],
      "notes": [
        "Ensure that the version ID is valid before deletion."
      ]
    },
    {
      "name": "deleteAndSwap",
      "entities": {
        "active": [
          "addAndSwap"
        ],
        "lifecycle": [
          "deleteAndSwap"
        ],
        "passive": [
          "verifyAndSwapNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyAndSwapNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteAndSwap"
      ],
      "notes": [
        "Ensure the id is valid before deletion."
      ]
    },
    {
      "name": "addAssociations",
      "entities": {
        "active": [
          "Associations"
        ],
        "lifecycle": [
          "deleteAssociations"
        ],
        "passive": [
          "verifyAssociationsExists"
        ]
      },
      "checks": {
        "preconditions": [
          "id is valid"
        ],
        "postconditions": [
          "verifyAssociationsExists"
        ],
        "guards": [
          "id must not be empty"
        ]
      },
      "steps": [
        "addAssociations"
      ],
      "notes": []
    },
    {
      "name": "deleteAssociations",
      "entities": {
        "active": [
          "Associations"
        ],
        "lifecycle": [
          "addAssociations"
        ],
        "passive": [
          "verifyAssociationsNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "associationsExist"
        ],
        "postconditions": [
          "verifyAssociationsNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteAssociations"
      ],
      "notes": [
        "Ensure that the associations to be deleted are correctly identified."
      ]
    },
    {
      "name": "addAtlassianTeam",
      "entities": {
        "active": [
          "AtlassianTeam"
        ],
        "lifecycle": [
          "deleteAtlassianTeam"
        ],
        "passive": [
          "AtlassianTeam"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyAtlassianTeamExists"
        ],
        "postconditions": [
          "verifyAtlassianTeamExists"
        ],
        "guards": [
          "deleteAtlassianTeam"
        ]
      },
      "steps": [
        "addAtlassianTeam"
      ],
      "notes": [
        "Ensure the team ID is valid before adding."
      ]
    },
    {
      "name": "deleteAtlassianTeam",
      "entities": {
        "active": [
          "AtlassianTeam"
        ],
        "lifecycle": [
          "addAtlassianTeam"
        ],
        "passive": [
          "AtlassianTeam"
        ]
      },
      "checks": {
        "preconditions": [
          "addAtlassianTeam"
        ],
        "postconditions": [
          "verifyAtlassianTeamNotExists"
        ],
        "guards": [
          "validateAtlassianTeamDeletion"
        ]
      },
      "steps": [
        "deleteAtlassianTeam"
      ],
      "notes": []
    },
    {
      "name": "updateTeam",
      "entities": {
        "active": [
          "AtlassianTeam"
        ],
        "lifecycle": [
          "createAtlassianTeam"
        ],
        "passive": [
          "AtlassianTeam"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyAtlassianTeamExists"
        ],
        "postconditions": [
          "verifyAtlassianTeamUpdated"
        ],
        "guards": [
          "verifyAtlassianTeamUpdateAllowed"
        ]
      },
      "steps": [
        "updateAtlassianTeam"
      ],
      "notes": [
        "Ensure the team ID is valid before updating."
      ]
    },
    {
      "name": "addAttachment_v1",
      "entities": {
        "active": [
          "Attachment"
        ],
        "lifecycle": [
          "deleteAttachment"
        ],
        "passive": [
          "Attachment"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyAttachmentExists"
        ],
        "postconditions": [
          "verifyAttachmentExists"
        ],
        "guards": [
          "deleteAttachment"
        ]
      },
      "steps": [
        "addAttachment"
      ],
      "notes": [
        "Ensure the attachment ID is valid before adding."
      ]
    },
    {
      "name": "deleteAttachment",
      "entities": {
        "active": [
          "Attachment"
        ],
        "lifecycle": [
          "addAttachment"
        ],
        "passive": [
          "Attachment"
        ]
      },
      "checks": {
        "preconditions": [
          "attachmentExists"
        ],
        "postconditions": [
          "verifyAttachmentNotExists"
        ],
        "guards": [
          "attachmentIsNotInUse"
        ]
      },
      "steps": [
        "deleteAttachment"
      ],
      "notes": [
        "Ensure the attachment is not referenced by any issues before deletion."
      ]
    },
    {
      "name": "deleteAvatar",
      "entities": {
        "active": [
          "Avatar"
        ],
        "lifecycle": [
          "addAvatar"
        ],
        "passive": [
          "User"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyAvatarExists"
        ],
        "postconditions": [
          "verifyAvatarNotExists"
        ],
        "guards": [
          "userHasPermissionToDelete"
        ]
      },
      "steps": [
        "deleteAvatar"
      ],
      "notes": [
        "Ensure the user has the necessary permissions before deletion."
      ]
    },
    {
      "name": "addComment",
      "entities": {
        "active": [
          "Comment"
        ],
        "lifecycle": [
          "deleteComment"
        ],
        "passive": [
          "Issue"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyIssueExists"
        ],
        "postconditions": [
          "verifyCommentExists"
        ],
        "guards": [
          "verifyCommentNotExists"
        ]
      },
      "steps": [
        "addComment"
      ],
      "notes": [
        "Ensure the comment is relevant to the issue."
      ]
    },
    {
      "name": "deleteComment",
      "entities": {
        "active": [
          "Comment"
        ],
        "lifecycle": [
          "addComment"
        ],
        "passive": [
          "Issue"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCommentExists"
        ],
        "postconditions": [
          "verifyCommentNotExists"
        ],
        "guards": [
          "verifyIssueExists"
        ]
      },
      "steps": [
        "deleteComment"
      ],
      "notes": [
        "Ensure the comment ID is valid before deletion."
      ]
    },
    {
      "name": "updateCommentWithNewText",
      "entities": {
        "active": [
          "Comment"
        ],
        "lifecycle": [
          "updateComment"
        ],
        "passive": [
          "Comment"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCommentExists"
        ],
        "postconditions": [
          "verifyCommentUpdated"
        ],
        "guards": [
          "verifyCommentNotUpdated"
        ]
      },
      "steps": [
        "updateComment"
      ],
      "notes": [
        "Ensure the updated comment contains the new text."
      ]
    },
    {
      "name": "deleteCommentProperty",
      "entities": {
        "active": [
          "CommentProperty"
        ],
        "lifecycle": [
          "addCommentProperty"
        ],
        "passive": [
          "CommentProperty"
        ]
      },
      "checks": {
        "preconditions": [
          "commentPropertyExists"
        ],
        "postconditions": [
          "verifyCommentPropertyNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteCommentProperty"
      ],
      "notes": [
        "Ensure the commentProperty is not referenced by other entities."
      ]
    },
    {
      "name": "addComponent",
      "entities": {
        "active": [
          "Component"
        ],
        "lifecycle": [
          "deleteComponent"
        ],
        "passive": [
          "Component"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyComponentExists"
        ],
        "postconditions": [
          "verifyComponentExists"
        ],
        "guards": [
          "deleteComponent"
        ]
      },
      "steps": [
        "addComponent"
      ],
      "notes": [
        "Ensure the Component ID is valid before adding."
      ]
    },
    {
      "name": "deleteComponent",
      "entities": {
        "active": [
          "Component"
        ],
        "lifecycle": [
          "addComponent"
        ],
        "passive": [
          "verifyComponentNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "componentExists"
        ],
        "postconditions": [
          "verifyComponentNotExists"
        ],
        "guards": [
          "componentIsNotInUse"
        ]
      },
      "steps": [
        "deleteComponent"
      ],
      "notes": [
        "Ensure the component is not referenced by any other entities."
      ]
    },
    {
      "name": "updateComponentWithNewName",
      "entities": {
        "active": [
          "Component"
        ],
        "lifecycle": [
          "updateComponent"
        ],
        "passive": [
          "ComponentUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyComponentExists"
        ],
        "postconditions": [
          "verifyComponentUpdated"
        ],
        "guards": [
          "checkComponentName"
        ]
      },
      "steps": [
        "updateComponent"
      ],
      "notes": [
        "Ensure the new name is valid and does not conflict with existing components."
      ]
    },
    {
      "name": "addCustomField_001",
      "entities": {
        "active": [
          "CustomField"
        ],
        "lifecycle": [
          "deleteCustomField"
        ],
        "passive": [
          "CustomField"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldExists"
        ],
        "postconditions": [
          "verifyCustomFieldExists"
        ],
        "guards": [
          "deleteCustomField"
        ]
      },
      "steps": [
        "addCustomField"
      ],
      "notes": [
        "Ensure the CustomField ID is valid before adding."
      ]
    },
    {
      "name": "deleteCustomField",
      "entities": {
        "active": [
          "CustomField"
        ],
        "lifecycle": [
          "addCustomField"
        ],
        "passive": [
          "CustomField"
        ]
      },
      "checks": {
        "preconditions": [
          "customFieldExists"
        ],
        "postconditions": [
          "verifyCustomFieldNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteCustomField"
      ],
      "notes": [
        "Ensure the CustomField ID is valid before deletion."
      ]
    },
    {
      "name": "updateCustomFieldById",
      "entities": {
        "active": [
          "CustomField"
        ],
        "lifecycle": [
          "updateCustomField"
        ],
        "passive": [
          "CustomField"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldExists"
        ],
        "postconditions": [
          "verifyCustomFieldUpdated"
        ],
        "guards": [
          "validateCustomFieldUpdate"
        ]
      },
      "steps": [
        "updateCustomField"
      ],
      "notes": [
        "Ensure the CustomField ID is valid before updating."
      ]
    },
    {
      "name": "updateCustomFieldConfig_1",
      "entities": {
        "active": [
          "CustomFieldConfiguration"
        ],
        "lifecycle": [
          "updateCustomFieldConfiguration"
        ],
        "passive": [
          "CustomFieldConfiguration"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldConfigurationExists"
        ],
        "postconditions": [
          "verifyCustomFieldConfigurationUpdated"
        ],
        "guards": [
          "validateCustomFieldConfigurationUpdate"
        ]
      },
      "steps": [
        "updateCustomFieldConfiguration"
      ],
      "notes": [
        "Ensure the id parameter is valid before updating."
      ]
    },
    {
      "name": "addCustomFieldContext",
      "entities": {
        "active": [
          "CustomFieldContext"
        ],
        "lifecycle": [
          "deleteCustomFieldContext"
        ],
        "passive": [
          "CustomFieldContext"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldContextExists"
        ],
        "postconditions": [
          "verifyCustomFieldContextExists"
        ],
        "guards": [
          "deleteCustomFieldContext"
        ]
      },
      "steps": [
        "addCustomFieldContext"
      ],
      "notes": [
        "Ensure the CustomFieldContext ID is valid before adding."
      ]
    },
    {
      "name": "deleteCustomFieldContext",
      "entities": {
        "active": [
          "CustomFieldContext"
        ],
        "lifecycle": [
          "addCustomFieldContext"
        ],
        "passive": [
          "CustomFieldContext"
        ]
      },
      "checks": {
        "preconditions": [
          "customFieldContextExists"
        ],
        "postconditions": [
          "verifyCustomFieldContextNotExists"
        ],
        "guards": [
          "validateCustomFieldContextDeletion"
        ]
      },
      "steps": [
        "deleteCustomFieldContext"
      ],
      "notes": [
        "Ensure that the CustomFieldContext is not referenced by any other entities."
      ]
    },
    {
      "name": "updateCustomFieldContext_1",
      "entities": {
        "active": [
          "CustomFieldContext"
        ],
        "lifecycle": [
          "updateCustomFieldContext"
        ],
        "passive": [
          "CustomFieldContext"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldContextExists"
        ],
        "postconditions": [
          "verifyCustomFieldContextUpdated"
        ],
        "guards": [
          "validateCustomFieldContextUpdate"
        ]
      },
      "steps": [
        "updateCustomFieldContext"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "deleteCustomFieldContext",
      "entities": {
        "active": [
          "CustomFieldContextFromProjects"
        ],
        "lifecycle": [
          "addCustomFieldContextFromProjects"
        ],
        "passive": [
          "CustomFieldContextFromProjects"
        ]
      },
      "checks": {
        "preconditions": [
          "customFieldContextFromProjectsExists"
        ],
        "postconditions": [
          "customFieldContextFromProjectsNotExists"
        ],
        "guards": [
          "verifyCustomFieldContextFromProjectsNotExists"
        ]
      },
      "steps": [
        "deleteCustomFieldContextFromProjects"
      ],
      "notes": [
        "Ensure the custom field context is not referenced by any active projects."
      ]
    },
    {
      "name": "addCustomFieldOption",
      "entities": {
        "active": [
          "CustomFieldOption"
        ],
        "lifecycle": [
          "deleteCustomFieldOption"
        ],
        "passive": [
          "CustomFieldOption"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldOptionExists"
        ],
        "postconditions": [
          "verifyCustomFieldOptionExists"
        ],
        "guards": [
          "deleteCustomFieldOption"
        ]
      },
      "steps": [
        "addCustomFieldOption"
      ],
      "notes": [
        "Ensure the CustomFieldOption ID is valid before adding."
      ]
    },
    {
      "name": "deleteCustomFieldOption",
      "entities": {
        "active": [
          "CustomFieldOption"
        ],
        "lifecycle": [
          "addCustomFieldOption"
        ],
        "passive": [
          "CustomFieldOption"
        ]
      },
      "checks": {
        "preconditions": [
          "customFieldOptionExists"
        ],
        "postconditions": [
          "verifyCustomFieldOptionNotExists"
        ],
        "guards": [
          "validateCustomFieldOptionDeletion"
        ]
      },
      "steps": [
        "deleteCustomFieldOption"
      ],
      "notes": [
        "Ensure that the CustomFieldOption ID is valid before deletion."
      ]
    },
    {
      "name": "updateCustomFieldOption_1",
      "entities": {
        "active": [
          "CustomFieldOption"
        ],
        "lifecycle": [
          "updateCustomFieldOption"
        ],
        "passive": [
          "CustomFieldOption"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldOptionExists"
        ],
        "postconditions": [
          "verifyCustomFieldOptionUpdated"
        ],
        "guards": [
          "validateCustomFieldOptionUpdate"
        ]
      },
      "steps": [
        "updateCustomFieldOption"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "updateCustomFieldValueWithNewData",
      "entities": {
        "active": [
          "CustomFieldValue"
        ],
        "lifecycle": [
          "updateCustomFieldValue"
        ],
        "passive": [
          "CustomFieldValue"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCustomFieldValueExists"
        ],
        "postconditions": [
          "verifyCustomFieldValueUpdated"
        ],
        "guards": [
          "validateCustomFieldValueUpdate"
        ]
      },
      "steps": [
        "updateCustomFieldValue"
      ],
      "notes": [
        "Ensure the id parameter is valid and corresponds to an existing CustomFieldValue."
      ]
    },
    {
      "name": "addDashboard_001",
      "entities": {
        "active": [
          "Dashboard"
        ],
        "lifecycle": [
          "deleteDashboard"
        ],
        "passive": [
          "verifyDashboardExists"
        ]
      },
      "checks": {
        "preconditions": [
          "dashboardIdExists"
        ],
        "postconditions": [
          "verifyDashboardExists"
        ],
        "guards": [
          "deleteDashboard"
        ]
      },
      "steps": [
        "addDashboard"
      ],
      "notes": [
        "Ensure the dashboard ID is valid before adding."
      ]
    },
    {
      "name": "deleteDashboardVariant",
      "entities": {
        "active": [
          "Dashboard"
        ],
        "lifecycle": [
          "addDashboard"
        ],
        "passive": [
          "verifyDashboardNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "dashboardExists"
        ],
        "postconditions": [
          "verifyDashboardNotExists"
        ],
        "guards": [
          "addDashboard"
        ]
      },
      "steps": [
        "deleteDashboard"
      ],
      "notes": [
        "Ensure the dashboard ID is valid before deletion."
      ]
    },
    {
      "name": "updateDashboardVariant",
      "entities": {
        "active": [
          "Dashboard"
        ],
        "lifecycle": [
          "createDashboard"
        ],
        "passive": [
          "user"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDashboardExists"
        ],
        "postconditions": [
          "verifyDashboardUpdated"
        ],
        "guards": [
          "verifyUserPermissions"
        ]
      },
      "steps": [
        "updateDashboard"
      ],
      "notes": [
        "Ensure user has the necessary permissions to update the dashboard."
      ]
    },
    {
      "name": "deleteDashboardItemProperty",
      "entities": {
        "active": [
          "DashboardItemProperty"
        ],
        "lifecycle": [
          "addDashboardItemProperty"
        ],
        "passive": [
          "DashboardItemProperty"
        ]
      },
      "checks": {
        "preconditions": [
          "dashboardItemPropertyExists"
        ],
        "postconditions": [
          "verifyDashboardItemPropertyNotExists"
        ],
        "guards": [
          "validateDeleteDashboardItemProperty"
        ]
      },
      "steps": [
        "deleteDashboardItemProperty"
      ],
      "notes": [
        "Ensure that the DashboardItemProperty is not referenced by other entities."
      ]
    },
    {
      "name": "deleteDefaultProjectClassification",
      "entities": {
        "active": [
          "DefaultProjectClassification"
        ],
        "lifecycle": [
          "addDefaultProjectClassification"
        ],
        "passive": [
          "DefaultProjectClassification"
        ]
      },
      "checks": {
        "preconditions": [
          "DefaultProjectClassificationExists"
        ],
        "postconditions": [
          "verifyDefaultProjectClassificationNotExists"
        ],
        "guards": [
          "ensureDefaultProjectClassificationIsNotDeleted"
        ]
      },
      "steps": [
        "deleteDefaultProjectClassification"
      ],
      "notes": [
        "Ensure to handle dependencies if any exist."
      ]
    },
    {
      "name": "updateProjectClassification",
      "entities": {
        "active": [
          "DefaultProjectClassification"
        ],
        "lifecycle": [
          "createDefaultProjectClassification"
        ],
        "passive": [
          "DefaultProjectClassification"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDefaultProjectClassificationExists"
        ],
        "postconditions": [
          "verifyDefaultProjectClassificationUpdated"
        ],
        "guards": [
          "verifyDefaultProjectClassificationNotDeleted"
        ]
      },
      "steps": [
        "updateDefaultProjectClassification"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "updateScreenScheme",
      "entities": {
        "active": [
          "DefaultScreenScheme"
        ],
        "lifecycle": [
          "createDefaultScreenScheme"
        ],
        "passive": [
          "DefaultScreenSchemeUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDefaultScreenSchemeExists"
        ],
        "postconditions": [
          "verifyDefaultScreenSchemeUpdated"
        ],
        "guards": [
          "validateScreenSchemeUpdate"
        ]
      },
      "steps": [
        "updateDefaultScreenScheme"
      ],
      "notes": []
    },
    {
      "name": "deleteDefaultWorkflow",
      "entities": {
        "active": [
          "DefaultWorkflow"
        ],
        "lifecycle": [
          "addDefaultWorkflow"
        ],
        "passive": [
          "verifyDefaultWorkflowNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "DefaultWorkflowExists"
        ],
        "postconditions": [
          "verifyDefaultWorkflowNotExists"
        ],
        "guards": [
          "addDefaultWorkflow"
        ]
      },
      "steps": [
        "deleteDefaultWorkflow"
      ],
      "notes": [
        "Ensure to check for dependencies before deletion."
      ]
    },
    {
      "name": "updateDefaultWorkflow_v1",
      "entities": {
        "active": [
          "DefaultWorkflow"
        ],
        "lifecycle": [
          "updateDefaultWorkflow"
        ],
        "passive": [
          "DefaultWorkflowUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDefaultWorkflowExists"
        ],
        "postconditions": [
          "verifyDefaultWorkflowUpdated"
        ],
        "guards": [
          "ensureDefaultWorkflowUpdateSuccessful"
        ]
      },
      "steps": [
        "updateDefaultWorkflow"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "deleteDraftDefaultWorkflow",
      "entities": {
        "active": [
          "DraftDefaultWorkflow"
        ],
        "lifecycle": [
          "addDraftDefaultWorkflow"
        ],
        "passive": [
          "DraftDefaultWorkflow"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDraftDefaultWorkflowExists"
        ],
        "postconditions": [
          "verifyDraftDefaultWorkflowNotExists"
        ],
        "guards": [
          "addDraftDefaultWorkflow"
        ]
      },
      "steps": [
        "deleteDraftDefaultWorkflow"
      ],
      "notes": [
        "Ensure that the DraftDefaultWorkflow is not in use before deletion."
      ]
    },
    {
      "name": "updateDraftWorkflow",
      "entities": {
        "active": [
          "DraftDefaultWorkflow"
        ],
        "lifecycle": [
          "updateDraftDefaultWorkflow"
        ],
        "passive": [
          "DraftDefaultWorkflowUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDraftDefaultWorkflowExists"
        ],
        "postconditions": [
          "verifyDraftDefaultWorkflowUpdated"
        ],
        "guards": [
          "ensureDraftDefaultWorkflowNotInUse"
        ]
      },
      "steps": [
        "updateDraftDefaultWorkflow"
      ],
      "notes": [
        "Ensure to backup the current workflow before updating."
      ]
    },
    {
      "name": "deleteDraftWorkflowMapping_1",
      "entities": {
        "active": [
          "DraftWorkflowMapping"
        ],
        "lifecycle": [
          "addDraftWorkflowMapping"
        ],
        "passive": [
          "DraftWorkflowMapping"
        ]
      },
      "checks": {
        "preconditions": [
          "DraftWorkflowMappingExists"
        ],
        "postconditions": [
          "verifyDraftWorkflowMappingNotExists"
        ],
        "guards": [
          "addDraftWorkflowMapping"
        ]
      },
      "steps": [
        "deleteDraftWorkflowMapping"
      ],
      "notes": [
        "Ensure the DraftWorkflowMapping is not in use before deletion."
      ]
    },
    {
      "name": "updateWorkflowMapping",
      "entities": {
        "active": [
          "DraftWorkflowMapping"
        ],
        "lifecycle": [
          "createDraftWorkflowMapping"
        ],
        "passive": [
          "DraftWorkflowMapping"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyDraftWorkflowMappingExists"
        ],
        "postconditions": [
          "verifyDraftWorkflowMappingUpdated"
        ],
        "guards": [
          "verifyDraftWorkflowMappingNotUpdated"
        ]
      },
      "steps": [
        "updateDraftWorkflowMapping"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "updateEntityPropertiesValue",
      "entities": {
        "active": [
          "EntityPropertiesValue_put"
        ],
        "lifecycle": [
          "createEntityPropertiesValue_put"
        ],
        "passive": [
          "EntityPropertiesValue_put"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyEntityPropertiesValue_putExists"
        ],
        "postconditions": [
          "verifyEntityPropertiesValue_putUpdated"
        ],
        "guards": [
          "checkEntityPropertiesValue_putUpdateAllowed"
        ]
      },
      "steps": [
        "updateEntityPropertiesValue_put"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "removeFavouriteForFilter",
      "entities": {
        "active": [
          "FavouriteForFilter"
        ],
        "lifecycle": [
          "addFavouriteForFilter"
        ],
        "passive": [
          "verifyFavouriteForFilterNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "FavouriteForFilter exists"
        ],
        "postconditions": [
          "verifyFavouriteForFilterNotExists"
        ],
        "guards": [
          "id is valid"
        ]
      },
      "steps": [
        "deleteFavouriteForFilter"
      ],
      "notes": [
        "Ensure the FavouriteForFilter is properly removed before verification."
      ]
    },
    {
      "name": "addFieldConfiguration",
      "entities": {
        "active": [
          "FieldConfiguration"
        ],
        "lifecycle": [
          "deleteFieldConfiguration"
        ],
        "passive": [
          "FieldConfiguration"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldConfigurationExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationExists"
        ],
        "guards": [
          "deleteFieldConfiguration"
        ]
      },
      "steps": [
        "addFieldConfiguration"
      ],
      "notes": [
        "Ensure the FieldConfiguration ID is valid before adding."
      ]
    },
    {
      "name": "deleteFieldConfiguration",
      "entities": {
        "active": [
          "FieldConfiguration"
        ],
        "lifecycle": [
          "addFieldConfiguration"
        ],
        "passive": [
          "FieldConfiguration"
        ]
      },
      "checks": {
        "preconditions": [
          "fieldConfigurationExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationNotExists"
        ],
        "guards": [
          "fieldConfigurationIsNotInUse"
        ]
      },
      "steps": [
        "deleteFieldConfiguration"
      ],
      "notes": [
        "Ensure no dependencies on the FieldConfiguration before deletion."
      ]
    },
    {
      "name": "updateFieldConfig",
      "entities": {
        "active": [
          "FieldConfiguration"
        ],
        "lifecycle": [
          "createFieldConfiguration"
        ],
        "passive": [
          "FieldConfiguration"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldConfigurationExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationUpdated"
        ],
        "guards": [
          "verifyFieldConfigurationNotUpdated"
        ]
      },
      "steps": [
        "updateFieldConfiguration"
      ],
      "notes": [
        "Ensure the FieldConfiguration ID is valid."
      ]
    },
    {
      "name": "updateFieldConfigItem",
      "entities": {
        "active": [
          "FieldConfigurationItems"
        ],
        "lifecycle": [
          "createFieldConfigurationItems"
        ],
        "passive": [
          "FieldConfigurationItems"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldConfigurationItemsExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationItemsUpdated"
        ],
        "guards": [
          "validateFieldConfigurationItems"
        ]
      },
      "steps": [
        "updateFieldConfigurationItems"
      ],
      "notes": [
        "Ensure the id is valid and exists before updating."
      ]
    },
    {
      "name": "addFieldConfigScheme",
      "entities": {
        "active": [
          "FieldConfigurationScheme"
        ],
        "lifecycle": [
          "addFieldConfigurationScheme"
        ],
        "passive": [
          "deleteFieldConfigurationScheme"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldConfigurationSchemeExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationSchemeExists"
        ],
        "guards": [
          "deleteFieldConfigurationScheme"
        ]
      },
      "steps": [
        "addFieldConfigurationScheme"
      ],
      "notes": [
        "Ensure the id parameter is valid before adding."
      ]
    },
    {
      "name": "deleteFieldConfigScheme",
      "entities": {
        "active": [
          "FieldConfigurationScheme"
        ],
        "lifecycle": [
          "addFieldConfigurationScheme"
        ],
        "passive": [
          "FieldConfigurationScheme"
        ]
      },
      "checks": {
        "preconditions": [
          "fieldConfigurationSchemeExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationSchemeNotExists"
        ],
        "guards": [
          "fieldConfigurationSchemeIsNotInUse"
        ]
      },
      "steps": [
        "deleteFieldConfigurationScheme"
      ],
      "notes": [
        "Ensure no dependencies on the FieldConfigurationScheme before deletion."
      ]
    },
    {
      "name": "updateFieldConfigScheme_1",
      "entities": {
        "active": [
          "FieldConfigurationScheme"
        ],
        "lifecycle": [
          "createFieldConfigurationScheme"
        ],
        "passive": [
          "FieldConfigurationScheme"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldConfigurationSchemeExists"
        ],
        "postconditions": [
          "verifyFieldConfigurationSchemeUpdated"
        ],
        "guards": [
          "verifyFieldConfigurationSchemeNotDeleted"
        ]
      },
      "steps": [
        "updateFieldConfigurationScheme"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "addFieldToDefaultScreen",
      "entities": {
        "active": [
          "FieldToDefaultScreen"
        ],
        "lifecycle": [
          "deleteFieldToDefaultScreen"
        ],
        "passive": [
          "FieldToDefaultScreen"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFieldToDefaultScreenExists"
        ],
        "postconditions": [
          "verifyFieldToDefaultScreenExists"
        ],
        "guards": [
          "deleteFieldToDefaultScreen"
        ]
      },
      "steps": [
        "addFieldToDefaultScreen"
      ],
      "notes": [
        "Ensure the FieldToDefaultScreen is correctly added."
      ]
    },
    {
      "name": "addFilterWithValidation",
      "entities": {
        "active": [
          "Filter"
        ],
        "lifecycle": [
          "deleteFilter"
        ],
        "passive": [
          "verifyFilterExists"
        ]
      },
      "checks": {
        "preconditions": [
          "filterIdExists"
        ],
        "postconditions": [
          "verifyFilterExists"
        ],
        "guards": [
          "filterIdIsValid"
        ]
      },
      "steps": [
        "addFilter"
      ],
      "notes": [
        "Ensure filterId is unique before adding."
      ]
    },
    {
      "name": "deleteFilterById",
      "entities": {
        "active": [
          "Filter"
        ],
        "lifecycle": [
          "addFilter"
        ],
        "passive": [
          "verifyFilterNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "filterExists"
        ],
        "postconditions": [
          "verifyFilterNotExists"
        ],
        "guards": [
          "filterIsNotInUse"
        ]
      },
      "steps": [
        "deleteFilter"
      ],
      "notes": [
        "Ensure the filter is not in use before deletion."
      ]
    },
    {
      "name": "updateFilterById",
      "entities": {
        "active": [
          "Filter"
        ],
        "lifecycle": [
          "updateFilter"
        ],
        "passive": [
          "Filter"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyFilterExists"
        ],
        "postconditions": [
          "verifyFilterUpdated"
        ],
        "guards": [
          "validateFilterId"
        ]
      },
      "steps": [
        "updateFilter"
      ],
      "notes": [
        "Ensure the Filter ID is valid before updating."
      ]
    },
    {
      "name": "deleteForgeAppProperty",
      "entities": {
        "active": [
          "ForgeAppProperty"
        ],
        "lifecycle": [
          "addForgeAppProperty"
        ],
        "passive": [
          "verifyForgeAppPropertyNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "addForgeAppProperty"
        ],
        "postconditions": [
          "verifyForgeAppPropertyNotExists"
        ],
        "guards": []
      },
      "steps": [
        "deleteForgeAppProperty"
      ],
      "notes": [
        "Ensure the ForgeAppProperty is added before deletion."
      ]
    },
    {
      "name": "addGadgetWithValidation",
      "entities": {
        "active": [
          "Gadget"
        ],
        "lifecycle": [
          "deleteGadget"
        ],
        "passive": [
          "Gadget"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyGadgetExists"
        ],
        "postconditions": [
          "verifyGadgetExists"
        ],
        "guards": [
          "deleteGadget"
        ]
      },
      "steps": [
        "addGadget"
      ],
      "notes": [
        "Ensure the Gadget ID is valid before adding."
      ]
    }
  ]
}