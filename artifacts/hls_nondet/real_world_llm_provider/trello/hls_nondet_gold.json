{
  "stories": [
    {
      "name": "deleteActionsByIdAction",
      "entities": {
        "active": [
          "addActionsByIdAction"
        ],
        "lifecycle": [
          "deleteActionsByIdAction"
        ],
        "passive": [
          "verifyActionsByIdActionNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "actionsByIdActionExists"
        ],
        "postconditions": [
          "verifyActionsByIdActionNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteActionsByIdAction"
      ],
      "notes": [
        "Ensure the id is correctly specified before deletion."
      ]
    },
    {
      "name": "updateActionsText",
      "entities": {
        "active": [
          "ActionsTextByIdAction"
        ],
        "lifecycle": [
          "createActionsTextByIdAction"
        ],
        "passive": [
          "ActionsTextByIdAction"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyActionsTextByIdActionExists"
        ],
        "postconditions": [
          "verifyActionsTextByIdActionUpdated"
        ],
        "guards": [
          "verifyActionsTextByIdActionNotUpdated"
        ]
      },
      "steps": [
        "updateActionsTextByIdAction"
      ],
      "notes": [
        "Ensure the id parameter is valid before updating."
      ]
    },
    {
      "name": "addBoardsVariant",
      "entities": {
        "active": [
          "Boards"
        ],
        "lifecycle": [
          "deleteBoards"
        ],
        "passive": [
          "verifyBoardsExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyBoardsExists"
        ],
        "postconditions": [
          "verifyBoardsExists"
        ],
        "guards": [
          "deleteBoards"
        ]
      },
      "steps": [
        "addBoards"
      ],
      "notes": []
    },
    {
      "name": "updateBoard",
      "entities": {
        "active": [
          "BoardsByIdBoard"
        ],
        "lifecycle": [
          "createBoardsByIdBoard"
        ],
        "passive": [
          "verifyBoardsByIdBoardExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyBoardsByIdBoardExists"
        ],
        "postconditions": [
          "verifyBoardsByIdBoardUpdated"
        ],
        "guards": [
          "checkBoardsByIdBoardUpdate"
        ]
      },
      "steps": [
        "updateBoardsByIdBoard"
      ],
      "notes": []
    },
    {
      "name": "addChecklistsToBoard",
      "entities": {
        "active": [
          "BoardsChecklistsByIdBoard"
        ],
        "lifecycle": [
          "addBoardsChecklistsByIdBoard"
        ],
        "passive": [
          "deleteBoardsChecklistsByIdBoard"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyBoardsChecklistsByIdBoardExists"
        ],
        "postconditions": [
          "verifyBoardsChecklistsByIdBoardExists"
        ],
        "guards": []
      },
      "steps": [
        "addBoardsChecklistsByIdBoard"
      ],
      "notes": [
        "Ensure the board ID is valid before adding checklists."
      ]
    },
    {
      "name": "addBoardsLists",
      "entities": {
        "active": [
          "BoardsListsByIdBoard"
        ],
        "lifecycle": [
          "deleteBoardsListsByIdBoard"
        ],
        "passive": [
          "BoardsListsByIdBoard"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyBoardsListsByIdBoardExists"
        ],
        "postconditions": [
          "verifyBoardsListsByIdBoardExists"
        ],
        "guards": [
          "deleteBoardsListsByIdBoard"
        ]
      },
      "steps": [
        "addBoardsListsByIdBoard"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "updateBoardMembers",
      "entities": {
        "active": [
          "BoardsMembersByIdBoard"
        ],
        "lifecycle": [
          "createBoardsMembersByIdBoard"
        ],
        "passive": [
          "BoardsMembersByIdBoard"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyBoardsMembersByIdBoardExists"
        ],
        "postconditions": [
          "verifyBoardsMembersByIdBoardUpdated"
        ],
        "guards": [
          "checkBoardsMembersByIdBoardUpdatePermissions"
        ]
      },
      "steps": [
        "updateBoardsMembersByIdBoard"
      ],
      "notes": [
        "Ensure the update does not affect other board members."
      ]
    },
    {
      "name": "updateBoardBackground",
      "entities": {
        "active": [
          "BoardsPrefsBackgroundByIdBoard"
        ],
        "lifecycle": [
          "createBoardsPrefsBackgroundByIdBoard"
        ],
        "passive": [
          "BoardsPrefsBackgroundByIdBoard"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyBoardsPrefsBackgroundByIdBoardExists"
        ],
        "postconditions": [
          "verifyBoardsPrefsBackgroundByIdBoardUpdated"
        ],
        "guards": [
          "verifyBoardsPrefsBackgroundByIdBoardNotUpdated"
        ]
      },
      "steps": [
        "updateBoardsPrefsBackgroundByIdBoard"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "addAttachmentsToCard",
      "entities": {
        "active": [
          "CardsAttachmentsByIdCard"
        ],
        "lifecycle": [
          "deleteCardsAttachmentsByIdCard"
        ],
        "passive": [
          "Cards"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCardsAttachmentsByIdCardExists"
        ],
        "postconditions": [
          "verifyCardsAttachmentsByIdCardExists"
        ],
        "guards": [
          "verifyCardsExists"
        ]
      },
      "steps": [
        "addCardsAttachmentsByIdCard"
      ],
      "notes": []
    },
    {
      "name": "updateCard",
      "entities": {
        "active": [
          "CardsByIdCard"
        ],
        "lifecycle": [
          "createCardsByIdCard"
        ],
        "passive": [
          "verifyCardsByIdCard"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCardsByIdCardExists"
        ],
        "postconditions": [
          "verifyCardsByIdCardUpdated"
        ],
        "guards": [
          "validateCardUpdate"
        ]
      },
      "steps": [
        "updateCardsByIdCard"
      ],
      "notes": [
        "Ensure the card ID is valid before updating."
      ]
    },
    {
      "name": "updateChecklistItem",
      "entities": {
        "active": [
          "CardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem"
        ],
        "lifecycle": [
          "createCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem"
        ],
        "passive": [
          "CardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemExists"
        ],
        "postconditions": [
          "verifyCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemUpdated"
        ],
        "guards": [
          "verifyCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemExists"
        ]
      },
      "steps": [
        "updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem"
      ],
      "notes": [
        "Ensure the checklist item is correctly updated."
      ]
    },
    {
      "name": "addCardsChecklists",
      "entities": {
        "active": [
          "CardsChecklistsByIdCard"
        ],
        "lifecycle": [
          "deleteCardsChecklistsByIdCard"
        ],
        "passive": [
          "verifyCardsChecklistsByIdCardExists"
        ]
      },
      "checks": {
        "preconditions": [
          "id is valid"
        ],
        "postconditions": [
          "verifyCardsChecklistsByIdCardExists"
        ],
        "guards": [
          "deleteCardsChecklistsByIdCard"
        ]
      },
      "steps": [
        "addCardsChecklistsByIdCard"
      ],
      "notes": []
    },
    {
      "name": "deleteCardsLabels",
      "entities": {
        "active": [
          "CardsLabelsByIdCardByColor"
        ],
        "lifecycle": [
          "addCardsLabelsByIdCardByColor"
        ],
        "passive": [
          "verifyCardsLabelsByIdCardByColorNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyCardsLabelsByIdCardByColorNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteCardsLabelsByIdCardByColor"
      ],
      "notes": []
    },
    {
      "name": "removeCardsMembersVoted",
      "entities": {
        "active": [
          "CardsMembersVotedByIdCardByIdMember"
        ],
        "lifecycle": [
          "addCardsMembersVotedByIdCardByIdMember"
        ],
        "passive": [
          "CardsMembersVotedByIdCardByIdMember"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCardsMembersVotedByIdCardByIdMemberExists"
        ],
        "postconditions": [
          "verifyCardsMembersVotedByIdCardByIdMemberNotExists"
        ],
        "guards": []
      },
      "steps": [
        "deleteCardsMembersVotedByIdCardByIdMember"
      ],
      "notes": []
    },
    {
      "name": "addCardsStickers",
      "entities": {
        "active": [
          "CardsStickersByIdCard"
        ],
        "lifecycle": [
          "deleteCardsStickersByIdCard"
        ],
        "passive": [
          "CardsStickersByIdCard"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyCardsStickersByIdCardExists"
        ],
        "postconditions": [
          "verifyCardsStickersByIdCardExists"
        ],
        "guards": []
      },
      "steps": [
        "addCardsStickersByIdCard"
      ],
      "notes": []
    },
    {
      "name": "addChecklists",
      "entities": {
        "active": [
          "Checklists"
        ],
        "lifecycle": [
          "deleteChecklists"
        ],
        "passive": [
          "Checklists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyChecklistsExists"
        ],
        "postconditions": [
          "verifyChecklistsExists"
        ],
        "guards": [
          "checkChecklistsDeletion"
        ]
      },
      "steps": [
        "addChecklists"
      ],
      "notes": [
        "Ensure the Checklists are properly added before verification."
      ]
    },
    {
      "name": "deleteChecklist",
      "entities": {
        "active": [
          "ChecklistsByIdChecklist"
        ],
        "lifecycle": [
          "addChecklistsByIdChecklist"
        ],
        "passive": [
          "ChecklistsByIdChecklist"
        ]
      },
      "checks": {
        "preconditions": [
          "checkChecklistsByIdChecklistExists"
        ],
        "postconditions": [
          "verifyChecklistsByIdChecklistNotExists"
        ],
        "guards": [
          "checkChecklistsByIdChecklistExists"
        ]
      },
      "steps": [
        "deleteChecklistsByIdChecklist"
      ],
      "notes": [
        "Ensure the checklist is not referenced by any other entities."
      ]
    },
    {
      "name": "updateChecklist",
      "entities": {
        "active": [
          "ChecklistsByIdChecklist"
        ],
        "lifecycle": [
          "updateChecklistsByIdChecklist"
        ],
        "passive": [
          "ChecklistsByIdChecklist"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyChecklistsByIdChecklistExists"
        ],
        "postconditions": [
          "verifyChecklistsByIdChecklistUpdated"
        ],
        "guards": [
          "checkUpdatePermissions"
        ]
      },
      "steps": [
        "updateChecklistsByIdChecklist"
      ],
      "notes": [
        "Ensure the checklist ID is valid before updating."
      ]
    },
    {
      "name": "addCheckItemToChecklist",
      "entities": {
        "active": [
          "ChecklistsCheckItemsByIdChecklist"
        ],
        "lifecycle": [
          "deleteChecklistsCheckItemsByIdChecklist"
        ],
        "passive": [
          "ChecklistsCheckItemsByIdChecklist"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyChecklistsCheckItemsByIdChecklistExists"
        ],
        "postconditions": [
          "verifyChecklistsCheckItemsByIdChecklistExists"
        ],
        "guards": [
          "deleteChecklistsCheckItemsByIdChecklist"
        ]
      },
      "steps": [
        "addChecklistsCheckItemsByIdChecklist"
      ],
      "notes": []
    },
    {
      "name": "deleteCheckItem",
      "entities": {
        "active": [
          "ChecklistsCheckItemsByIdChecklistByIdCheckItem"
        ],
        "lifecycle": [
          "addChecklistsCheckItemsByIdChecklistByIdCheckItem"
        ],
        "passive": [
          "ChecklistsCheckItemsByIdChecklistByIdCheckItem"
        ]
      },
      "checks": {
        "preconditions": [
          "checkChecklistsCheckItemsByIdChecklistByIdCheckItemExists"
        ],
        "postconditions": [
          "verifyChecklistsCheckItemsByIdChecklistByIdCheckItemNotExists"
        ],
        "guards": []
      },
      "steps": [
        "deleteChecklistsCheckItemsByIdChecklistByIdCheckItem"
      ],
      "notes": [
        "Ensure the item to be deleted exists before deletion."
      ]
    },
    {
      "name": "updateChecklistCard",
      "entities": {
        "active": [
          "ChecklistsIdCardByIdChecklist"
        ],
        "lifecycle": [
          "createChecklistsIdCardByIdChecklist"
        ],
        "passive": [
          "ChecklistsIdCardByIdChecklist"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyChecklistsIdCardByIdChecklistExists"
        ],
        "postconditions": [
          "verifyChecklistsIdCardByIdChecklistUpdated"
        ],
        "guards": [
          "checkChecklistsIdCardByIdChecklistUpdateAllowed"
        ]
      },
      "steps": [
        "updateChecklistsIdCardByIdChecklist"
      ],
      "notes": [
        "Ensure the checklist ID is valid before updating."
      ]
    },
    {
      "name": "updateChecklistName",
      "entities": {
        "active": [
          "ChecklistsNameByIdChecklist"
        ],
        "lifecycle": [
          "createChecklistsNameByIdChecklist"
        ],
        "passive": [
          "ChecklistsNameByIdChecklistUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyChecklistsNameByIdChecklistExists"
        ],
        "postconditions": [
          "verifyChecklistsNameByIdChecklistUpdated"
        ],
        "guards": [
          "verifyChecklistsNameByIdChecklistUpdated"
        ]
      },
      "steps": [
        "updateChecklistsNameByIdChecklist"
      ],
      "notes": [
        "Ensure the checklist ID is valid before updating."
      ]
    },
    {
      "name": "updateChecklistPosition",
      "entities": {
        "active": [
          "ChecklistsPosByIdChecklist"
        ],
        "lifecycle": [
          "createChecklistsPosByIdChecklist"
        ],
        "passive": [
          "ChecklistsPosByIdChecklist"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyChecklistsPosByIdChecklistExists"
        ],
        "postconditions": [
          "verifyChecklistsPosByIdChecklistUpdated"
        ],
        "guards": [
          "verifyChecklistsPosByIdChecklistNotUpdated"
        ]
      },
      "steps": [
        "updateChecklistsPosByIdChecklist"
      ],
      "notes": [
        "Ensure the checklist position is correctly updated."
      ]
    },
    {
      "name": "addLabels",
      "entities": {
        "active": [
          "Labels"
        ],
        "lifecycle": [
          "deleteLabels"
        ],
        "passive": [
          "verifyLabelsExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyLabelsExists"
        ],
        "postconditions": [
          "verifyLabelsExists"
        ],
        "guards": [
          "deleteLabels"
        ]
      },
      "steps": [
        "addLabels"
      ],
      "notes": []
    },
    {
      "name": "updateLabel",
      "entities": {
        "active": [
          "LabelsByIdLabel"
        ],
        "lifecycle": [
          "createLabelsByIdLabel"
        ],
        "passive": [
          "LabelsByIdLabel"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyLabelsByIdLabelExists"
        ],
        "postconditions": [
          "verifyLabelsByIdLabelUpdated"
        ],
        "guards": [
          "verifyLabelsByIdLabelNotUpdated"
        ]
      },
      "steps": [
        "updateLabelsByIdLabel"
      ],
      "notes": [
        "Ensure the label ID is valid before updating."
      ]
    },
    {
      "name": "updateLabelColor",
      "entities": {
        "active": [
          "LabelsColorByIdLabel"
        ],
        "lifecycle": [
          "createLabelsColorByIdLabel"
        ],
        "passive": [
          "LabelsColorByIdLabel"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyLabelsColorByIdLabelExists"
        ],
        "postconditions": [
          "verifyLabelsColorByIdLabelUpdated"
        ],
        "guards": [
          "verifyLabelsColorByIdLabelNotUpdated"
        ]
      },
      "steps": [
        "updateLabelsColorByIdLabel"
      ],
      "notes": [
        "Ensure the id is valid before updating."
      ]
    },
    {
      "name": "updateLabelName",
      "entities": {
        "active": [
          "LabelsNameByIdLabel"
        ],
        "lifecycle": [
          "createLabelsNameByIdLabel"
        ],
        "passive": [
          "LabelsNameByIdLabel"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyLabelsNameByIdLabelExists"
        ],
        "postconditions": [
          "verifyLabelsNameByIdLabelUpdated"
        ],
        "guards": [
          "verifyLabelsNameByIdLabelNotUpdated"
        ]
      },
      "steps": [
        "updateLabelsNameByIdLabel"
      ],
      "notes": [
        "Ensure the id is valid before updating."
      ]
    },
    {
      "name": "addListsVariant",
      "entities": {
        "active": [
          "Lists"
        ],
        "lifecycle": [
          "addLists"
        ],
        "passive": [
          "deleteLists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsExists"
        ],
        "postconditions": [
          "verifyListsExists"
        ],
        "guards": [
          "deleteLists"
        ]
      },
      "steps": [
        "addLists"
      ],
      "notes": [
        "Ensure the Lists are properly added before verification."
      ]
    },
    {
      "name": "addListsArchiveAllCardsByIdList",
      "entities": {
        "active": [
          "addListsArchiveAllCardsByIdList"
        ],
        "lifecycle": [
          "deleteListsArchiveAllCardsByIdList"
        ],
        "passive": [
          "verifyListsArchiveAllCardsByIdListExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyListsArchiveAllCardsByIdListExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "addListsArchiveAllCardsByIdList"
      ],
      "notes": [
        "Ensure the id is valid before adding."
      ]
    },
    {
      "name": "updateListsByIdList_v1",
      "entities": {
        "active": [
          "ListsByIdList"
        ],
        "lifecycle": [
          "createListsByIdList"
        ],
        "passive": [
          "updatedListsByIdList"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsByIdListExists"
        ],
        "postconditions": [
          "verifyListsByIdListUpdated"
        ],
        "guards": [
          "checkUpdatePermission"
        ]
      },
      "steps": [
        "updateListsByIdList"
      ],
      "notes": [
        "Ensure the id is valid before updating."
      ]
    },
    {
      "name": "addCardsToList",
      "entities": {
        "active": [
          "ListsCardsByIdList"
        ],
        "lifecycle": [
          "deleteListsCardsByIdList"
        ],
        "passive": [
          "ListsCardsByIdList"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsCardsByIdListExists"
        ],
        "postconditions": [
          "verifyListsCardsByIdListExists"
        ],
        "guards": []
      },
      "steps": [
        "addListsCardsByIdList"
      ],
      "notes": []
    },
    {
      "name": "updateClosedList",
      "entities": {
        "active": [
          "ListsClosedByIdList"
        ],
        "lifecycle": [
          "createListsClosedByIdList"
        ],
        "passive": [
          "ListsClosedByIdList"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsClosedByIdListExists"
        ],
        "postconditions": [
          "verifyListsClosedByIdListUpdated"
        ],
        "guards": [
          "verifyListsClosedByIdListNotUpdated"
        ]
      },
      "steps": [
        "updateListsClosedByIdList"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "updateList",
      "entities": {
        "active": [
          "updateListsIdBoardByIdList"
        ],
        "lifecycle": [
          "createListsIdBoardByIdList"
        ],
        "passive": [
          "getListsIdBoardByIdList"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsIdBoardByIdListExists"
        ],
        "postconditions": [
          "verifyListsIdBoardByIdListUpdated"
        ],
        "guards": [
          "checkListsIdBoardByIdListNotEmpty"
        ]
      },
      "steps": [
        "getListsIdBoardByIdList",
        "updateListsIdBoardByIdList"
      ],
      "notes": [
        "Ensure the list is not empty before updating."
      ]
    },
    {
      "name": "addListsMoveAllCardsByIdList",
      "entities": {
        "active": [
          "addListsMoveAllCardsByIdList"
        ],
        "lifecycle": [
          "deleteListsMoveAllCardsByIdList"
        ],
        "passive": [
          "verifyListsMoveAllCardsByIdListExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyListsMoveAllCardsByIdListExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "addListsMoveAllCardsByIdList"
      ],
      "notes": [
        "Ensure the id is valid before adding."
      ]
    },
    {
      "name": "updateListsName",
      "entities": {
        "active": [
          "updateListsName"
        ],
        "lifecycle": [
          "createListsName"
        ],
        "passive": [
          "ListsNameByIdList"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsNameByIdListExists"
        ],
        "postconditions": [
          "verifyListsNameByIdListUpdated"
        ],
        "guards": [
          "validateListsNameUpdate"
        ]
      },
      "steps": [
        "updateListsName"
      ],
      "notes": [
        "Ensure the id parameter is valid before updating."
      ]
    },
    {
      "name": "updateListsPosByIdList_v1",
      "entities": {
        "active": [
          "updateListsPosByIdList"
        ],
        "lifecycle": [
          "createListsPosByIdList"
        ],
        "passive": [
          "verifyListsPosByIdListExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsPosByIdListExists"
        ],
        "postconditions": [
          "verifyListsPosByIdListUpdated"
        ],
        "guards": [
          "checkListsPosByIdListUpdatePermissions"
        ]
      },
      "steps": [
        "updateListsPosByIdList"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "updateSubscribedList",
      "entities": {
        "active": [
          "ListsSubscribedByIdList"
        ],
        "lifecycle": [
          "createListsSubscribedByIdList"
        ],
        "passive": [
          "ListsSubscribedByIdList"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyListsSubscribedByIdListExists"
        ],
        "postconditions": [
          "verifyListsSubscribedByIdListUpdated"
        ],
        "guards": [
          "verifyListsSubscribedByIdListNotUpdated"
        ]
      },
      "steps": [
        "updateListsSubscribedByIdList"
      ],
      "notes": [
        "Ensure the id parameter is valid."
      ]
    },
    {
      "name": "addMembersAvatar",
      "entities": {
        "active": [
          "MembersAvatarByIdMember"
        ],
        "lifecycle": [
          "deleteMembersAvatarByIdMember"
        ],
        "passive": [
          "MembersAvatarByIdMember"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyMembersAvatarByIdMemberExists"
        ],
        "postconditions": [
          "verifyMembersAvatarByIdMemberExists"
        ],
        "guards": []
      },
      "steps": [
        "addMembersAvatarByIdMember"
      ],
      "notes": []
    },
    {
      "name": "updateMemberBio",
      "entities": {
        "active": [
          "MembersBioByIdMember"
        ],
        "lifecycle": [
          "createMembersBioByIdMember"
        ],
        "passive": [
          "MembersBioByIdMember"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyMembersBioByIdMemberExists"
        ],
        "postconditions": [
          "verifyMembersBioByIdMemberUpdated"
        ],
        "guards": [
          "verifyMembersBioByIdMemberNotUpdated"
        ]
      },
      "steps": [
        "updateMembersBioByIdMember"
      ],
      "notes": [
        "Ensure the id parameter is valid before updating."
      ]
    },
    {
      "name": "addMembersBoardBackgrounds",
      "entities": {
        "active": [
          "MembersBoardBackgroundsByIdMember"
        ],
        "lifecycle": [
          "deleteMembersBoardBackgroundsByIdMember"
        ],
        "passive": [
          "MembersBoardBackgroundsByIdMember"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyMembersBoardBackgroundsByIdMemberExists"
        ],
        "postconditions": [
          "verifyMembersBoardBackgroundsByIdMemberExists"
        ],
        "guards": []
      },
      "steps": [
        "addMembersBoardBackgroundsByIdMember"
      ],
      "notes": []
    },
    {
      "name": "updateMember",
      "entities": {
        "active": [
          "MembersByIdMember"
        ],
        "lifecycle": [
          "createMembersByIdMember"
        ],
        "passive": [
          "MembersByIdMember"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyMembersByIdMemberExists"
        ],
        "postconditions": [
          "verifyMembersByIdMemberUpdated"
        ],
        "guards": [
          "verifyMembersByIdMemberNotUpdated"
        ]
      },
      "steps": [
        "updateMembersByIdMember"
      ],
      "notes": [
        "Ensure that the member ID is valid before updating."
      ]
    },
    {
      "name": "addNotificationsAllRead",
      "entities": {
        "active": [
          "NotificationsAllRead"
        ],
        "lifecycle": [
          "deleteNotificationsAllRead"
        ],
        "passive": [
          "NotificationsAllRead"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyNotificationsAllReadExists"
        ],
        "postconditions": [
          "verifyNotificationsAllReadExists"
        ],
        "guards": [
          "deleteNotificationsAllRead"
        ]
      },
      "steps": [
        "addNotificationsAllRead"
      ],
      "notes": [
        "Ensure the NotificationsAllRead entity is properly added."
      ]
    },
    {
      "name": "updateNotification",
      "entities": {
        "active": [
          "NotificationsByIdNotification"
        ],
        "lifecycle": [
          "createNotificationsByIdNotification"
        ],
        "passive": [
          "NotificationsByIdNotification"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyNotificationsByIdNotificationExists"
        ],
        "postconditions": [
          "verifyNotificationsByIdNotificationUpdated"
        ],
        "guards": [
          "verifyNotificationsByIdNotificationNotDeleted"
        ]
      },
      "steps": [
        "updateNotificationsByIdNotification"
      ],
      "notes": [
        "Ensure the notification ID is valid before updating."
      ]
    },
    {
      "name": "updateUnreadNotification",
      "entities": {
        "active": [
          "NotificationsUnreadByIdNotification"
        ],
        "lifecycle": [
          "createNotificationsUnreadByIdNotification"
        ],
        "passive": [
          "NotificationsUnreadByIdNotification"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyNotificationsUnreadByIdNotificationExists"
        ],
        "postconditions": [
          "verifyNotificationsUnreadByIdNotificationUpdated"
        ],
        "guards": [
          "verifyNotificationsUnreadByIdNotificationNotUpdated"
        ]
      },
      "steps": [
        "updateNotificationsUnreadByIdNotification"
      ],
      "notes": [
        "Ensure the notification ID is valid before updating."
      ]
    },
    {
      "name": "updateOrgDesc",
      "entities": {
        "active": [
          "OrganizationsDescByIdOrg"
        ],
        "lifecycle": [
          "createOrganizationsDescByIdOrg"
        ],
        "passive": [
          "OrganizationsDescByIdOrg"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOrganizationsDescByIdOrgExists"
        ],
        "postconditions": [
          "verifyOrganizationsDescByIdOrgUpdated"
        ],
        "guards": [
          "validateOrganizationsDescByIdOrgUpdate"
        ]
      },
      "steps": [
        "updateOrganizationsDescByIdOrg"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "addOrganizationsLogo",
      "entities": {
        "active": [
          "OrganizationsLogoByIdOrg"
        ],
        "lifecycle": [
          "deleteOrganizationsLogoByIdOrg"
        ],
        "passive": [
          "OrganizationsLogoByIdOrg"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOrganizationsLogoByIdOrgExists"
        ],
        "postconditions": [
          "verifyOrganizationsLogoByIdOrgExists"
        ],
        "guards": [
          "deleteOrganizationsLogoByIdOrg"
        ]
      },
      "steps": [
        "addOrganizationsLogoByIdOrg"
      ],
      "notes": [
        "Ensure the ID is valid before adding the logo."
      ]
    },
    {
      "name": "deleteOrgMember",
      "entities": {
        "active": [
          "OrganizationsMembersByIdOrgByIdMember"
        ],
        "lifecycle": [
          "addOrganizationsMembersByIdOrgByIdMember"
        ],
        "passive": [
          "OrganizationsMembersByIdOrgByIdMember"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOrganizationsMembersByIdOrgByIdMemberExists"
        ],
        "postconditions": [
          "verifyOrganizationsMembersByIdOrgByIdMemberNotExists"
        ],
        "guards": [
          "validateDeleteOrganizationsMembersByIdOrgByIdMember"
        ]
      },
      "steps": [
        "deleteOrganizationsMembersByIdOrgByIdMember"
      ],
      "notes": [
        "Ensure the member ID is valid before deletion."
      ]
    },
    {
      "name": "updateOrgName",
      "entities": {
        "active": [
          "OrganizationsNameByIdOrg"
        ],
        "lifecycle": [
          "updateOrganizationsNameByIdOrg"
        ],
        "passive": [
          "OrganizationsNameByIdOrgUpdated"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyOrganizationsNameByIdOrgExists"
        ],
        "postconditions": [
          "verifyOrganizationsNameByIdOrgUpdated"
        ],
        "guards": [
          "validateOrganizationsNameByIdOrgUpdate"
        ]
      },
      "steps": [
        "updateOrganizationsNameByIdOrg"
      ],
      "notes": [
        "Ensure the id parameter is valid before updating."
      ]
    },
    {
      "name": "deleteOrgPrefs",
      "entities": {
        "active": [
          "OrganizationsPrefsAssociatedDomainByIdOrg"
        ],
        "lifecycle": [
          "addOrganizationsPrefsAssociatedDomainByIdOrg"
        ],
        "passive": [
          "verifyOrganizationsPrefsAssociatedDomainByIdOrgNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExistsOrganizationsPrefsAssociatedDomainByIdOrg"
        ],
        "postconditions": [
          "verifyOrganizationsPrefsAssociatedDomainByIdOrgNotExists"
        ],
        "guards": [
          "idValidOrganizationsPrefsAssociatedDomainByIdOrg"
        ]
      },
      "steps": [
        "deleteOrganizationsPrefsAssociatedDomainByIdOrg"
      ],
      "notes": []
    },
    {
      "name": "addSessionsWithId",
      "entities": {
        "active": [
          "Sessions"
        ],
        "lifecycle": [
          "addSessions"
        ],
        "passive": [
          "deleteSessions"
        ]
      },
      "checks": {
        "preconditions": [
          "verifySessionsExists"
        ],
        "postconditions": [
          "verifySessionsExists"
        ],
        "guards": [
          "deleteSessions"
        ]
      },
      "steps": [
        "addSessions"
      ],
      "notes": [
        "Ensure the id is valid before adding sessions."
      ]
    },
    {
      "name": "updateSession",
      "entities": {
        "active": [
          "SessionsByIdSession"
        ],
        "lifecycle": [
          "createSessionsByIdSession"
        ],
        "passive": [
          "SessionsByIdSession"
        ]
      },
      "checks": {
        "preconditions": [
          "verifySessionsByIdSessionExists"
        ],
        "postconditions": [
          "verifySessionsByIdSessionUpdated"
        ],
        "guards": [
          "verifySessionsByIdSessionNotUpdated"
        ]
      },
      "steps": [
        "updateSessionsByIdSession"
      ],
      "notes": [
        "Ensure the session ID is valid before updating."
      ]
    },
    {
      "name": "updateSessionStatus",
      "entities": {
        "active": [
          "SessionsStatusByIdSession"
        ],
        "lifecycle": [
          "createSessionsStatusByIdSession"
        ],
        "passive": [
          "SessionsStatusByIdSession"
        ]
      },
      "checks": {
        "preconditions": [
          "verifySessionsStatusByIdSessionExists"
        ],
        "postconditions": [
          "verifySessionsStatusByIdSessionUpdated"
        ],
        "guards": [
          "verifySessionsStatusByIdSessionNotUpdated"
        ]
      },
      "steps": [
        "updateSessionsStatusByIdSession"
      ],
      "notes": [
        "Ensure the session status is valid before updating."
      ]
    },
    {
      "name": "deleteTokensByToken",
      "entities": {
        "active": [
          "TokensByToken"
        ],
        "lifecycle": [
          "addTokensByToken"
        ],
        "passive": [
          "verifyTokensByTokenNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "TokensByTokenExists"
        ],
        "postconditions": [
          "verifyTokensByTokenNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteTokensByToken"
      ],
      "notes": [
        "Ensure the TokensByToken ID is valid before deletion."
      ]
    },
    {
      "name": "addTokensWebhooksByToken",
      "entities": {
        "active": [
          "TokensWebhooksByToken"
        ],
        "lifecycle": [
          "deleteTokensWebhooksByToken"
        ],
        "passive": [
          "verifyTokensWebhooksByTokenExists"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyTokensWebhooksByTokenExists"
        ],
        "postconditions": [
          "verifyTokensWebhooksByTokenExists"
        ],
        "guards": [
          "deleteTokensWebhooksByToken"
        ]
      },
      "steps": [
        "addTokensWebhooksByToken"
      ],
      "notes": []
    },
    {
      "name": "updateWebhookToken",
      "entities": {
        "active": [
          "TokensWebhooksByToken"
        ],
        "lifecycle": [
          "createTokensWebhooksByToken"
        ],
        "passive": [
          "TokensWebhooksByToken"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyTokensWebhooksByTokenExists"
        ],
        "postconditions": [
          "verifyTokensWebhooksByTokenUpdated"
        ],
        "guards": [
          "validateTokensWebhooksByTokenUpdate"
        ]
      },
      "steps": [
        "updateTokensWebhooksByToken"
      ],
      "notes": [
        "Ensure the id parameter is valid before update."
      ]
    },
    {
      "name": "deleteWebhook",
      "entities": {
        "active": [
          "TokensWebhooksByTokenByIdWebhook"
        ],
        "lifecycle": [
          "addTokensWebhooksByTokenByIdWebhook"
        ],
        "passive": [
          "TokensWebhooksByTokenByIdWebhook"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyTokensWebhooksByTokenByIdWebhookExists"
        ],
        "postconditions": [
          "verifyTokensWebhooksByTokenByIdWebhookNotExists"
        ],
        "guards": []
      },
      "steps": [
        "deleteTokensWebhooksByTokenByIdWebhook"
      ],
      "notes": [
        "Ensure the webhook ID is valid before deletion."
      ]
    },
    {
      "name": "addWebhooks",
      "entities": {
        "active": [
          "Webhooks"
        ],
        "lifecycle": [
          "deleteWebhooks"
        ],
        "passive": [
          "verifyWebhooksExists"
        ]
      },
      "checks": {
        "preconditions": [
          "Webhooks not exists"
        ],
        "postconditions": [
          "verifyWebhooksExists"
        ],
        "guards": [
          "deleteWebhooks"
        ]
      },
      "steps": [
        "addWebhooks"
      ],
      "notes": []
    },
    {
      "name": "updateWebhookById",
      "entities": {
        "active": [
          "Webhooks"
        ],
        "lifecycle": [
          "updateWebhooks"
        ],
        "passive": [
          "Webhooks"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyWebhooksExists"
        ],
        "postconditions": [
          "verifyWebhooksUpdated"
        ],
        "guards": [
          "validateWebhookId"
        ]
      },
      "steps": [
        "updateWebhooks"
      ],
      "notes": [
        "Ensure the Webhooks ID is valid before updating."
      ]
    },
    {
      "name": "updateWebhookById",
      "entities": {
        "active": [
          "WebhooksActiveByIdWebhook"
        ],
        "lifecycle": [
          "createWebhooksActiveByIdWebhook"
        ],
        "passive": [
          "WebhooksActiveByIdWebhook"
        ]
      },
      "checks": {
        "preconditions": [
          "verifyWebhooksActiveByIdWebhookExists"
        ],
        "postconditions": [
          "verifyWebhooksActiveByIdWebhookUpdated"
        ],
        "guards": [
          "verifyWebhooksActiveByIdWebhookNotUpdated"
        ]
      },
      "steps": [
        "updateWebhooksActiveByIdWebhook"
      ],
      "notes": [
        "Ensure the ID is valid before updating."
      ]
    },
    {
      "name": "deleteWebhook",
      "entities": {
        "active": [
          "WebhooksByIdWebhook"
        ],
        "lifecycle": [
          "addWebhooksByIdWebhook"
        ],
        "passive": [
          "verifyWebhooksByIdWebhookNotExists"
        ]
      },
      "checks": {
        "preconditions": [
          "idExists"
        ],
        "postconditions": [
          "verifyWebhooksByIdWebhookNotExists"
        ],
        "guards": [
          "idIsValid"
        ]
      },
      "steps": [
        "deleteWebhooksByIdWebhook"
      ],
      "notes": []
    }
  ]
}