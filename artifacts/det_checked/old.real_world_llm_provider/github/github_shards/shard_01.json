{
  "api_name": "github",
  "spec_file": "openapi.json",
  "shard_index": 1,
  "total_shards": 3,
  "instructions": "Generate non-deterministic GOLD examples for the operations listed in 'operations'. Return strict JSON with a top-level key 'gold' (array).",
  "operations": [
    {
      "operationId": "meta/root",
      "method": "GET",
      "path": "/",
      "tags": [
        "meta"
      ],
      "summary": "GitHub API Root",
      "description": "Get Hypermedia links to resources accessible in GitHub's REST API"
    },
    {
      "operationId": "meta/get",
      "method": "GET",
      "path": "/meta",
      "tags": [
        "meta"
      ],
      "summary": "Get GitHub meta information",
      "description": "Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\"\n\nThe API's response also includes a list of GitHub's domain names.\n\nThe values shown in the documentation's response are example values. You must always query the API directly to get the latest values.\n\n> [!NOTE]\n> This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported."
    },
    {
      "operationId": "meta/get-octocat",
      "method": "GET",
      "path": "/octocat",
      "tags": [
        "meta"
      ],
      "summary": "Get Octocat",
      "description": "Get the octocat as ASCII art"
    },
    {
      "operationId": "meta/get-all-versions",
      "method": "GET",
      "path": "/versions",
      "tags": [
        "meta"
      ],
      "summary": "Get all API versions",
      "description": "Get all supported GitHub API versions."
    },
    {
      "operationId": "meta/get-zen",
      "method": "GET",
      "path": "/zen",
      "tags": [
        "meta"
      ],
      "summary": "Get the Zen of GitHub",
      "description": "Get a random sentence from the Zen of GitHub"
    },
    {
      "operationId": "classroom/get-an-assignment",
      "method": "GET",
      "path": "/assignments/{assignment_id}",
      "tags": [
        "classroom"
      ],
      "summary": "Get an assignment",
      "description": "Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment."
    },
    {
      "operationId": "classroom/list-accepted-assignments-for-an-assignment",
      "method": "GET",
      "path": "/assignments/{assignment_id}/accepted_assignments",
      "tags": [
        "classroom"
      ],
      "summary": "List accepted assignments for an assignment",
      "description": "Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment."
    },
    {
      "operationId": "classroom/get-assignment-grades",
      "method": "GET",
      "path": "/assignments/{assignment_id}/grades",
      "tags": [
        "classroom"
      ],
      "summary": "Get assignment grades",
      "description": "Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment."
    },
    {
      "operationId": "classroom/list-classrooms",
      "method": "GET",
      "path": "/classrooms",
      "tags": [
        "classroom"
      ],
      "summary": "List classrooms",
      "description": "Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms."
    },
    {
      "operationId": "classroom/get-a-classroom",
      "method": "GET",
      "path": "/classrooms/{classroom_id}",
      "tags": [
        "classroom"
      ],
      "summary": "Get a classroom",
      "description": "Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom."
    },
    {
      "operationId": "classroom/list-assignments-for-a-classroom",
      "method": "GET",
      "path": "/classrooms/{classroom_id}/assignments",
      "tags": [
        "classroom"
      ],
      "summary": "List assignments for a classroom",
      "description": "Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom."
    },
    {
      "operationId": "emojis/get",
      "method": "GET",
      "path": "/emojis",
      "tags": [
        "emojis"
      ],
      "summary": "Get emojis",
      "description": "Lists all the emojis available to use on GitHub."
    },
    {
      "operationId": "secret-scanning/list-alerts-for-enterprise",
      "method": "GET",
      "path": "/enterprises/{enterprise}/secret-scanning/alerts",
      "tags": [
        "secret-scanning"
      ],
      "summary": "List secret scanning alerts for an enterprise",
      "description": "Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\n\nAlerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\n\nThe authenticated user must be a member of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint."
    },
    {
      "operationId": "secret-scanning/list-alerts-for-org",
      "method": "GET",
      "path": "/orgs/{org}/secret-scanning/alerts",
      "tags": [
        "secret-scanning"
      ],
      "summary": "List secret scanning alerts for an organization",
      "description": "Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "secret-scanning/list-org-pattern-configs",
      "method": "GET",
      "path": "/orgs/{org}/secret-scanning/pattern-configurations",
      "tags": [
        "secret-scanning"
      ],
      "summary": "List organization pattern configurations",
      "description": "Lists the secret scanning pattern configurations for an organization.\n\nPersonal access tokens (classic) need the `read:org` scope to use this endpoint."
    },
    {
      "operationId": "secret-scanning/update-org-pattern-configs",
      "method": "PATCH",
      "path": "/orgs/{org}/secret-scanning/pattern-configurations",
      "tags": [
        "secret-scanning"
      ],
      "summary": "Update organization pattern configurations",
      "description": "Updates the secret scanning pattern configurations for an organization.\n\nPersonal access tokens (classic) need the `write:org` scope to use this endpoint."
    },
    {
      "operationId": "secret-scanning/list-alerts-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/secret-scanning/alerts",
      "tags": [
        "secret-scanning"
      ],
      "summary": "List secret scanning alerts for a repository",
      "description": "Lists secret scanning alerts for an eligible repository, from newest to oldest.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "secret-scanning/get-alert",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
      "tags": [
        "secret-scanning"
      ],
      "summary": "Get a secret scanning alert",
      "description": "Gets a single secret scanning alert detected in an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "secret-scanning/update-alert",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
      "tags": [
        "secret-scanning"
      ],
      "summary": "Update a secret scanning alert",
      "description": "Updates the status of a secret scanning alert in an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "secret-scanning/list-locations-for-alert",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
      "tags": [
        "secret-scanning"
      ],
      "summary": "List locations for a secret scanning alert",
      "description": "Lists all locations for a given secret scanning alert for an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "secret-scanning/create-push-protection-bypass",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses",
      "tags": [
        "secret-scanning"
      ],
      "summary": "Create a push protection bypass",
      "description": "Creates a bypass for a previously push protected secret.\n\nThe authenticated user must be the original author of the committed secret.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "secret-scanning/get-scan-history",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/secret-scanning/scan-history",
      "tags": [
        "secret-scanning"
      ],
      "summary": "Get secret scanning scan history for a repository",
      "description": "Lists the latest default incremental and backfill scans by type for a repository. Scans from Copilot Secret Scanning are not included.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead."
    },
    {
      "operationId": "activity/list-public-events",
      "method": "GET",
      "path": "/events",
      "tags": [
        "activity"
      ],
      "summary": "List public events",
      "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/get-feeds",
      "method": "GET",
      "path": "/feeds",
      "tags": [
        "activity"
      ],
      "summary": "Get feeds",
      "description": "Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using `uri_template`. For more information, see \"[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).\"\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\nBy default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n> [!NOTE]\n> Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens."
    },
    {
      "operationId": "activity/list-public-events-for-repo-network",
      "method": "GET",
      "path": "/networks/{owner}/{repo}/events",
      "tags": [
        "activity"
      ],
      "summary": "List public events for a network of repositories",
      "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-notifications-for-authenticated-user",
      "method": "GET",
      "path": "/notifications",
      "tags": [
        "activity"
      ],
      "summary": "List notifications for the authenticated user",
      "description": "List all notifications for the current user, sorted by most recently updated."
    },
    {
      "operationId": "activity/mark-notifications-as-read",
      "method": "PUT",
      "path": "/notifications",
      "tags": [
        "activity"
      ],
      "summary": "Mark notifications as read",
      "description": "Marks all notifications as \"read\" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`."
    },
    {
      "operationId": "activity/get-thread",
      "method": "GET",
      "path": "/notifications/threads/{thread_id}",
      "tags": [
        "activity"
      ],
      "summary": "Get a thread",
      "description": "Gets information about a notification thread."
    },
    {
      "operationId": "activity/mark-thread-as-read",
      "method": "PATCH",
      "path": "/notifications/threads/{thread_id}",
      "tags": [
        "activity"
      ],
      "summary": "Mark a thread as read",
      "description": "Marks a thread as \"read.\" Marking a thread as \"read\" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications."
    },
    {
      "operationId": "activity/mark-thread-as-done",
      "method": "DELETE",
      "path": "/notifications/threads/{thread_id}",
      "tags": [
        "activity"
      ],
      "summary": "Mark a thread as done",
      "description": "Marks a thread as \"done.\" Marking a thread as \"done\" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications."
    },
    {
      "operationId": "activity/get-thread-subscription-for-authenticated-user",
      "method": "GET",
      "path": "/notifications/threads/{thread_id}/subscription",
      "tags": [
        "activity"
      ],
      "summary": "Get a thread subscription for the authenticated user",
      "description": "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread."
    },
    {
      "operationId": "activity/set-thread-subscription",
      "method": "PUT",
      "path": "/notifications/threads/{thread_id}/subscription",
      "tags": [
        "activity"
      ],
      "summary": "Set a thread subscription",
      "description": "If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint."
    },
    {
      "operationId": "activity/delete-thread-subscription",
      "method": "DELETE",
      "path": "/notifications/threads/{thread_id}/subscription",
      "tags": [
        "activity"
      ],
      "summary": "Delete a thread subscription",
      "description": "Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`."
    },
    {
      "operationId": "activity/list-public-org-events",
      "method": "GET",
      "path": "/orgs/{org}/events",
      "tags": [
        "activity"
      ],
      "summary": "List public organization events",
      "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-repo-events",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/events",
      "tags": [
        "activity"
      ],
      "summary": "List repository events",
      "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-repo-notifications-for-authenticated-user",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/notifications",
      "tags": [
        "activity"
      ],
      "summary": "List repository notifications for the authenticated user",
      "description": "Lists all notifications for the current user in the specified repository."
    },
    {
      "operationId": "activity/mark-repo-notifications-as-read",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/notifications",
      "tags": [
        "activity"
      ],
      "summary": "Mark repository notifications as read",
      "description": "Marks all notifications in a repository as \"read\" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`."
    },
    {
      "operationId": "activity/list-stargazers-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/stargazers",
      "tags": [
        "activity"
      ],
      "summary": "List stargazers",
      "description": "Lists the people that have starred the repository.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created."
    },
    {
      "operationId": "activity/list-watchers-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/subscribers",
      "tags": [
        "activity"
      ],
      "summary": "List watchers",
      "description": "Lists the people watching the specified repository."
    },
    {
      "operationId": "activity/get-repo-subscription",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/subscription",
      "tags": [
        "activity"
      ],
      "summary": "Get a repository subscription",
      "description": "Gets information about whether the authenticated user is subscribed to the repository."
    },
    {
      "operationId": "activity/set-repo-subscription",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/subscription",
      "tags": [
        "activity"
      ],
      "summary": "Set a repository subscription",
      "description": "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely."
    },
    {
      "operationId": "activity/delete-repo-subscription",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/subscription",
      "tags": [
        "activity"
      ],
      "summary": "Delete a repository subscription",
      "description": "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription)."
    },
    {
      "operationId": "activity/list-repos-starred-by-authenticated-user",
      "method": "GET",
      "path": "/user/starred",
      "tags": [
        "activity"
      ],
      "summary": "List repositories starred by the authenticated user",
      "description": "Lists repositories the authenticated user has starred.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created."
    },
    {
      "operationId": "activity/check-repo-is-starred-by-authenticated-user",
      "method": "GET",
      "path": "/user/starred/{owner}/{repo}",
      "tags": [
        "activity"
      ],
      "summary": "Check if a repository is starred by the authenticated user",
      "description": "Whether the authenticated user has starred the repository."
    },
    {
      "operationId": "activity/star-repo-for-authenticated-user",
      "method": "PUT",
      "path": "/user/starred/{owner}/{repo}",
      "tags": [
        "activity"
      ],
      "summary": "Star a repository for the authenticated user",
      "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\""
    },
    {
      "operationId": "activity/unstar-repo-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/starred/{owner}/{repo}",
      "tags": [
        "activity"
      ],
      "summary": "Unstar a repository for the authenticated user",
      "description": "Unstar a repository that the authenticated user has previously starred."
    },
    {
      "operationId": "activity/list-watched-repos-for-authenticated-user",
      "method": "GET",
      "path": "/user/subscriptions",
      "tags": [
        "activity"
      ],
      "summary": "List repositories watched by the authenticated user",
      "description": "Lists repositories the authenticated user is watching."
    },
    {
      "operationId": "activity/list-events-for-authenticated-user",
      "method": "GET",
      "path": "/users/{username}/events",
      "tags": [
        "activity"
      ],
      "summary": "List events for the authenticated user",
      "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: \"Events\" user permissions (read).\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-org-events-for-authenticated-user",
      "method": "GET",
      "path": "/users/{username}/events/orgs/{org}",
      "tags": [
        "activity"
      ],
      "summary": "List organization events for the authenticated user",
      "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-public-events-for-user",
      "method": "GET",
      "path": "/users/{username}/events/public",
      "tags": [
        "activity"
      ],
      "summary": "List public events for a user",
      "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-received-events-for-user",
      "method": "GET",
      "path": "/users/{username}/received_events",
      "tags": [
        "activity"
      ],
      "summary": "List events received by the authenticated user",
      "description": "These are events that you've received by watching repositories and following users. If you are authenticated as the\ngiven user, you will see private events. Otherwise, you'll only see public events.\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-received-public-events-for-user",
      "method": "GET",
      "path": "/users/{username}/received_events/public",
      "tags": [
        "activity"
      ],
      "summary": "List public events received by a user",
      "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h."
    },
    {
      "operationId": "activity/list-repos-starred-by-user",
      "method": "GET",
      "path": "/users/{username}/starred",
      "tags": [
        "activity"
      ],
      "summary": "List repositories starred by a user",
      "description": "Lists repositories a user has starred.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created."
    },
    {
      "operationId": "activity/list-repos-watched-by-user",
      "method": "GET",
      "path": "/users/{username}/subscriptions",
      "tags": [
        "activity"
      ],
      "summary": "List repositories watched by a user",
      "description": "Lists repositories a user is watching."
    },
    {
      "operationId": "issues/list",
      "method": "GET",
      "path": "/issues",
      "tags": [
        "issues"
      ],
      "summary": "List issues assigned to the authenticated user",
      "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-for-org",
      "method": "GET",
      "path": "/orgs/{org}/issues",
      "tags": [
        "issues"
      ],
      "summary": "List organization issues assigned to the authenticated user",
      "description": "List issues in an organization assigned to the authenticated user.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-assignees",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/assignees",
      "tags": [
        "issues"
      ],
      "summary": "List assignees",
      "description": "Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository."
    },
    {
      "operationId": "issues/check-user-can-be-assigned",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/assignees/{assignee}",
      "tags": [
        "issues"
      ],
      "summary": "Check if a user can be assigned",
      "description": "Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned."
    },
    {
      "operationId": "issues/list-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues",
      "tags": [
        "issues"
      ],
      "summary": "List repository issues",
      "description": "List issues in a repository. Only open issues will be listed.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/create",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues",
      "tags": [
        "issues"
      ],
      "summary": "Create an issue",
      "description": "Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-comments-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/comments",
      "tags": [
        "issues"
      ],
      "summary": "List issue comments for a repository",
      "description": "You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.\n\nBy default, issue comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/get-comment",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
      "tags": [
        "issues"
      ],
      "summary": "Get an issue comment",
      "description": "You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/update-comment",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
      "tags": [
        "issues"
      ],
      "summary": "Update an issue comment",
      "description": "You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/delete-comment",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
      "tags": [
        "issues"
      ],
      "summary": "Delete an issue comment",
      "description": "You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request."
    },
    {
      "operationId": "issues/list-events-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/events",
      "tags": [
        "issues"
      ],
      "summary": "List issue events for a repository",
      "description": "Lists events for a repository."
    },
    {
      "operationId": "issues/get-event",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/events/{event_id}",
      "tags": [
        "issues"
      ],
      "summary": "Get an issue event",
      "description": "Gets a single event by the event id."
    },
    {
      "operationId": "issues/get",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}",
      "tags": [
        "issues"
      ],
      "summary": "Get an issue",
      "description": "The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was\n[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/update",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}",
      "tags": [
        "issues"
      ],
      "summary": "Update an issue",
      "description": "Issue owners and users with push access or Triage role can edit an issue.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/add-assignees",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
      "tags": [
        "issues"
      ],
      "summary": "Add assignees to an issue",
      "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced."
    },
    {
      "operationId": "issues/remove-assignees",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
      "tags": [
        "issues"
      ],
      "summary": "Remove assignees from an issue",
      "description": "Removes one or more assignees from an issue."
    },
    {
      "operationId": "issues/check-user-can-be-assigned-to-issue",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}",
      "tags": [
        "issues"
      ],
      "summary": "Check if a user can be assigned to a issue",
      "description": "Checks if a user has permission to be assigned to a specific issue.\n\nIf the `assignee` can be assigned to this issue, a `204` status code with no content is returned.\n\nOtherwise a `404` status code is returned."
    },
    {
      "operationId": "issues/list-comments",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
      "tags": [
        "issues"
      ],
      "summary": "List issue comments",
      "description": "You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nIssue comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/create-comment",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
      "tags": [
        "issues"
      ],
      "summary": "Create an issue comment",
      "description": "You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).\nCreating content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-dependencies-blocked-by",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by",
      "tags": [
        "issues"
      ],
      "summary": "List dependencies an issue is blocked by",
      "description": "You can use the REST API to list the dependencies an issue is blocked by.\n\nThis endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\n\n- **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/add-blocked-by-dependency",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by",
      "tags": [
        "issues"
      ],
      "summary": "Add a dependency an issue is blocked by",
      "description": "You can use the REST API to add a 'blocked by' relationship to an issue.\n\nCreating content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\nand [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\n\nThis endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\n\n- **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/remove-dependency-blocked-by",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by/{issue_id}",
      "tags": [
        "issues"
      ],
      "summary": "Remove dependency an issue is blocked by",
      "description": "You can use the REST API to remove a dependency that an issue is blocked by.\n\nRemoving content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\nand [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\n\nThis endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\n- **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass a specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-dependencies-blocking",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocking",
      "tags": [
        "issues"
      ],
      "summary": "List dependencies an issue is blocking",
      "description": "You can use the REST API to list the dependencies an issue is blocking.\n\nThis endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\n\n- **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-events",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/events",
      "tags": [
        "issues"
      ],
      "summary": "List issue events",
      "description": "Lists all events for an issue."
    },
    {
      "operationId": "issues/list-labels-on-issue",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      "tags": [
        "issues"
      ],
      "summary": "List labels for an issue",
      "description": "Lists all labels for an issue."
    },
    {
      "operationId": "issues/add-labels",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      "tags": [
        "issues"
      ],
      "summary": "Add labels to an issue",
      "description": "Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue. "
    },
    {
      "operationId": "issues/set-labels",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      "tags": [
        "issues"
      ],
      "summary": "Set labels for an issue",
      "description": "Removes any previous labels and sets the new labels for an issue."
    },
    {
      "operationId": "issues/remove-all-labels",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      "tags": [
        "issues"
      ],
      "summary": "Remove all labels from an issue",
      "description": "Removes all labels from an issue."
    },
    {
      "operationId": "issues/remove-label",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
      "tags": [
        "issues"
      ],
      "summary": "Remove a label from an issue",
      "description": "Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist."
    },
    {
      "operationId": "issues/lock",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
      "tags": [
        "issues"
      ],
      "summary": "Lock an issue",
      "description": "Users with push access can lock an issue or pull request's conversation.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\""
    },
    {
      "operationId": "issues/unlock",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
      "tags": [
        "issues"
      ],
      "summary": "Unlock an issue",
      "description": "Users with push access can unlock an issue's conversation."
    },
    {
      "operationId": "issues/get-parent",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/parent",
      "tags": [
        "issues"
      ],
      "summary": "Get parent issue",
      "description": "You can use the REST API to get the parent issue of a sub-issue.\n\nThis endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/remove-sub-issue",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/sub_issue",
      "tags": [
        "issues"
      ],
      "summary": "Remove sub-issue",
      "description": "You can use the REST API to remove a sub-issue from an issue.\nRemoving content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass a specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/list-sub-issues",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues",
      "tags": [
        "issues"
      ],
      "summary": "List sub-issues",
      "description": "You can use the REST API to list the sub-issues on an issue.\n\nThis endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\n\n- **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/add-sub-issue",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues",
      "tags": [
        "issues"
      ],
      "summary": "Add sub-issue",
      "description": "You can use the REST API to add sub-issues to issues.\n\nCreating content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "issues/reprioritize-sub-issue",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority",
      "tags": [
        "issues"
      ],
      "summary": "Reprioritize sub-issue",
      "description": "You can use the REST API to reprioritize a sub-issue to a different position in the parent list."
    },
    {
      "operationId": "issues/list-events-for-timeline",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
      "tags": [
        "issues"
      ],
      "summary": "List timeline events for an issue",
      "description": "List all timeline events for an issue."
    },
    {
      "operationId": "issues/list-labels-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/labels",
      "tags": [
        "issues"
      ],
      "summary": "List labels for a repository",
      "description": "Lists all labels for a repository."
    },
    {
      "operationId": "issues/create-label",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/labels",
      "tags": [
        "issues"
      ],
      "summary": "Create a label",
      "description": "Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/)."
    },
    {
      "operationId": "issues/get-label",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/labels/{name}",
      "tags": [
        "issues"
      ],
      "summary": "Get a label",
      "description": "Gets a label using the given name."
    },
    {
      "operationId": "issues/update-label",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/labels/{name}",
      "tags": [
        "issues"
      ],
      "summary": "Update a label",
      "description": "Updates a label using the given label name."
    },
    {
      "operationId": "issues/delete-label",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/labels/{name}",
      "tags": [
        "issues"
      ],
      "summary": "Delete a label",
      "description": "Deletes a label using the given label name."
    },
    {
      "operationId": "issues/list-milestones",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/milestones",
      "tags": [
        "issues"
      ],
      "summary": "List milestones",
      "description": "Lists milestones for a repository."
    },
    {
      "operationId": "issues/create-milestone",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/milestones",
      "tags": [
        "issues"
      ],
      "summary": "Create a milestone",
      "description": "Creates a milestone."
    },
    {
      "operationId": "issues/get-milestone",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/milestones/{milestone_number}",
      "tags": [
        "issues"
      ],
      "summary": "Get a milestone",
      "description": "Gets a milestone using the given milestone number."
    },
    {
      "operationId": "issues/update-milestone",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/milestones/{milestone_number}",
      "tags": [
        "issues"
      ],
      "summary": "Update a milestone",
      "description": ""
    },
    {
      "operationId": "issues/delete-milestone",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/milestones/{milestone_number}",
      "tags": [
        "issues"
      ],
      "summary": "Delete a milestone",
      "description": "Deletes a milestone using the given milestone number."
    },
    {
      "operationId": "issues/list-labels-for-milestone",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
      "tags": [
        "issues"
      ],
      "summary": "List labels for issues in a milestone",
      "description": "Lists labels for issues in a milestone."
    },
    {
      "operationId": "issues/list-for-authenticated-user",
      "method": "GET",
      "path": "/user/issues",
      "tags": [
        "issues"
      ],
      "summary": "List user account issues assigned to the authenticated user",
      "description": "List issues across owned and member repositories assigned to the authenticated user.\n\n> [!NOTE]\n> GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)\" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`."
    },
    {
      "operationId": "orgs/list",
      "method": "GET",
      "path": "/organizations",
      "tags": [
        "orgs"
      ],
      "summary": "List organizations",
      "description": "Lists all organizations, in the order that they were created.\n\n> [!NOTE]\n> Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations."
    },
    {
      "operationId": "orgs/get",
      "method": "GET",
      "path": "/orgs/{org}",
      "tags": [
        "orgs"
      ],
      "summary": "Get an organization",
      "description": "Gets information about an organization.\n\nWhen the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nTo see the full details about an organization, the authenticated user must be an organization owner.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.\n\nTo see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission."
    },
    {
      "operationId": "orgs/update",
      "method": "PATCH",
      "path": "/orgs/{org}",
      "tags": [
        "orgs"
      ],
      "summary": "Update an organization",
      "description": "> [!WARNING]\n> **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\n> [!WARNING]\n> **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).\n\nUpdates the organization's profile and member privileges.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint."
    },
    {
      "operationId": "orgs/delete",
      "method": "DELETE",
      "path": "/orgs/{org}",
      "tags": [
        "orgs"
      ],
      "summary": "Delete an organization",
      "description": "Deletes an organization and all its repositories.\n\nThe organization login will be unavailable for 90 days after deletion.\n\nPlease review the Terms of Service regarding account deletion before using this endpoint:\n\nhttps://docs.github.com/site-policy/github-terms/github-terms-of-service"
    },
    {
      "operationId": "orgs/create-artifact-storage-record",
      "method": "POST",
      "path": "/orgs/{org}/artifacts/metadata/storage-record",
      "tags": [
        "orgs"
      ],
      "summary": "Create artifact metadata storage record",
      "description": "Create metadata storage records for artifacts associated with an organization.\nThis endpoint will create a new artifact storage record on behalf of any artifact matching the provided digest and\nassociated with a repository owned by the organization."
    },
    {
      "operationId": "orgs/list-artifact-storage-records",
      "method": "GET",
      "path": "/orgs/{org}/artifacts/{subject_digest}/metadata/storage-records",
      "tags": [
        "orgs"
      ],
      "summary": "List artifact storage records",
      "description": "List a collection of artifact storage records with a given subject digest that are associated with repositories owned by an organization.\n\nThe collection of storage records returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `content:read` permission is required."
    },
    {
      "operationId": "orgs/list-attestations-bulk",
      "method": "POST",
      "path": "/orgs/{org}/attestations/bulk-list",
      "tags": [
        "orgs"
      ],
      "summary": "List attestations by bulk subject digests",
      "description": "List a collection of artifact attestations associated with any entry in a list of subject digests owned by an organization.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    },
    {
      "operationId": "orgs/delete-attestations-bulk",
      "method": "POST",
      "path": "/orgs/{org}/attestations/delete-request",
      "tags": [
        "orgs"
      ],
      "summary": "Delete attestations in bulk",
      "description": "Delete artifact attestations in bulk by either subject digests or unique ID."
    },
    {
      "operationId": "orgs/delete-attestations-by-subject-digest",
      "method": "DELETE",
      "path": "/orgs/{org}/attestations/digest/{subject_digest}",
      "tags": [
        "orgs"
      ],
      "summary": "Delete attestations by subject digest",
      "description": "Delete an artifact attestation by subject digest."
    },
    {
      "operationId": "orgs/delete-attestations-by-id",
      "method": "DELETE",
      "path": "/orgs/{org}/attestations/{attestation_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Delete attestations by ID",
      "description": "Delete an artifact attestation by unique ID that is associated with a repository owned by an org."
    },
    {
      "operationId": "orgs/list-attestations",
      "method": "GET",
      "path": "/orgs/{org}/attestations/{subject_digest}",
      "tags": [
        "orgs"
      ],
      "summary": "List attestations",
      "description": "List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    },
    {
      "operationId": "orgs/list-blocked-users",
      "method": "GET",
      "path": "/orgs/{org}/blocks",
      "tags": [
        "orgs"
      ],
      "summary": "List users blocked by an organization",
      "description": "List the users blocked by an organization."
    },
    {
      "operationId": "orgs/check-blocked-user",
      "method": "GET",
      "path": "/orgs/{org}/blocks/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Check if a user is blocked by an organization",
      "description": "Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub."
    },
    {
      "operationId": "orgs/block-user",
      "method": "PUT",
      "path": "/orgs/{org}/blocks/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Block a user from an organization",
      "description": "Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned."
    },
    {
      "operationId": "orgs/unblock-user",
      "method": "DELETE",
      "path": "/orgs/{org}/blocks/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Unblock a user from an organization",
      "description": "Unblocks the given user on behalf of the specified organization."
    },
    {
      "operationId": "orgs/list-failed-invitations",
      "method": "GET",
      "path": "/orgs/{org}/failed_invitations",
      "tags": [
        "orgs"
      ],
      "summary": "List failed organization invitations",
      "description": "The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure."
    },
    {
      "operationId": "orgs/list-webhooks",
      "method": "GET",
      "path": "/orgs/{org}/hooks",
      "tags": [
        "orgs"
      ],
      "summary": "List organization webhooks",
      "description": "List webhooks for an organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/create-webhook",
      "method": "POST",
      "path": "/orgs/{org}/hooks",
      "tags": [
        "orgs"
      ],
      "summary": "Create an organization webhook",
      "description": "Create a hook that posts payloads in JSON format.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or\nedit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/get-webhook",
      "method": "GET",
      "path": "/orgs/{org}/hooks/{hook_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get an organization webhook",
      "description": "Returns a webhook configured in an organization. To get only the webhook\n`config` properties, see \"[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/update-webhook",
      "method": "PATCH",
      "path": "/orgs/{org}/hooks/{hook_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Update an organization webhook",
      "description": "Updates a webhook configured in an organization. When you update a webhook,\nthe `secret` will be overwritten. If you previously had a `secret` set, you must\nprovide the same `secret` or set a new `secret` or the secret will be removed. If\nyou are only updating individual webhook `config` properties, use \"[Update a webhook\nconfiguration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)\".\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/delete-webhook",
      "method": "DELETE",
      "path": "/orgs/{org}/hooks/{hook_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Delete an organization webhook",
      "description": "Delete a webhook for an organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/get-webhook-config-for-org",
      "method": "GET",
      "path": "/orgs/{org}/hooks/{hook_id}/config",
      "tags": [
        "orgs"
      ],
      "summary": "Get a webhook configuration for an organization",
      "description": "Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\"\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/update-webhook-config-for-org",
      "method": "PATCH",
      "path": "/orgs/{org}/hooks/{hook_id}/config",
      "tags": [
        "orgs"
      ],
      "summary": "Update a webhook configuration for an organization",
      "description": "Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\"\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/list-webhook-deliveries",
      "method": "GET",
      "path": "/orgs/{org}/hooks/{hook_id}/deliveries",
      "tags": [
        "orgs"
      ],
      "summary": "List deliveries for an organization webhook",
      "description": "Returns a list of webhook deliveries for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/get-webhook-delivery",
      "method": "GET",
      "path": "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get a webhook delivery for an organization webhook",
      "description": "Returns a delivery for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/redeliver-webhook-delivery",
      "method": "POST",
      "path": "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
      "tags": [
        "orgs"
      ],
      "summary": "Redeliver a delivery for an organization webhook",
      "description": "Redeliver a delivery for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "orgs/ping-webhook",
      "method": "POST",
      "path": "/orgs/{org}/hooks/{hook_id}/pings",
      "tags": [
        "orgs"
      ],
      "summary": "Ping an organization webhook",
      "description": "This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)\nto be sent to the hook.\n\nYou must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit\nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps."
    },
    {
      "operationId": "api-insights/get-route-stats-by-actor",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get route stats by actor",
      "description": "Get API request count statistics for an actor broken down by route within a specified time frame."
    },
    {
      "operationId": "api-insights/get-subject-stats",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/subject-stats",
      "tags": [
        "orgs"
      ],
      "summary": "Get subject stats",
      "description": "Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps."
    },
    {
      "operationId": "api-insights/get-summary-stats",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/summary-stats",
      "tags": [
        "orgs"
      ],
      "summary": "Get summary stats",
      "description": "Get overall statistics of API requests made within an organization by all users and apps within a specified time frame."
    },
    {
      "operationId": "api-insights/get-summary-stats-by-user",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/summary-stats/users/{user_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get summary stats by user",
      "description": "Get overall statistics of API requests within the organization for a user."
    },
    {
      "operationId": "api-insights/get-summary-stats-by-actor",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get summary stats by actor",
      "description": "Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user."
    },
    {
      "operationId": "api-insights/get-time-stats",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/time-stats",
      "tags": [
        "orgs"
      ],
      "summary": "Get time stats",
      "description": "Get the number of API requests and rate-limited requests made within an organization over a specified time period."
    },
    {
      "operationId": "api-insights/get-time-stats-by-user",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/time-stats/users/{user_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get time stats by user",
      "description": "Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period."
    },
    {
      "operationId": "api-insights/get-time-stats-by-actor",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get time stats by actor",
      "description": "Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period."
    },
    {
      "operationId": "api-insights/get-user-stats",
      "method": "GET",
      "path": "/orgs/{org}/insights/api/user-stats/{user_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get user stats",
      "description": "Get API usage statistics within an organization for a user broken down by the type of access."
    },
    {
      "operationId": "orgs/list-app-installations",
      "method": "GET",
      "path": "/orgs/{org}/installations",
      "tags": [
        "orgs"
      ],
      "summary": "List app installations for an organization",
      "description": "Lists all GitHub Apps in an organization. The installation count includes\nall GitHub Apps installed on repositories in the organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint."
    },
    {
      "operationId": "orgs/list-pending-invitations",
      "method": "GET",
      "path": "/orgs/{org}/invitations",
      "tags": [
        "orgs"
      ],
      "summary": "List pending organization invitations",
      "description": "The return hash contains a `role` field which refers to the Organization\nInvitation role and will be one of the following values: `direct_member`, `admin`,\n`billing_manager`, or `hiring_manager`. If the invitee is not a GitHub\nmember, the `login` field in the return hash will be `null`."
    },
    {
      "operationId": "orgs/create-invitation",
      "method": "POST",
      "path": "/orgs/{org}/invitations",
      "tags": [
        "orgs"
      ],
      "summary": "Create an organization invitation",
      "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\"\nand \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\""
    },
    {
      "operationId": "orgs/cancel-invitation",
      "method": "DELETE",
      "path": "/orgs/{org}/invitations/{invitation_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Cancel an organization invitation",
      "description": "Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications)."
    },
    {
      "operationId": "orgs/list-invitation-teams",
      "method": "GET",
      "path": "/orgs/{org}/invitations/{invitation_id}/teams",
      "tags": [
        "orgs"
      ],
      "summary": "List organization invitation teams",
      "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner."
    },
    {
      "operationId": "orgs/list-issue-types",
      "method": "GET",
      "path": "/orgs/{org}/issue-types",
      "tags": [
        "orgs"
      ],
      "summary": "List issue types for an organization",
      "description": "Lists all issue types for an organization. OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint."
    },
    {
      "operationId": "orgs/create-issue-type",
      "method": "POST",
      "path": "/orgs/{org}/issue-types",
      "tags": [
        "orgs"
      ],
      "summary": "Create issue type for an organization",
      "description": "Create a new issue type for an organization.\n\nYou can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).\n\nTo use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and\npersonal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/update-issue-type",
      "method": "PUT",
      "path": "/orgs/{org}/issue-types/{issue_type_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Update issue type for an organization",
      "description": "Updates an issue type for an organization.\n\nYou can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).\n\nTo use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and\npersonal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/delete-issue-type",
      "method": "DELETE",
      "path": "/orgs/{org}/issue-types/{issue_type_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Delete issue type for an organization",
      "description": "Deletes an issue type for an organization.\n\nYou can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).\n\nTo use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and\npersonal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/list-members",
      "method": "GET",
      "path": "/orgs/{org}/members",
      "tags": [
        "orgs"
      ],
      "summary": "List organization members",
      "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned."
    },
    {
      "operationId": "orgs/check-membership-for-user",
      "method": "GET",
      "path": "/orgs/{org}/members/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Check organization membership for a user",
      "description": "Check if a user is, publicly or privately, a member of the organization."
    },
    {
      "operationId": "orgs/remove-member",
      "method": "DELETE",
      "path": "/orgs/{org}/members/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove an organization member",
      "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.\n\n> [!NOTE]\n> If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team."
    },
    {
      "operationId": "orgs/get-membership-for-user",
      "method": "GET",
      "path": "/orgs/{org}/memberships/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Get organization membership for a user",
      "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status."
    },
    {
      "operationId": "orgs/set-membership-for-user",
      "method": "PUT",
      "path": "/orgs/{org}/memberships/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Set organization membership for a user",
      "description": "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period."
    },
    {
      "operationId": "orgs/remove-membership-for-user",
      "method": "DELETE",
      "path": "/orgs/{org}/memberships/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove organization membership for a user",
      "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.\n\n> [!NOTE]\n> If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team."
    },
    {
      "operationId": "orgs/list-org-roles",
      "method": "GET",
      "path": "/orgs/{org}/organization-roles",
      "tags": [
        "orgs"
      ],
      "summary": "Get all organization roles for an organization",
      "description": "Lists the organization roles available in this organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/revoke-all-org-roles-team",
      "method": "DELETE",
      "path": "/orgs/{org}/organization-roles/teams/{team_slug}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove all organization roles for a team",
      "description": "Removes all assigned organization roles from a team. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/assign-team-to-org-role",
      "method": "PUT",
      "path": "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Assign an organization role to a team",
      "description": "Assigns an organization role to a team in an organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/revoke-org-role-team",
      "method": "DELETE",
      "path": "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove an organization role from a team",
      "description": "Removes an organization role from a team. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/revoke-all-org-roles-user",
      "method": "DELETE",
      "path": "/orgs/{org}/organization-roles/users/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove all organization roles for a user",
      "description": "Revokes all assigned organization roles from a user. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/assign-user-to-org-role",
      "method": "PUT",
      "path": "/orgs/{org}/organization-roles/users/{username}/{role_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Assign an organization role to a user",
      "description": "Assigns an organization role to a member of an organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/revoke-org-role-user",
      "method": "DELETE",
      "path": "/orgs/{org}/organization-roles/users/{username}/{role_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove an organization role from a user",
      "description": "Remove an organization role from a user. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/get-org-role",
      "method": "GET",
      "path": "/orgs/{org}/organization-roles/{role_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get an organization role",
      "description": "Gets an organization role that is available to this organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/list-org-role-teams",
      "method": "GET",
      "path": "/orgs/{org}/organization-roles/{role_id}/teams",
      "tags": [
        "orgs"
      ],
      "summary": "List teams that are assigned to an organization role",
      "description": "Lists the teams that are assigned to an organization role. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, you must be an administrator for the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/list-org-role-users",
      "method": "GET",
      "path": "/orgs/{org}/organization-roles/{role_id}/users",
      "tags": [
        "orgs"
      ],
      "summary": "List users that are assigned to an organization role",
      "description": "Lists organization members that are assigned to an organization role. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"\n\nTo use this endpoint, you must be an administrator for the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "orgs/list-outside-collaborators",
      "method": "GET",
      "path": "/orgs/{org}/outside_collaborators",
      "tags": [
        "orgs"
      ],
      "summary": "List outside collaborators for an organization",
      "description": "List all users who are outside collaborators of an organization."
    },
    {
      "operationId": "orgs/convert-member-to-outside-collaborator",
      "method": "PUT",
      "path": "/orgs/{org}/outside_collaborators/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Convert an organization member to outside collaborator",
      "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\""
    },
    {
      "operationId": "orgs/remove-outside-collaborator",
      "method": "DELETE",
      "path": "/orgs/{org}/outside_collaborators/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove outside collaborator from an organization",
      "description": "Removing a user from this list will remove them from all the organization's repositories."
    },
    {
      "operationId": "orgs/list-pat-grant-requests",
      "method": "GET",
      "path": "/orgs/{org}/personal-access-token-requests",
      "tags": [
        "orgs"
      ],
      "summary": "List requests to access organization resources with fine-grained personal access tokens",
      "description": "Lists requests from organization members to access organization resources with a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/review-pat-grant-requests-in-bulk",
      "method": "POST",
      "path": "/orgs/{org}/personal-access-token-requests",
      "tags": [
        "orgs"
      ],
      "summary": "Review requests to access organization resources with fine-grained personal access tokens",
      "description": "Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/review-pat-grant-request",
      "method": "POST",
      "path": "/orgs/{org}/personal-access-token-requests/{pat_request_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Review a request to access organization resources with a fine-grained personal access token",
      "description": "Approves or denies a pending request to access organization resources via a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/list-pat-grant-request-repositories",
      "method": "GET",
      "path": "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
      "tags": [
        "orgs"
      ],
      "summary": "List repositories requested to be accessed by a fine-grained personal access token",
      "description": "Lists the repositories a fine-grained personal access token request is requesting access to.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/list-pat-grants",
      "method": "GET",
      "path": "/orgs/{org}/personal-access-tokens",
      "tags": [
        "orgs"
      ],
      "summary": "List fine-grained personal access tokens with access to organization resources",
      "description": "Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/update-pat-accesses",
      "method": "POST",
      "path": "/orgs/{org}/personal-access-tokens",
      "tags": [
        "orgs"
      ],
      "summary": "Update the access to organization resources via fine-grained personal access tokens",
      "description": "Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/update-pat-access",
      "method": "POST",
      "path": "/orgs/{org}/personal-access-tokens/{pat_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Update the access a fine-grained personal access token has to organization resources",
      "description": "Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/list-pat-grant-repositories",
      "method": "GET",
      "path": "/orgs/{org}/personal-access-tokens/{pat_id}/repositories",
      "tags": [
        "orgs"
      ],
      "summary": "List repositories a fine-grained personal access token has access to",
      "description": "Lists the repositories a fine-grained personal access token has access to.\n\nOnly GitHub Apps can use this endpoint."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-get-organization-definitions",
      "method": "GET",
      "path": "/orgs/{org}/properties/schema",
      "tags": [
        "orgs"
      ],
      "summary": "Get all custom properties for an organization",
      "description": "Gets all custom properties defined for an organization.\nOrganization members can read these properties."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-create-or-update-organization-definitions",
      "method": "PATCH",
      "path": "/orgs/{org}/properties/schema",
      "tags": [
        "orgs"
      ],
      "summary": "Create or update custom properties for an organization",
      "description": "Creates new or updates existing custom properties defined for an organization in a batch.\n\nIf the property already exists, the existing property will be replaced with the new values.\nMissing optional values will fall back to default values, previous values will be overwritten.\nE.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-get-organization-definition",
      "method": "GET",
      "path": "/orgs/{org}/properties/schema/{custom_property_name}",
      "tags": [
        "orgs"
      ],
      "summary": "Get a custom property for an organization",
      "description": "Gets a custom property that is defined for an organization.\nOrganization members can read these properties."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-create-or-update-organization-definition",
      "method": "PUT",
      "path": "/orgs/{org}/properties/schema/{custom_property_name}",
      "tags": [
        "orgs"
      ],
      "summary": "Create or update a custom property for an organization",
      "description": "Creates a new or updates an existing custom property that is defined for an organization.\n\nTo use this endpoint, the authenticated user must be one of:\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-delete-organization-definition",
      "method": "DELETE",
      "path": "/orgs/{org}/properties/schema/{custom_property_name}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove a custom property for an organization",
      "description": "Removes a custom property that is defined for an organization.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-get-organization-values",
      "method": "GET",
      "path": "/orgs/{org}/properties/values",
      "tags": [
        "orgs"
      ],
      "summary": "List custom property values for organization repositories",
      "description": "Lists organization repositories with all of their custom property values.\nOrganization members can read these properties."
    },
    {
      "operationId": "orgs/custom-properties-for-repos-create-or-update-organization-values",
      "method": "PATCH",
      "path": "/orgs/{org}/properties/values",
      "tags": [
        "orgs"
      ],
      "summary": "Create or update custom property values for organization repositories",
      "description": "Create new or update existing custom property values for repositories in a batch that belong to an organization.\nEach target repository will have its custom property values updated to match the values provided in the request.\n\nA maximum of 30 repositories can be updated in a single request.\n\nUsing a value of `null` for a custom property will remove or 'unset' the property value from the repository.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization."
    },
    {
      "operationId": "orgs/list-public-members",
      "method": "GET",
      "path": "/orgs/{org}/public_members",
      "tags": [
        "orgs"
      ],
      "summary": "List public organization members",
      "description": "Members of an organization can choose to have their membership publicized or not."
    },
    {
      "operationId": "orgs/check-public-membership-for-user",
      "method": "GET",
      "path": "/orgs/{org}/public_members/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Check public organization membership for a user",
      "description": "Check if the provided user is a public member of the organization."
    },
    {
      "operationId": "orgs/set-public-membership-for-authenticated-user",
      "method": "PUT",
      "path": "/orgs/{org}/public_members/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Set public organization membership for the authenticated user",
      "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\""
    },
    {
      "operationId": "orgs/remove-public-membership-for-authenticated-user",
      "method": "DELETE",
      "path": "/orgs/{org}/public_members/{username}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove public organization membership for the authenticated user",
      "description": "Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default."
    },
    {
      "operationId": "orgs/get-org-ruleset-history",
      "method": "GET",
      "path": "/orgs/{org}/rulesets/{ruleset_id}/history",
      "tags": [
        "orgs"
      ],
      "summary": "Get organization ruleset history",
      "description": "Get the history of an organization ruleset."
    },
    {
      "operationId": "orgs/get-org-ruleset-version",
      "method": "GET",
      "path": "/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}",
      "tags": [
        "orgs"
      ],
      "summary": "Get organization ruleset version",
      "description": "Get a version of an organization ruleset."
    },
    {
      "operationId": "orgs/list-security-manager-teams",
      "method": "GET",
      "path": "/orgs/{org}/security-managers",
      "tags": [
        "orgs"
      ],
      "summary": "List security manager teams",
      "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead."
    },
    {
      "operationId": "orgs/add-security-manager-team",
      "method": "PUT",
      "path": "/orgs/{org}/security-managers/teams/{team_slug}",
      "tags": [
        "orgs"
      ],
      "summary": "Add a security manager team",
      "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead."
    },
    {
      "operationId": "orgs/remove-security-manager-team",
      "method": "DELETE",
      "path": "/orgs/{org}/security-managers/teams/{team_slug}",
      "tags": [
        "orgs"
      ],
      "summary": "Remove a security manager team",
      "description": "> [!WARNING]\n> **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead."
    },
    {
      "operationId": "orgs/enable-or-disable-security-product-on-all-org-repos",
      "method": "POST",
      "path": "/orgs/{org}/{security_product}/{enablement}",
      "tags": [
        "orgs"
      ],
      "summary": "Enable or disable a security feature for an organization",
      "description": "> [!WARNING]\n> **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).\n\nEnables or disables the specified security feature for all eligible repositories in an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nThe authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint."
    },
    {
      "operationId": "orgs/list-memberships-for-authenticated-user",
      "method": "GET",
      "path": "/user/memberships/orgs",
      "tags": [
        "orgs"
      ],
      "summary": "List organization memberships for the authenticated user",
      "description": "Lists all of the authenticated user's organization memberships."
    },
    {
      "operationId": "orgs/get-membership-for-authenticated-user",
      "method": "GET",
      "path": "/user/memberships/orgs/{org}",
      "tags": [
        "orgs"
      ],
      "summary": "Get an organization membership for the authenticated user",
      "description": "If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization."
    },
    {
      "operationId": "orgs/update-membership-for-authenticated-user",
      "method": "PATCH",
      "path": "/user/memberships/orgs/{org}",
      "tags": [
        "orgs"
      ],
      "summary": "Update an organization membership for the authenticated user",
      "description": "Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization."
    },
    {
      "operationId": "orgs/list-for-authenticated-user",
      "method": "GET",
      "path": "/user/orgs",
      "tags": [
        "orgs"
      ],
      "summary": "List organizations for the authenticated user",
      "description": "List organizations for the authenticated user.\n\nFor OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.\n\n> [!NOTE]\n> Requests using a fine-grained access token will receive a `200 Success` response with an empty list."
    },
    {
      "operationId": "orgs/list-for-user",
      "method": "GET",
      "path": "/users/{username}/orgs",
      "tags": [
        "orgs"
      ],
      "summary": "List organizations for a user",
      "description": "List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead."
    },
    {
      "operationId": "oidc/get-oidc-custom-sub-template-for-org",
      "method": "GET",
      "path": "/orgs/{org}/actions/oidc/customization/sub",
      "tags": [
        "oidc"
      ],
      "summary": "Get the customization template for an OIDC subject claim for an organization",
      "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint."
    },
    {
      "operationId": "oidc/update-oidc-custom-sub-template-for-org",
      "method": "PUT",
      "path": "/orgs/{org}/actions/oidc/customization/sub",
      "tags": [
        "oidc"
      ],
      "summary": "Set the customization template for an OIDC subject claim for an organization",
      "description": "Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-in-organization",
      "method": "GET",
      "path": "/orgs/{org}/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "List codespaces for the organization",
      "description": "Lists the codespaces associated to a specified organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/set-codespaces-access",
      "method": "PUT",
      "path": "/orgs/{org}/codespaces/access",
      "tags": [
        "codespaces"
      ],
      "summary": "Manage access control for organization codespaces",
      "description": "Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/set-codespaces-access-users",
      "method": "POST",
      "path": "/orgs/{org}/codespaces/access/selected_users",
      "tags": [
        "codespaces"
      ],
      "summary": "Add users to Codespaces access for an organization",
      "description": "Codespaces for the specified users will be billed to the organization.\n\nTo use this endpoint, the access settings for the organization must be set to `selected_members`.\nFor information on how to change this setting, see \"[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/delete-codespaces-access-users",
      "method": "DELETE",
      "path": "/orgs/{org}/codespaces/access/selected_users",
      "tags": [
        "codespaces"
      ],
      "summary": "Remove users from Codespaces access for an organization",
      "description": "Codespaces for the specified users will no longer be billed to the organization.\n\nTo use this endpoint, the access settings for the organization must be set to `selected_members`.\nFor information on how to change this setting, see \"[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-org-secrets",
      "method": "GET",
      "path": "/orgs/{org}/codespaces/secrets",
      "tags": [
        "codespaces"
      ],
      "summary": "List organization secrets",
      "description": "Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-org-public-key",
      "method": "GET",
      "path": "/orgs/{org}/codespaces/secrets/public-key",
      "tags": [
        "codespaces"
      ],
      "summary": "Get an organization public key",
      "description": "Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-org-secret",
      "method": "GET",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Get an organization secret",
      "description": "Gets an organization development environment secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/create-or-update-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Create or update an organization secret",
      "description": "Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/delete-org-secret",
      "method": "DELETE",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Delete an organization secret",
      "description": "Deletes an organization development environment secret using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-selected-repos-for-org-secret",
      "method": "GET",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}/repositories",
      "tags": [
        "codespaces"
      ],
      "summary": "List selected repositories for an organization secret",
      "description": "Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/set-selected-repos-for-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}/repositories",
      "tags": [
        "codespaces"
      ],
      "summary": "Set selected repositories for an organization secret",
      "description": "Replaces all repositories for an organization development environment secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/add-selected-repo-to-org-secret",
      "method": "PUT",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "codespaces"
      ],
      "summary": "Add selected repository to an organization secret",
      "description": "Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/remove-selected-repo-from-org-secret",
      "method": "DELETE",
      "path": "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "codespaces"
      ],
      "summary": "Remove selected repository from an organization secret",
      "description": "Removes a repository from an organization development environment secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-codespaces-for-user-in-org",
      "method": "GET",
      "path": "/orgs/{org}/members/{username}/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "List codespaces for a user in organization",
      "description": "Lists the codespaces that a member of an organization has for repositories in that organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/delete-from-organization",
      "method": "DELETE",
      "path": "/orgs/{org}/members/{username}/codespaces/{codespace_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Delete a codespace from the organization",
      "description": "Deletes a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/stop-in-organization",
      "method": "POST",
      "path": "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop",
      "tags": [
        "codespaces"
      ],
      "summary": "Stop a codespace for an organization user",
      "description": "Stops a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-in-repository-for-authenticated-user",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "List codespaces in a repository for the authenticated user",
      "description": "Lists the codespaces associated to a specified repository and the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/create-with-repo-for-authenticated-user",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "Create a codespace in a repository",
      "description": "Creates a codespace owned by the authenticated user in the specified repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-devcontainers-in-repository-for-authenticated-user",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/devcontainers",
      "tags": [
        "codespaces"
      ],
      "summary": "List devcontainer configurations in a repository for the authenticated user",
      "description": "Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files\nspecify launchpoint configurations for codespaces created within the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/repo-machines-for-authenticated-user",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/machines",
      "tags": [
        "codespaces"
      ],
      "summary": "List available machine types for a repository",
      "description": "List the machine types available for a given repository based on its configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/pre-flight-with-repo-for-authenticated-user",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/new",
      "tags": [
        "codespaces"
      ],
      "summary": "Get default attributes for a codespace",
      "description": "Gets the default attributes for codespaces created by the user with the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/check-permissions-for-devcontainer",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/permissions_check",
      "tags": [
        "codespaces"
      ],
      "summary": "Check if permissions defined by a devcontainer have been accepted by the authenticated user",
      "description": "Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-repo-secrets",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/secrets",
      "tags": [
        "codespaces"
      ],
      "summary": "List repository secrets",
      "description": "Lists all development environment secrets available in a repository without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-repo-public-key",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/secrets/public-key",
      "tags": [
        "codespaces"
      ],
      "summary": "Get a repository public key",
      "description": "Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nIf the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-repo-secret",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Get a repository secret",
      "description": "Gets a single repository development environment secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/create-or-update-repo-secret",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Create or update a repository secret",
      "description": "Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin."
    },
    {
      "operationId": "codespaces/delete-repo-secret",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Delete a repository secret",
      "description": "Deletes a development environment secret in a repository using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin."
    },
    {
      "operationId": "codespaces/create-with-pr-for-authenticated-user",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "Create a codespace from a pull request",
      "description": "Creates a codespace owned by the authenticated user for the specified pull request.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "List codespaces for the authenticated user",
      "description": "Lists the authenticated user's codespaces.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/create-for-authenticated-user",
      "method": "POST",
      "path": "/user/codespaces",
      "tags": [
        "codespaces"
      ],
      "summary": "Create a codespace for the authenticated user",
      "description": "Creates a new codespace, owned by the authenticated user.\n\nThis endpoint requires either a `repository_id` OR a `pull_request` but not both.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-secrets-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/secrets",
      "tags": [
        "codespaces"
      ],
      "summary": "List secrets for the authenticated user",
      "description": "Lists all development environment secrets available for a user's codespaces without revealing their\nencrypted values.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-public-key-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/secrets/public-key",
      "tags": [
        "codespaces"
      ],
      "summary": "Get public key for the authenticated user",
      "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-secret-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Get a secret for the authenticated user",
      "description": "Gets a development environment secret available to a user's codespaces without revealing its encrypted value.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/create-or-update-secret-for-authenticated-user",
      "method": "PUT",
      "path": "/user/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Create or update a secret for the authenticated user",
      "description": "Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/delete-secret-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/codespaces/secrets/{secret_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Delete a secret for the authenticated user",
      "description": "Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/list-repositories-for-secret-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/secrets/{secret_name}/repositories",
      "tags": [
        "codespaces"
      ],
      "summary": "List selected repositories for a user secret",
      "description": "List the repositories that have been granted the ability to use a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/set-repositories-for-secret-for-authenticated-user",
      "method": "PUT",
      "path": "/user/codespaces/secrets/{secret_name}/repositories",
      "tags": [
        "codespaces"
      ],
      "summary": "Set selected repositories for a user secret",
      "description": "Select the repositories that will use a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/add-repository-for-secret-for-authenticated-user",
      "method": "PUT",
      "path": "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "codespaces"
      ],
      "summary": "Add a selected repository to a user secret",
      "description": "Adds a repository to the selected repositories for a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/remove-repository-for-secret-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
      "tags": [
        "codespaces"
      ],
      "summary": "Remove a selected repository from a user secret",
      "description": "Removes a repository from the selected repositories for a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/{codespace_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Get a codespace for the authenticated user",
      "description": "Gets information about a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/update-for-authenticated-user",
      "method": "PATCH",
      "path": "/user/codespaces/{codespace_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Update a codespace for the authenticated user",
      "description": "Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.\n\nIf you specify a new machine type it will be applied the next time your codespace is started.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/delete-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/codespaces/{codespace_name}",
      "tags": [
        "codespaces"
      ],
      "summary": "Delete a codespace for the authenticated user",
      "description": "Deletes a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/export-for-authenticated-user",
      "method": "POST",
      "path": "/user/codespaces/{codespace_name}/exports",
      "tags": [
        "codespaces"
      ],
      "summary": "Export a codespace for the authenticated user",
      "description": "Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.\n\nIf changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/get-export-details-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/{codespace_name}/exports/{export_id}",
      "tags": [
        "codespaces"
      ],
      "summary": "Get details about a codespace export",
      "description": "Gets information about an export of a codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/codespace-machines-for-authenticated-user",
      "method": "GET",
      "path": "/user/codespaces/{codespace_name}/machines",
      "tags": [
        "codespaces"
      ],
      "summary": "List machine types for a codespace",
      "description": "List the machine types a codespace can transition to use.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/publish-for-authenticated-user",
      "method": "POST",
      "path": "/user/codespaces/{codespace_name}/publish",
      "tags": [
        "codespaces"
      ],
      "summary": "Create a repository from an unpublished codespace",
      "description": "Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.\n\nThe codespace's token is granted write permissions to the repository, allowing the user to push their changes.\n\nThis will fail for a codespace that is already published, meaning it has an associated repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/start-for-authenticated-user",
      "method": "POST",
      "path": "/user/codespaces/{codespace_name}/start",
      "tags": [
        "codespaces"
      ],
      "summary": "Start a codespace for the authenticated user",
      "description": "Starts a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "codespaces/stop-for-authenticated-user",
      "method": "POST",
      "path": "/user/codespaces/{codespace_name}/stop",
      "tags": [
        "codespaces"
      ],
      "summary": "Stop a codespace for the authenticated user",
      "description": "Stops a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint."
    },
    {
      "operationId": "interactions/get-restrictions-for-org",
      "method": "GET",
      "path": "/orgs/{org}/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Get interaction restrictions for an organization",
      "description": "Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response."
    },
    {
      "operationId": "interactions/set-restrictions-for-org",
      "method": "PUT",
      "path": "/orgs/{org}/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Set interaction restrictions for an organization",
      "description": "Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization."
    },
    {
      "operationId": "interactions/remove-restrictions-for-org",
      "method": "DELETE",
      "path": "/orgs/{org}/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Remove interaction restrictions for an organization",
      "description": "Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions."
    },
    {
      "operationId": "interactions/get-restrictions-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Get interaction restrictions for a repository",
      "description": "Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response."
    },
    {
      "operationId": "interactions/set-restrictions-for-repo",
      "method": "PUT",
      "path": "/repos/{owner}/{repo}/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Set interaction restrictions for a repository",
      "description": "Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository."
    },
    {
      "operationId": "interactions/remove-restrictions-for-repo",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Remove interaction restrictions for a repository",
      "description": "Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository."
    },
    {
      "operationId": "interactions/get-restrictions-for-authenticated-user",
      "method": "GET",
      "path": "/user/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Get interaction restrictions for your public repositories",
      "description": "Shows which type of GitHub user can interact with your public repositories and when the restriction expires."
    },
    {
      "operationId": "interactions/set-restrictions-for-authenticated-user",
      "method": "PUT",
      "path": "/user/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Set interaction restrictions for your public repositories",
      "description": "Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user."
    },
    {
      "operationId": "interactions/remove-restrictions-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/interaction-limits",
      "tags": [
        "interactions"
      ],
      "summary": "Remove interaction restrictions from your public repositories",
      "description": "Removes any interaction restrictions from your public repositories."
    },
    {
      "operationId": "projects-classic/list-for-org",
      "method": "GET",
      "path": "/orgs/{org}/projects",
      "tags": [
        "projects-classic"
      ],
      "summary": "List organization projects",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/create-for-org",
      "method": "POST",
      "path": "/orgs/{org}/projects",
      "tags": [
        "projects-classic"
      ],
      "summary": "Create an organization project",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/get-column",
      "method": "GET",
      "path": "/projects/columns/{column_id}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Get a project column",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/update-column",
      "method": "PATCH",
      "path": "/projects/columns/{column_id}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Update an existing project column",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/delete-column",
      "method": "DELETE",
      "path": "/projects/columns/{column_id}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Delete a project column",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/move-column",
      "method": "POST",
      "path": "/projects/columns/{column_id}/moves",
      "tags": [
        "projects-classic"
      ],
      "summary": "Move a project column",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/get",
      "method": "GET",
      "path": "/projects/{project_id}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Get a project",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/update",
      "method": "PATCH",
      "path": "/projects/{project_id}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Update a project",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/delete",
      "method": "DELETE",
      "path": "/projects/{project_id}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Delete a project",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/list-collaborators",
      "method": "GET",
      "path": "/projects/{project_id}/collaborators",
      "tags": [
        "projects-classic"
      ],
      "summary": "List project collaborators",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/add-collaborator",
      "method": "PUT",
      "path": "/projects/{project_id}/collaborators/{username}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Add project collaborator",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/remove-collaborator",
      "method": "DELETE",
      "path": "/projects/{project_id}/collaborators/{username}",
      "tags": [
        "projects-classic"
      ],
      "summary": "Remove user as a collaborator",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/get-permission-for-user",
      "method": "GET",
      "path": "/projects/{project_id}/collaborators/{username}/permission",
      "tags": [
        "projects-classic"
      ],
      "summary": "Get project permission for a user",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/list-columns",
      "method": "GET",
      "path": "/projects/{project_id}/columns",
      "tags": [
        "projects-classic"
      ],
      "summary": "List project columns",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/create-column",
      "method": "POST",
      "path": "/projects/{project_id}/columns",
      "tags": [
        "projects-classic"
      ],
      "summary": "Create a project column",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/list-for-repo",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/projects",
      "tags": [
        "projects-classic"
      ],
      "summary": "List repository projects",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/create-for-repo",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/projects",
      "tags": [
        "projects-classic"
      ],
      "summary": "Create a repository project",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/create-for-authenticated-user",
      "method": "POST",
      "path": "/user/projects",
      "tags": [
        "projects-classic"
      ],
      "summary": "Create a user project",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "projects-classic/list-for-user",
      "method": "GET",
      "path": "/users/{username}/projects",
      "tags": [
        "projects-classic"
      ],
      "summary": "List user projects",
      "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information."
    },
    {
      "operationId": "hosted-compute/list-network-configurations-for-org",
      "method": "GET",
      "path": "/orgs/{org}/settings/network-configurations",
      "tags": [
        "hosted-compute"
      ],
      "summary": "List hosted compute network configurations for an organization",
      "description": "Lists all hosted compute network configurations configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint."
    },
    {
      "operationId": "hosted-compute/create-network-configuration-for-org",
      "method": "POST",
      "path": "/orgs/{org}/settings/network-configurations",
      "tags": [
        "hosted-compute"
      ],
      "summary": "Create a hosted compute network configuration for an organization",
      "description": "Creates a hosted compute network configuration for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint."
    },
    {
      "operationId": "hosted-compute/get-network-configuration-for-org",
      "method": "GET",
      "path": "/orgs/{org}/settings/network-configurations/{network_configuration_id}",
      "tags": [
        "hosted-compute"
      ],
      "summary": "Get a hosted compute network configuration for an organization",
      "description": "Gets a hosted compute network configuration configured in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint."
    },
    {
      "operationId": "hosted-compute/update-network-configuration-for-org",
      "method": "PATCH",
      "path": "/orgs/{org}/settings/network-configurations/{network_configuration_id}",
      "tags": [
        "hosted-compute"
      ],
      "summary": "Update a hosted compute network configuration for an organization",
      "description": "Updates a hosted compute network configuration for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint."
    },
    {
      "operationId": "hosted-compute/delete-network-configuration-from-org",
      "method": "DELETE",
      "path": "/orgs/{org}/settings/network-configurations/{network_configuration_id}",
      "tags": [
        "hosted-compute"
      ],
      "summary": "Delete a hosted compute network configuration from an organization",
      "description": "Deletes a hosted compute network configuration from an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint."
    },
    {
      "operationId": "hosted-compute/get-network-settings-for-org",
      "method": "GET",
      "path": "/orgs/{org}/settings/network-settings/{network_settings_id}",
      "tags": [
        "hosted-compute"
      ],
      "summary": "Get a hosted compute network settings resource for an organization",
      "description": "Gets a hosted compute network settings resource configured for an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint."
    },
    {
      "operationId": "rate-limit/get",
      "method": "GET",
      "path": "/rate_limit",
      "tags": [
        "rate-limit"
      ],
      "summary": "Get rate limit status for the authenticated user",
      "description": "> [!NOTE]\n> Accessing this endpoint does not count against your REST API rate limit.\n\nSome categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:\n* The `core` object provides your rate limit status for all non-search-related resources in the REST API.\n* The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see \"[Search](https://docs.github.com/rest/search/search).\"\n* The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see \"[Search code](https://docs.github.com/rest/search/search#search-code).\"\n* The `graphql` object provides your rate limit status for the GraphQL API. For more information, see \"[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit).\"\n* The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see \"[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration).\"\n* The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see \"[Dependency graph](https://docs.github.com/rest/dependency-graph).\"\n* The `dependency_sbom` object provides your rate limit status for requesting SBOMs from the dependency graph. For more information, see \"[Dependency graph](https://docs.github.com/rest/dependency-graph).\"\n* The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see \"[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github).\"\n* The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see \"[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners).\"\n* The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see \"[API Versions](https://docs.github.com/rest/about-the-rest-api/api-versions).\"\n\n> [!NOTE]\n> The `rate` object is closing down. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object."
    },
    {
      "operationId": "git/create-blob",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/git/blobs",
      "tags": [
        "git"
      ],
      "summary": "Create a blob",
      "description": ""
    },
    {
      "operationId": "git/get-blob",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/git/blobs/{file_sha}",
      "tags": [
        "git"
      ],
      "summary": "Get a blob",
      "description": "The `content` in the response will always be Base64 encoded.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.raw+json`**: Returns the raw blob data.\n- **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified.\n\n**Note** This endpoint supports blobs up to 100 megabytes in size."
    },
    {
      "operationId": "git/create-commit",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/git/commits",
      "tags": [
        "git"
      ],
      "summary": "Create a commit",
      "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "git/get-commit",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/git/commits/{commit_sha}",
      "tags": [
        "git"
      ],
      "summary": "Get a commit object",
      "description": "Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n\nTo get the contents of a commit, see \"[Get a commit](/rest/commits/commits#get-a-commit).\"\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "git/list-matching-refs",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/git/matching-refs/{ref}",
      "tags": [
        "git"
      ],
      "summary": "List matching references",
      "description": "Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n> [!NOTE]\n> You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`."
    },
    {
      "operationId": "git/get-ref",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/git/ref/{ref}",
      "tags": [
        "git"
      ],
      "summary": "Get a reference",
      "description": "Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n> [!NOTE]\n> You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\"."
    },
    {
      "operationId": "git/create-ref",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/git/refs",
      "tags": [
        "git"
      ],
      "summary": "Create a reference",
      "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches."
    },
    {
      "operationId": "git/update-ref",
      "method": "PATCH",
      "path": "/repos/{owner}/{repo}/git/refs/{ref}",
      "tags": [
        "git"
      ],
      "summary": "Update a reference",
      "description": "Updates the provided reference to point to a new SHA. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation."
    },
    {
      "operationId": "git/delete-ref",
      "method": "DELETE",
      "path": "/repos/{owner}/{repo}/git/refs/{ref}",
      "tags": [
        "git"
      ],
      "summary": "Delete a reference",
      "description": "Deletes the provided reference."
    },
    {
      "operationId": "git/create-tag",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/git/tags",
      "tags": [
        "git"
      ],
      "summary": "Create a tag object",
      "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "git/get-tag",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/git/tags/{tag_sha}",
      "tags": [
        "git"
      ],
      "summary": "Get a tag",
      "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n| `verified_at` | `string` | The date the signature was verified by GitHub. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
    },
    {
      "operationId": "git/create-tree",
      "method": "POST",
      "path": "/repos/{owner}/{repo}/git/trees",
      "tags": [
        "git"
      ],
      "summary": "Create a tree",
      "description": "The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference).\"\n\nReturns an error if you try to delete a file that does not exist."
    },
    {
      "operationId": "git/get-tree",
      "method": "GET",
      "path": "/repos/{owner}/{repo}/git/trees/{tree_sha}",
      "tags": [
        "git"
      ],
      "summary": "Get a tree",
      "description": "Returns a single tree using the SHA1 value or ref name for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n\n> [!NOTE]\n> The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter."
    },
    {
      "operationId": "users/get-authenticated",
      "method": "GET",
      "path": "/user",
      "tags": [
        "users"
      ],
      "summary": "Get the authenticated user",
      "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information."
    },
    {
      "operationId": "users/update-authenticated",
      "method": "PATCH",
      "path": "/user",
      "tags": [
        "users"
      ],
      "summary": "Update the authenticated user",
      "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API."
    },
    {
      "operationId": "users/list-blocked-by-authenticated-user",
      "method": "GET",
      "path": "/user/blocks",
      "tags": [
        "users"
      ],
      "summary": "List users blocked by the authenticated user",
      "description": "List the users you've blocked on your personal account."
    },
    {
      "operationId": "users/check-blocked",
      "method": "GET",
      "path": "/user/blocks/{username}",
      "tags": [
        "users"
      ],
      "summary": "Check if a user is blocked by the authenticated user",
      "description": "Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub."
    },
    {
      "operationId": "users/block",
      "method": "PUT",
      "path": "/user/blocks/{username}",
      "tags": [
        "users"
      ],
      "summary": "Block a user",
      "description": "Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned."
    },
    {
      "operationId": "users/unblock",
      "method": "DELETE",
      "path": "/user/blocks/{username}",
      "tags": [
        "users"
      ],
      "summary": "Unblock a user",
      "description": "Unblocks the given user and returns a 204."
    },
    {
      "operationId": "users/set-primary-email-visibility-for-authenticated-user",
      "method": "PATCH",
      "path": "/user/email/visibility",
      "tags": [
        "users"
      ],
      "summary": "Set primary email visibility for the authenticated user",
      "description": "Sets the visibility for your primary email addresses."
    },
    {
      "operationId": "users/list-emails-for-authenticated-user",
      "method": "GET",
      "path": "/user/emails",
      "tags": [
        "users"
      ],
      "summary": "List email addresses for the authenticated user",
      "description": "Lists all of your email addresses, and specifies which one is visible\nto the public.\n\nOAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint."
    },
    {
      "operationId": "users/add-email-for-authenticated-user",
      "method": "POST",
      "path": "/user/emails",
      "tags": [
        "users"
      ],
      "summary": "Add an email address for the authenticated user",
      "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint."
    },
    {
      "operationId": "users/delete-email-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/emails",
      "tags": [
        "users"
      ],
      "summary": "Delete an email address for the authenticated user",
      "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint."
    },
    {
      "operationId": "users/list-followers-for-authenticated-user",
      "method": "GET",
      "path": "/user/followers",
      "tags": [
        "users"
      ],
      "summary": "List followers of the authenticated user",
      "description": "Lists the people following the authenticated user."
    },
    {
      "operationId": "users/list-followed-by-authenticated-user",
      "method": "GET",
      "path": "/user/following",
      "tags": [
        "users"
      ],
      "summary": "List the people the authenticated user follows",
      "description": "Lists the people who the authenticated user follows."
    },
    {
      "operationId": "users/check-person-is-followed-by-authenticated",
      "method": "GET",
      "path": "/user/following/{username}",
      "tags": [
        "users"
      ],
      "summary": "Check if a person is followed by the authenticated user",
      "description": ""
    },
    {
      "operationId": "users/follow",
      "method": "PUT",
      "path": "/user/following/{username}",
      "tags": [
        "users"
      ],
      "summary": "Follow a user",
      "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"\n\nOAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint."
    },
    {
      "operationId": "users/unfollow",
      "method": "DELETE",
      "path": "/user/following/{username}",
      "tags": [
        "users"
      ],
      "summary": "Unfollow a user",
      "description": "OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint."
    },
    {
      "operationId": "users/list-gpg-keys-for-authenticated-user",
      "method": "GET",
      "path": "/user/gpg_keys",
      "tags": [
        "users"
      ],
      "summary": "List GPG keys for the authenticated user",
      "description": "Lists the current user's GPG keys.\n\nOAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint."
    },
    {
      "operationId": "users/create-gpg-key-for-authenticated-user",
      "method": "POST",
      "path": "/user/gpg_keys",
      "tags": [
        "users"
      ],
      "summary": "Create a GPG key for the authenticated user",
      "description": "Adds a GPG key to the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint."
    },
    {
      "operationId": "users/get-gpg-key-for-authenticated-user",
      "method": "GET",
      "path": "/user/gpg_keys/{gpg_key_id}",
      "tags": [
        "users"
      ],
      "summary": "Get a GPG key for the authenticated user",
      "description": "View extended details for a single GPG key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint."
    },
    {
      "operationId": "users/delete-gpg-key-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/gpg_keys/{gpg_key_id}",
      "tags": [
        "users"
      ],
      "summary": "Delete a GPG key for the authenticated user",
      "description": "Removes a GPG key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint."
    },
    {
      "operationId": "users/list-public-ssh-keys-for-authenticated-user",
      "method": "GET",
      "path": "/user/keys",
      "tags": [
        "users"
      ],
      "summary": "List public SSH keys for the authenticated user",
      "description": "Lists the public SSH keys for the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint."
    },
    {
      "operationId": "users/create-public-ssh-key-for-authenticated-user",
      "method": "POST",
      "path": "/user/keys",
      "tags": [
        "users"
      ],
      "summary": "Create a public SSH key for the authenticated user",
      "description": "Adds a public SSH key to the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:public_key` scope to use this endpoint."
    },
    {
      "operationId": "users/get-public-ssh-key-for-authenticated-user",
      "method": "GET",
      "path": "/user/keys/{key_id}",
      "tags": [
        "users"
      ],
      "summary": "Get a public SSH key for the authenticated user",
      "description": "View extended details for a single public SSH key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint."
    },
    {
      "operationId": "users/delete-public-ssh-key-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/keys/{key_id}",
      "tags": [
        "users"
      ],
      "summary": "Delete a public SSH key for the authenticated user",
      "description": "Removes a public SSH key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint."
    },
    {
      "operationId": "users/list-public-emails-for-authenticated-user",
      "method": "GET",
      "path": "/user/public_emails",
      "tags": [
        "users"
      ],
      "summary": "List public email addresses for the authenticated user",
      "description": "Lists your publicly visible email address, which you can set with the\n[Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)\nendpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint."
    },
    {
      "operationId": "users/list-social-accounts-for-authenticated-user",
      "method": "GET",
      "path": "/user/social_accounts",
      "tags": [
        "users"
      ],
      "summary": "List social accounts for the authenticated user",
      "description": "Lists all of your social accounts."
    },
    {
      "operationId": "users/add-social-account-for-authenticated-user",
      "method": "POST",
      "path": "/user/social_accounts",
      "tags": [
        "users"
      ],
      "summary": "Add social accounts for the authenticated user",
      "description": "Add one or more social accounts to the authenticated user's profile.\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint."
    },
    {
      "operationId": "users/delete-social-account-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/social_accounts",
      "tags": [
        "users"
      ],
      "summary": "Delete social accounts for the authenticated user",
      "description": "Deletes one or more social accounts from the authenticated user's profile.\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint."
    },
    {
      "operationId": "users/list-ssh-signing-keys-for-authenticated-user",
      "method": "GET",
      "path": "/user/ssh_signing_keys",
      "tags": [
        "users"
      ],
      "summary": "List SSH signing keys for the authenticated user",
      "description": "Lists the SSH signing keys for the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint."
    },
    {
      "operationId": "users/create-ssh-signing-key-for-authenticated-user",
      "method": "POST",
      "path": "/user/ssh_signing_keys",
      "tags": [
        "users"
      ],
      "summary": "Create a SSH signing key for the authenticated user",
      "description": "Creates an SSH signing key for the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint."
    },
    {
      "operationId": "users/get-ssh-signing-key-for-authenticated-user",
      "method": "GET",
      "path": "/user/ssh_signing_keys/{ssh_signing_key_id}",
      "tags": [
        "users"
      ],
      "summary": "Get an SSH signing key for the authenticated user",
      "description": "Gets extended details for an SSH signing key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint."
    },
    {
      "operationId": "users/delete-ssh-signing-key-for-authenticated-user",
      "method": "DELETE",
      "path": "/user/ssh_signing_keys/{ssh_signing_key_id}",
      "tags": [
        "users"
      ],
      "summary": "Delete an SSH signing key for the authenticated user",
      "description": "Deletes an SSH signing key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint."
    },
    {
      "operationId": "users/get-by-id",
      "method": "GET",
      "path": "/user/{account_id}",
      "tags": [
        "users"
      ],
      "summary": "Get a user using their ID",
      "description": "Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time.\n\nIf you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails)."
    },
    {
      "operationId": "users/list",
      "method": "GET",
      "path": "/users",
      "tags": [
        "users"
      ],
      "summary": "List users",
      "description": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users."
    },
    {
      "operationId": "users/get-by-username",
      "method": "GET",
      "path": "/users/{username}",
      "tags": [
        "users"
      ],
      "summary": "Get a user",
      "description": "Provides publicly available information about someone with a GitHub account.\n\nIf you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails)."
    },
    {
      "operationId": "users/list-attestations-bulk",
      "method": "POST",
      "path": "/users/{username}/attestations/bulk-list",
      "tags": [
        "users"
      ],
      "summary": "List attestations by bulk subject digests",
      "description": "List a collection of artifact attestations associated with any entry in a list of subject digests owned by a user.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    },
    {
      "operationId": "users/delete-attestations-bulk",
      "method": "POST",
      "path": "/users/{username}/attestations/delete-request",
      "tags": [
        "users"
      ],
      "summary": "Delete attestations in bulk",
      "description": "Delete artifact attestations in bulk by either subject digests or unique ID."
    },
    {
      "operationId": "users/delete-attestations-by-subject-digest",
      "method": "DELETE",
      "path": "/users/{username}/attestations/digest/{subject_digest}",
      "tags": [
        "users"
      ],
      "summary": "Delete attestations by subject digest",
      "description": "Delete an artifact attestation by subject digest."
    },
    {
      "operationId": "users/delete-attestations-by-id",
      "method": "DELETE",
      "path": "/users/{username}/attestations/{attestation_id}",
      "tags": [
        "users"
      ],
      "summary": "Delete attestations by ID",
      "description": "Delete an artifact attestation by unique ID that is associated with a repository owned by a user."
    },
    {
      "operationId": "users/list-attestations",
      "method": "GET",
      "path": "/users/{username}/attestations/{subject_digest}",
      "tags": [
        "users"
      ],
      "summary": "List attestations",
      "description": "List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    },
    {
      "operationId": "users/list-followers-for-user",
      "method": "GET",
      "path": "/users/{username}/followers",
      "tags": [
        "users"
      ],
      "summary": "List followers of a user",
      "description": "Lists the people following the specified user."
    },
    {
      "operationId": "users/list-following-for-user",
      "method": "GET",
      "path": "/users/{username}/following",
      "tags": [
        "users"
      ],
      "summary": "List the people a user follows",
      "description": "Lists the people who the specified user follows."
    },
    {
      "operationId": "users/check-following-for-user",
      "method": "GET",
      "path": "/users/{username}/following/{target_user}",
      "tags": [
        "users"
      ],
      "summary": "Check if a user follows another user",
      "description": ""
    },
    {
      "operationId": "users/list-gpg-keys-for-user",
      "method": "GET",
      "path": "/users/{username}/gpg_keys",
      "tags": [
        "users"
      ],
      "summary": "List GPG keys for a user",
      "description": "Lists the GPG keys for a user. This information is accessible by anyone."
    },
    {
      "operationId": "users/get-context-for-user",
      "method": "GET",
      "path": "/users/{username}/hovercard",
      "tags": [
        "users"
      ],
      "summary": "Get contextual information for a user",
      "description": "Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\n  The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint."
    },
    {
      "operationId": "users/list-public-keys-for-user",
      "method": "GET",
      "path": "/users/{username}/keys",
      "tags": [
        "users"
      ],
      "summary": "List public keys for a user",
      "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone."
    },
    {
      "operationId": "users/list-social-accounts-for-user",
      "method": "GET",
      "path": "/users/{username}/social_accounts",
      "tags": [
        "users"
      ],
      "summary": "List social accounts for a user",
      "description": "Lists social media accounts for a user. This endpoint is accessible by anyone."
    },
    {
      "operationId": "users/list-ssh-signing-keys-for-user",
      "method": "GET",
      "path": "/users/{username}/ssh_signing_keys",
      "tags": [
        "users"
      ],
      "summary": "List SSH signing keys for a user",
      "description": "Lists the SSH signing keys for a user. This operation is accessible by anyone."
    }
  ]
}