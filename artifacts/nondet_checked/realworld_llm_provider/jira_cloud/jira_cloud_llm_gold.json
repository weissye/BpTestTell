{
  "gold": [
    {
      "path": "/rest/api/3/announcementBanner",
      "method": "GET",
      "operationId": "getBanner",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current announcement banner settings for the Jira Cloud instance."
    },
    {
      "path": "/rest/api/3/announcementBanner",
      "method": "PUT",
      "operationId": "setBanner",
      "summary": "",
      "user": "admin456",
      "ideal": "Update the announcement banner settings with new content and visibility options."
    },
    {
      "path": "/rest/api/3/data-policy",
      "method": "GET",
      "operationId": "getPolicy",
      "summary": "",
      "user": "As a project manager, I want to retrieve the data policy for my project to ensure compliance with data protection regulations.",
      "ideal": "The response should include the current data policy details, including the policy ID, description, and any relevant compliance information."
    },
    {
      "path": "/rest/api/3/data-policy/project",
      "method": "GET",
      "operationId": "getPolicies",
      "summary": "",
      "user": "As a compliance officer, I need to access all data policies associated with various projects to audit and verify adherence to legal standards.",
      "ideal": "The response should return a list of all data policies linked to projects, including project IDs, policy descriptions, and any active status indicators."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/field",
      "method": "PUT",
      "operationId": "AppIssueFieldValueUpdateResource.updateIssueFields_put",
      "summary": "",
      "user": "User A is an admin who wants to update the custom fields for a specific issue in Jira. They have identified the issue key and the new values for the fields that need to be updated. They prepare the request to ensure that the field IDs and values are correctly formatted.",
      "ideal": "The request successfully updates the specified issue fields, returning a 200 OK response with the updated issue details."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/properties/{entityType}",
      "method": "PUT",
      "operationId": "MigrationResource.updateEntityPropertiesValue_put",
      "summary": "",
      "user": "User B is a project manager who needs to update the properties of a specific entity type in the migration process. They gather the necessary entity type and the new properties to be set, ensuring that the data adheres to the expected schema.",
      "ideal": "The request updates the properties for the specified entity type, returning a 204 No Content response indicating success."
    },
    {
      "path": "/rest/atlassian-connect/1/migration/workflow/rule/search",
      "method": "POST",
      "operationId": "MigrationResource.workflowRuleSearch_post",
      "summary": "",
      "user": "User C is a developer tasked with searching for specific workflow rules that need to be migrated. They compile the search criteria based on the existing rules and prepare the request body with the necessary filters.",
      "ideal": "The request successfully retrieves the relevant workflow rules, returning a 200 OK response with a list of matching rules."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties",
      "method": "GET",
      "operationId": "AddonPropertiesResource.getAddonProperties_get",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve all properties for the specified addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "DELETE",
      "operationId": "AddonPropertiesResource.deleteAddonProperty_delete",
      "summary": "",
      "user": "User123",
      "ideal": "Delete a specific property from the addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "GET",
      "operationId": "AddonPropertiesResource.getAddonProperty_get",
      "summary": "",
      "user": "User123",
      "ideal": "Fetch a specific property for the addon."
    },
    {
      "path": "/rest/atlassian-connect/1/addons/my-addon/properties/my-property",
      "method": "PUT",
      "operationId": "AddonPropertiesResource.putAddonProperty_put",
      "summary": "",
      "user": "User123",
      "ideal": "Update or create a specific property for the addon."
    },
    {
      "path": "/rest/forge/1/app/properties",
      "method": "GET",
      "operationId": "getForgeAppPropertyKeys",
      "summary": "",
      "user": "User456",
      "ideal": "Retrieve all property keys for the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "DELETE",
      "operationId": "deleteForgeAppProperty",
      "summary": "",
      "user": "User456",
      "ideal": "Delete a specific property from the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "GET",
      "operationId": "getForgeAppProperty",
      "summary": "",
      "user": "User456",
      "ideal": "Fetch a specific property for the Forge app."
    },
    {
      "path": "/rest/forge/1/app/properties/my-property",
      "method": "PUT",
      "operationId": "putForgeAppProperty",
      "summary": "",
      "user": "User456",
      "ideal": "Update or create a specific property for the Forge app."
    },
    {
      "path": "/rest/api/3/applicationrole",
      "method": "GET",
      "operationId": "getAllApplicationRoles",
      "summary": "",
      "user": "As a project manager, I want to retrieve all application roles in Jira to understand the permissions and access levels available for different users in my projects.",
      "ideal": "The response should include a list of all application roles with their respective keys and descriptions, allowing me to identify which roles I can assign to users."
    },
    {
      "path": "/rest/api/3/applicationrole/{key}",
      "method": "GET",
      "operationId": "getApplicationRole",
      "summary": "",
      "user": "As a system administrator, I need to get detailed information about a specific application role by its key to ensure that the permissions are correctly configured for my team.",
      "ideal": "The response should provide comprehensive details about the specified application role, including its name, description, and associated permissions, so I can verify its settings."
    },
    {
      "path": "/rest/api/3/auditing/record",
      "method": "GET",
      "operationId": "getAuditRecords",
      "summary": "",
      "user": "user@example.com",
      "ideal": "Retrieve a list of audit records for the Jira Cloud platform, including details such as the action performed, the user who performed it, and the timestamp of the action."
    },
    {
      "path": "/rest/api/3/avatar/system",
      "method": "GET",
      "operationId": "getAllSystemAvatars",
      "summary": "",
      "user": "As a user, I want to retrieve all available system avatars so that I can choose one for my profile.",
      "ideal": "The response should return a list of all system avatars with their respective IDs and URLs."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345",
      "method": "GET",
      "operationId": "getAvatars",
      "summary": "",
      "user": "As a user, I want to fetch all avatars associated with my user ID so that I can manage them.",
      "ideal": "The response should include all avatars linked to the specified user ID, along with their types and URLs."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345",
      "method": "POST",
      "operationId": "storeAvatar",
      "summary": "",
      "user": "As a user, I want to upload a new avatar for my profile so that I can personalize my account.",
      "ideal": "The response should confirm the successful upload of the avatar and return the new avatar ID."
    },
    {
      "path": "/rest/api/3/universal_avatar/type/user/owner/12345/avatar/67890",
      "method": "DELETE",
      "operationId": "deleteAvatar",
      "summary": "",
      "user": "As a user, I want to delete an existing avatar from my profile to remove unwanted images.",
      "ideal": "The response should confirm the successful deletion of the avatar."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user",
      "method": "GET",
      "operationId": "getAvatarImageByType",
      "summary": "",
      "user": "As a user, I want to view all available user avatars so that I can select one for my profile.",
      "ideal": "The response should return a list of user avatars with their images and IDs."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user/avatar/67890",
      "method": "GET",
      "operationId": "getAvatarImageByID",
      "summary": "",
      "user": "As a user, I want to view a specific avatar image by its ID to ensure it is the one I want to use.",
      "ideal": "The response should return the image of the avatar corresponding to the provided ID."
    },
    {
      "path": "/rest/api/3/universal_avatar/view/type/user/owner/12345",
      "method": "GET",
      "operationId": "getAvatarImageByOwner",
      "summary": "",
      "user": "As a user, I want to view my current avatar image to confirm it is set correctly.",
      "ideal": "The response should return the avatar image currently associated with my user ID."
    },
    {
      "path": "/rest/api/3/classification-levels",
      "method": "GET",
      "operationId": "getAllUserDataClassificationLevels",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all user data classification levels available in the Jira Cloud platform."
    },
    {
      "path": "/rest/api/3/dashboard",
      "method": "GET",
      "operationId": "getAllDashboards",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all dashboards available to the user."
    },
    {
      "path": "/rest/api/3/dashboard",
      "method": "POST",
      "operationId": "createDashboard",
      "summary": "",
      "user": "user456",
      "ideal": "Create a new dashboard with specified parameters."
    },
    {
      "path": "/rest/api/3/dashboard/bulk/edit",
      "method": "PUT",
      "operationId": "bulkEditDashboards",
      "summary": "",
      "user": "user789",
      "ideal": "Bulk edit multiple dashboards in one request."
    },
    {
      "path": "/rest/api/3/dashboard/gadgets",
      "method": "GET",
      "operationId": "getAllAvailableDashboardGadgets",
      "summary": "",
      "user": "user101",
      "ideal": "Fetch all available gadgets for dashboards."
    },
    {
      "path": "/rest/api/3/dashboard/search",
      "method": "GET",
      "operationId": "getDashboardsPaginated",
      "summary": "",
      "user": "user202",
      "ideal": "Retrieve a paginated list of dashboards."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "GET",
      "operationId": "getAllGadgets",
      "summary": "",
      "user": "user303",
      "ideal": "Get all gadgets associated with a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "POST",
      "operationId": "addGadget",
      "summary": "",
      "user": "user404",
      "ideal": "Add a new gadget to the specified dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "DELETE",
      "operationId": "removeGadget",
      "summary": "",
      "user": "user505",
      "ideal": "Remove a gadget from the specified dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "PUT",
      "operationId": "updateGadget",
      "summary": "",
      "user": "user606",
      "ideal": "Update the configuration of a specific gadget."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties",
      "method": "GET",
      "operationId": "getDashboardItemPropertyKeys",
      "summary": "",
      "user": "user707",
      "ideal": "Retrieve property keys for a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteDashboardItemProperty",
      "summary": "",
      "user": "user808",
      "ideal": "Delete a specific property from a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getDashboardItemProperty",
      "summary": "",
      "user": "user909",
      "ideal": "Get the value of a specific property for a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setDashboardItemProperty",
      "summary": "",
      "user": "user1010",
      "ideal": "Set a specific property for a dashboard item."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "DELETE",
      "operationId": "deleteDashboard",
      "summary": "",
      "user": "user1111",
      "ideal": "Delete a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "GET",
      "operationId": "getDashboard",
      "summary": "",
      "user": "user1212",
      "ideal": "Retrieve details of a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{id}",
      "method": "PUT",
      "operationId": "updateDashboard",
      "summary": "",
      "user": "user1313",
      "ideal": "Update the details of a specific dashboard."
    },
    {
      "path": "/rest/api/3/dashboard/{id}/copy",
      "method": "POST",
      "operationId": "copyDashboard",
      "summary": "",
      "user": "user1414",
      "ideal": "Create a copy of a specific dashboard."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "GET",
      "operationId": "DynamicModulesResource.getModules_get",
      "summary": "",
      "user": "As a developer, I want to retrieve the list of dynamic modules registered in my Jira Cloud application so that I can manage their configurations.",
      "ideal": "The response should include a JSON array of dynamic modules with their respective details such as id, name, and type."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "POST",
      "operationId": "DynamicModulesResource.registerModules_post",
      "summary": "",
      "user": "As a plugin developer, I need to register new dynamic modules to enhance the functionality of my Jira application.",
      "ideal": "The request should accept a JSON payload with module details and return a success message with the module id upon successful registration."
    },
    {
      "path": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "DELETE",
      "operationId": "DynamicModulesResource.removeModules_delete",
      "summary": "",
      "user": "As an administrator, I want to remove a specific dynamic module from my Jira application to declutter the interface.",
      "ideal": "The request should specify the module id to be deleted and return a confirmation message indicating successful removal."
    },
    {
      "path": "/rest/api/3/filter/defaultShareScope",
      "method": "GET",
      "operationId": "getDefaultShareScope",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the default share scope for filters in Jira."
    },
    {
      "path": "/rest/api/3/filter/defaultShareScope",
      "method": "PUT",
      "operationId": "setDefaultShareScope",
      "summary": "",
      "user": "user456",
      "ideal": "Update the default share scope for filters to 'global'."
    },
    {
      "path": "/rest/api/3/filter/1001/permission",
      "method": "GET",
      "operationId": "getSharePermissions",
      "summary": "",
      "user": "user789",
      "ideal": "Get the share permissions for the filter with ID 1001."
    },
    {
      "path": "/rest/api/3/filter/1001/permission",
      "method": "POST",
      "operationId": "addSharePermission",
      "summary": "",
      "user": "user101",
      "ideal": "Add a share permission for the filter with ID 1001 for group 'developers'."
    },
    {
      "path": "/rest/api/3/filter/1001/permission/2001",
      "method": "DELETE",
      "operationId": "deleteSharePermission",
      "summary": "",
      "user": "user202",
      "ideal": "Remove the share permission with ID 2001 from the filter with ID 1001."
    },
    {
      "path": "/rest/api/3/filter/1001/permission/2001",
      "method": "GET",
      "operationId": "getSharePermission",
      "summary": "",
      "user": "user303",
      "ideal": "Retrieve the details of the share permission with ID 2001 for the filter with ID 1001."
    },
    {
      "path": "/rest/api/3/filter",
      "method": "POST",
      "operationId": "createFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Create a new filter with specified criteria."
    },
    {
      "path": "/rest/api/3/filter/favourite",
      "method": "GET",
      "operationId": "getFavouriteFilters",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of filters marked as favourite by the user."
    },
    {
      "path": "/rest/api/3/filter/my",
      "method": "GET",
      "operationId": "getMyFilters",
      "summary": "",
      "user": "user123",
      "ideal": "Get a list of filters created by the user."
    },
    {
      "path": "/rest/api/3/filter/search",
      "method": "GET",
      "operationId": "getFiltersPaginated",
      "summary": "",
      "user": "user123",
      "ideal": "Search for filters with pagination support."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "DELETE",
      "operationId": "deleteFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Delete a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "GET",
      "operationId": "getFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve details of a specific filter by its ID."
    },
    {
      "path": "/rest/api/3/filter/{id}",
      "method": "PUT",
      "operationId": "updateFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Update an existing filter with new criteria."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "DELETE",
      "operationId": "resetColumns",
      "summary": "",
      "user": "user123",
      "ideal": "Reset the columns of a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "GET",
      "operationId": "getColumns",
      "summary": "",
      "user": "user123",
      "ideal": "Get the columns of a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/columns",
      "method": "PUT",
      "operationId": "setColumns",
      "summary": "",
      "user": "user123",
      "ideal": "Set the columns for a specific filter."
    },
    {
      "path": "/rest/api/3/filter/{id}/favourite",
      "method": "DELETE",
      "operationId": "deleteFavouriteForFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Remove a filter from the user's favourites."
    },
    {
      "path": "/rest/api/3/filter/{id}/favourite",
      "method": "PUT",
      "operationId": "setFavouriteForFilter",
      "summary": "",
      "user": "user123",
      "ideal": "Add a filter to the user's favourites."
    },
    {
      "path": "/rest/api/3/filter/{id}/owner",
      "method": "PUT",
      "operationId": "changeFilterOwner",
      "summary": "",
      "user": "user123",
      "ideal": "Change the owner of a specific filter."
    },
    {
      "path": "/rest/api/3/groupuserpicker",
      "method": "GET",
      "operationId": "findUsersAndGroups",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve a list of users and groups based on the specified query."
    },
    {
      "path": "/rest/api/3/group",
      "method": "GET",
      "operationId": "getGroup",
      "summary": "",
      "user": "Retrieve the details of a specific group by its ID.",
      "ideal": "Successful retrieval of group details."
    },
    {
      "path": "/rest/api/3/group",
      "method": "POST",
      "operationId": "createGroup",
      "summary": "",
      "user": "Create a new group with the specified name and description.",
      "ideal": "Group is successfully created and returned with its ID."
    },
    {
      "path": "/rest/api/3/group",
      "method": "DELETE",
      "operationId": "removeGroup",
      "summary": "",
      "user": "Remove an existing group by its ID.",
      "ideal": "Group is successfully deleted."
    },
    {
      "path": "/rest/api/3/group/bulk",
      "method": "GET",
      "operationId": "bulkGetGroups",
      "summary": "",
      "user": "Retrieve details of multiple groups in a single request.",
      "ideal": "Successful retrieval of all specified groups."
    },
    {
      "path": "/rest/api/3/group/member",
      "method": "GET",
      "operationId": "getUsersFromGroup",
      "summary": "",
      "user": "Get a list of users belonging to a specific group.",
      "ideal": "Successful retrieval of users in the group."
    },
    {
      "path": "/rest/api/3/group/user",
      "method": "POST",
      "operationId": "addUserToGroup",
      "summary": "",
      "user": "Add a user to a specified group by user ID.",
      "ideal": "User is successfully added to the group."
    },
    {
      "path": "/rest/api/3/group/user",
      "method": "DELETE",
      "operationId": "removeUserFromGroup",
      "summary": "",
      "user": "Remove a user from a specified group by user ID.",
      "ideal": "User is successfully removed from the group."
    },
    {
      "path": "/rest/api/3/groups/picker",
      "method": "GET",
      "operationId": "findGroups",
      "summary": "",
      "user": "Search for groups based on a query string.",
      "ideal": "Successful retrieval of groups matching the query."
    },
    {
      "path": "/rest/api/3/attachment/content/12345",
      "method": "GET",
      "operationId": "getAttachmentContent",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the content of the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/meta",
      "method": "GET",
      "operationId": "getAttachmentMeta",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch metadata for all attachments in the system."
    },
    {
      "path": "/rest/api/3/attachment/thumbnail/12345",
      "method": "GET",
      "operationId": "getAttachmentThumbnail",
      "summary": "",
      "user": "user789",
      "ideal": "Get the thumbnail image for the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/12345",
      "method": "DELETE",
      "operationId": "removeAttachment",
      "summary": "",
      "user": "user101",
      "ideal": "Delete the attachment with ID 12345 from the issue."
    },
    {
      "path": "/rest/api/3/attachment/12345",
      "method": "GET",
      "operationId": "getAttachment",
      "summary": "",
      "user": "user202",
      "ideal": "Retrieve details of the attachment with ID 12345."
    },
    {
      "path": "/rest/api/3/attachment/12345/expand/human",
      "method": "GET",
      "operationId": "expandAttachmentForHumans",
      "summary": "",
      "user": "user303",
      "ideal": "Expand the attachment with ID 12345 for human-readable format."
    },
    {
      "path": "/rest/api/3/attachment/12345/expand/raw",
      "method": "GET",
      "operationId": "expandAttachmentForMachines",
      "summary": "",
      "user": "user404",
      "ideal": "Expand the attachment with ID 12345 for machine-readable format."
    },
    {
      "path": "/rest/api/3/issue/ISSUE-123/attachments",
      "method": "POST",
      "operationId": "addAttachment",
      "summary": "",
      "user": "user505",
      "ideal": "Add a new attachment to the issue with key ISSUE-123."
    },
    {
      "path": "/rest/api/3/bulk/issues/delete",
      "method": "POST",
      "operationId": "submitBulkDelete",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully deletes multiple issues in bulk."
    },
    {
      "path": "/rest/api/3/bulk/issues/fields",
      "method": "GET",
      "operationId": "getBulkEditableFields",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieves a list of fields that can be edited in bulk."
    },
    {
      "path": "/rest/api/3/bulk/issues/fields",
      "method": "POST",
      "operationId": "submitBulkEdit",
      "summary": "",
      "user": "user789",
      "ideal": "Applies bulk edits to specified issues."
    },
    {
      "path": "/rest/api/3/bulk/issues/move",
      "method": "POST",
      "operationId": "submitBulkMove",
      "summary": "",
      "user": "user101",
      "ideal": "Moves multiple issues to a different project or issue type."
    },
    {
      "path": "/rest/api/3/bulk/issues/transition",
      "method": "GET",
      "operationId": "getAvailableTransitions",
      "summary": "",
      "user": "user202",
      "ideal": "Fetches available transitions for bulk issues."
    },
    {
      "path": "/rest/api/3/bulk/issues/transition",
      "method": "POST",
      "operationId": "submitBulkTransition",
      "summary": "",
      "user": "user303",
      "ideal": "Transitions multiple issues to a new status."
    },
    {
      "path": "/rest/api/3/bulk/issues/unwatch",
      "method": "POST",
      "operationId": "submitBulkUnwatch",
      "summary": "",
      "user": "user404",
      "ideal": "Unwatches multiple issues in bulk."
    },
    {
      "path": "/rest/api/3/bulk/issues/watch",
      "method": "POST",
      "operationId": "submitBulkWatch",
      "summary": "",
      "user": "user505",
      "ideal": "Watches multiple issues in bulk."
    },
    {
      "path": "/rest/api/3/bulk/queue/{taskId}",
      "method": "GET",
      "operationId": "getBulkOperationProgress",
      "summary": "",
      "user": "user606",
      "ideal": "Checks the progress of a bulk operation by task ID."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties",
      "method": "GET",
      "operationId": "getCommentPropertyKeys",
      "summary": "",
      "user": "User wants to retrieve all property keys associated with a specific comment to understand its metadata and custom attributes.",
      "ideal": "Returns a list of property keys for the specified comment."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getCommentProperty",
      "summary": "",
      "user": "User needs to fetch a specific property value for a comment to check its custom settings or configurations.",
      "ideal": "Returns the value of the specified property key for the given comment."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteCommentProperty",
      "summary": "",
      "user": "User wants to remove a specific property from a comment to clean up unnecessary metadata.",
      "ideal": "Successfully deletes the specified property from the comment."
    },
    {
      "path": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setCommentProperty",
      "summary": "",
      "user": "User intends to update or add a property to a comment to enhance its information or context.",
      "ideal": "Successfully sets or updates the specified property for the comment."
    },
    {
      "path": "/rest/api/3/comment/list",
      "method": "POST",
      "operationId": "getCommentsByIds",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve comments by their IDs."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment",
      "method": "GET",
      "operationId": "getComments",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch all comments associated with the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment",
      "method": "POST",
      "operationId": "addComment",
      "summary": "",
      "user": "user789",
      "ideal": "Add a new comment to the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "DELETE",
      "operationId": "deleteComment",
      "summary": "",
      "user": "user321",
      "ideal": "Delete the comment with ID 10001 from the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "GET",
      "operationId": "getComment",
      "summary": "",
      "user": "user654",
      "ideal": "Retrieve the details of comment ID 10001 from the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-1/comment/10001",
      "method": "PUT",
      "operationId": "updateComment",
      "summary": "",
      "user": "user987",
      "ideal": "Update the content of comment ID 10001 on the issue PROJECT-1."
    },
    {
      "path": "/rest/api/3/field/association",
      "method": "DELETE",
      "operationId": "removeAssociations",
      "summary": "",
      "user": "User with admin privileges who wants to remove associations between custom fields and issue types in Jira to streamline the issue creation process.",
      "ideal": "Successfully removes the specified associations between the custom field and the issue types."
    },
    {
      "path": "/rest/api/3/field/association",
      "method": "PUT",
      "operationId": "createAssociations",
      "summary": "",
      "user": "Project manager looking to associate a new custom field with specific issue types in Jira to ensure that relevant data is captured during issue creation.",
      "ideal": "Successfully creates associations between the custom field and the specified issue types."
    },
    {
      "path": "/rest/api/3/app/field/context/configuration/list",
      "method": "POST",
      "operationId": "getCustomFieldsConfigurations",
      "summary": "",
      "user": "As a project manager, I want to retrieve a list of custom field configurations for my Jira project so that I can ensure all necessary fields are properly set up.",
      "ideal": "The API should return a JSON array of custom field configurations, including field IDs, names, and associated contexts."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "GET",
      "operationId": "getCustomFieldConfiguration",
      "summary": "",
      "user": "As a developer, I need to access the configuration details of a specific custom field using its ID or key to understand its settings and usage.",
      "ideal": "The API should return a JSON object containing the configuration details of the specified custom field, including its context and configuration settings."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "PUT",
      "operationId": "updateCustomFieldConfiguration",
      "summary": "",
      "user": "As a system administrator, I want to update the configuration of a custom field to reflect new requirements for our project workflows.",
      "ideal": "The API should accept a JSON object with the updated configuration details and return a success message upon successful update."
    },
    {
      "path": "/rest/api/3/field/10000/context",
      "method": "GET",
      "operationId": "getContextsForField",
      "summary": "",
      "user": "User A requests to retrieve all contexts for a custom field with ID 10000.",
      "ideal": "Returns a list of contexts associated with the specified field."
    },
    {
      "path": "/rest/api/3/field/10000/context",
      "method": "POST",
      "operationId": "createCustomFieldContext",
      "summary": "",
      "user": "User B wants to create a new context for the custom field with ID 10000.",
      "ideal": "Creates a new context for the specified field and returns the created context details."
    },
    {
      "path": "/rest/api/3/field/10000/context/defaultValue",
      "method": "GET",
      "operationId": "getDefaultValues",
      "summary": "",
      "user": "User C is looking to get the default values for the custom field with ID 10000.",
      "ideal": "Returns the default values set for the specified field."
    },
    {
      "path": "/rest/api/3/field/10000/context/defaultValue",
      "method": "PUT",
      "operationId": "setDefaultValues",
      "summary": "",
      "user": "User D wants to update the default values for the custom field with ID 10000.",
      "ideal": "Updates the default values for the specified field and confirms the update."
    },
    {
      "path": "/rest/api/3/field/10000/context/issuetypemapping",
      "method": "GET",
      "operationId": "getIssueTypeMappingsForContexts",
      "summary": "",
      "user": "User E requests to see the issue type mappings for contexts of field ID 10000.",
      "ideal": "Returns the issue type mappings associated with the specified field contexts."
    },
    {
      "path": "/rest/api/3/field/10000/context/mapping",
      "method": "POST",
      "operationId": "getCustomFieldContextsForProjectsAndIssueTypes",
      "summary": "",
      "user": "User F is trying to find custom field contexts for specific projects and issue types.",
      "ideal": "Returns the contexts for the specified projects and issue types."
    },
    {
      "path": "/rest/api/3/field/10000/context/projectmapping",
      "method": "GET",
      "operationId": "getProjectContextMapping",
      "summary": "",
      "user": "User G wants to retrieve the project mapping for the custom field with ID 10000.",
      "ideal": "Returns the project mapping details for the specified field."
    },
    {
      "path": "/rest/api/3/field/10000/context/1",
      "method": "DELETE",
      "operationId": "deleteCustomFieldContext",
      "summary": "",
      "user": "User H intends to delete the context with ID 1 for the custom field with ID 10000.",
      "ideal": "Deletes the specified context and confirms the deletion."
    },
    {
      "path": "/rest/api/3/field/10000/context/1",
      "method": "PUT",
      "operationId": "updateCustomFieldContext",
      "summary": "",
      "user": "User I wants to update the context with ID 1 for the custom field with ID 10000.",
      "ideal": "Updates the specified context and returns the updated context details."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/issuetype",
      "method": "PUT",
      "operationId": "addIssueTypesToContext",
      "summary": "",
      "user": "User J is adding issue types to the context with ID 1 for field ID 10000.",
      "ideal": "Adds the specified issue types to the context and confirms the addition."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/issuetype/remove",
      "method": "POST",
      "operationId": "removeIssueTypesFromContext",
      "summary": "",
      "user": "User K wants to remove certain issue types from the context with ID 1 for field ID 10000.",
      "ideal": "Removes the specified issue types from the context and confirms the removal."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/project",
      "method": "PUT",
      "operationId": "assignProjectsToCustomFieldContext",
      "summary": "",
      "user": "User L is assigning projects to the context with ID 1 for field ID 10000.",
      "ideal": "Assigns the specified projects to the context and confirms the assignment."
    },
    {
      "path": "/rest/api/3/field/10000/context/1/project/remove",
      "method": "POST",
      "operationId": "removeCustomFieldContextFromProjects",
      "summary": "",
      "user": "User M wants to remove the context with ID 1 from certain projects for field ID 10000.",
      "ideal": "Removes the specified context from the projects and confirms the removal."
    },
    {
      "path": "/rest/api/3/customFieldOption/12345",
      "method": "GET",
      "operationId": "getCustomFieldOption",
      "summary": "",
      "user": "User requests details for a specific custom field option by its ID.",
      "ideal": "Returns the details of the custom field option with ID 12345."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option",
      "method": "GET",
      "operationId": "getOptionsForContext",
      "summary": "",
      "user": "User wants to retrieve all options for a specific field context.",
      "ideal": "Returns a list of options available for the field with ID 10000 in context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option",
      "method": "POST",
      "operationId": "createCustomFieldOption",
      "summary": "",
      "user": "User submits a new option for a custom field in a specific context.",
      "ideal": "Creates a new custom field option in context 20000 for field 10000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option",
      "method": "PUT",
      "operationId": "updateCustomFieldOption",
      "summary": "",
      "user": "User updates an existing custom field option in a specific context.",
      "ideal": "Updates the custom field option in context 20000 for field 10000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option/move",
      "method": "PUT",
      "operationId": "reorderCustomFieldOptions",
      "summary": "",
      "user": "User wants to reorder custom field options in a specific context.",
      "ideal": "Reorders the custom field options for field 10000 in context 20000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option/12345",
      "method": "DELETE",
      "operationId": "deleteCustomFieldOption",
      "summary": "",
      "user": "User requests to delete a specific custom field option.",
      "ideal": "Deletes the custom field option with ID 12345 from context 20000 for field 10000."
    },
    {
      "path": "/rest/api/3/field/10000/context/20000/option/12345/issue",
      "method": "DELETE",
      "operationId": "replaceCustomFieldOption",
      "summary": "",
      "user": "User wants to replace a custom field option associated with issues.",
      "ideal": "Replaces the custom field option with ID 12345 in context 20000 for field 10000."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option",
      "method": "GET",
      "operationId": "getAllIssueFieldOptions",
      "summary": "",
      "user": "User A wants to retrieve all options for a custom field to understand what values can be assigned to issues.",
      "ideal": "Returns a list of all options for the specified custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option",
      "method": "POST",
      "operationId": "createIssueFieldOption",
      "summary": "",
      "user": "User B needs to add a new option to a custom field for better categorization of issues.",
      "ideal": "Creates a new option for the specified custom field and returns the created option details."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/suggestions/edit",
      "method": "GET",
      "operationId": "getSelectableIssueFieldOptions",
      "summary": "",
      "user": "User C is looking for options that can be selected when editing an issue to ensure they are using valid values.",
      "ideal": "Returns a list of selectable options for the specified custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/suggestions/search",
      "method": "GET",
      "operationId": "getVisibleIssueFieldOptions",
      "summary": "",
      "user": "User D wants to search for specific options in a custom field to quickly find the right value for an issue.",
      "ideal": "Returns a list of visible options based on the search criteria for the specified custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "DELETE",
      "operationId": "deleteIssueFieldOption",
      "summary": "",
      "user": "User E needs to remove an outdated option from a custom field to prevent confusion among users.",
      "ideal": "Deletes the specified option from the custom field and confirms the deletion."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "GET",
      "operationId": "getIssueFieldOption",
      "summary": "",
      "user": "User F wants to view the details of a specific option in a custom field to verify its attributes.",
      "ideal": "Returns the details of the specified option for the custom field."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345",
      "method": "PUT",
      "operationId": "updateIssueFieldOption",
      "summary": "",
      "user": "User G needs to update the name of an existing option in a custom field to reflect recent changes.",
      "ideal": "Updates the specified option for the custom field and returns the updated option details."
    },
    {
      "path": "/rest/api/3/field/customfield_10001/option/12345/issue",
      "method": "DELETE",
      "operationId": "replaceIssueFieldOption",
      "summary": "",
      "user": "User H wants to replace an option in a custom field with a new one to maintain data integrity.",
      "ideal": "Replaces the specified option in the custom field with a new option and confirms the replacement."
    },
    {
      "path": "/rest/api/3/app/field/value",
      "method": "POST",
      "operationId": "updateMultipleCustomFieldValues",
      "summary": "",
      "user": "user123",
      "ideal": "Update multiple custom field values for a specific issue in Jira."
    },
    {
      "path": "/rest/api/3/app/field/{fieldIdOrKey}/value",
      "method": "PUT",
      "operationId": "updateCustomFieldValue",
      "summary": "",
      "user": "user456",
      "ideal": "Update a specific custom field value for an issue using its field ID or key."
    },
    {
      "path": "/rest/api/3/fieldconfiguration",
      "method": "GET",
      "operationId": "getAllFieldConfigurations",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve all field configurations available in the Jira instance."
    },
    {
      "path": "/rest/api/3/fieldconfiguration",
      "method": "POST",
      "operationId": "createFieldConfiguration",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new field configuration with specified settings."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}",
      "method": "DELETE",
      "operationId": "deleteFieldConfiguration",
      "summary": "",
      "user": "admin",
      "ideal": "Delete the field configuration identified by the specified ID."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}",
      "method": "PUT",
      "operationId": "updateFieldConfiguration",
      "summary": "",
      "user": "admin",
      "ideal": "Update the field configuration with new settings for the specified ID."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "GET",
      "operationId": "getFieldConfigurationItems",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve all fields associated with the specified field configuration."
    },
    {
      "path": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "PUT",
      "operationId": "updateFieldConfigurationItems",
      "summary": "",
      "user": "admin",
      "ideal": "Update the fields associated with the specified field configuration."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme",
      "method": "GET",
      "operationId": "getAllFieldConfigurationSchemes",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve all field configuration schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme",
      "method": "POST",
      "operationId": "createFieldConfigurationScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new field configuration scheme with specified settings."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/mapping",
      "method": "GET",
      "operationId": "getFieldConfigurationSchemeMappings",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve mappings of field configuration schemes to their respective field configurations."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "GET",
      "operationId": "getFieldConfigurationSchemeProjectMapping",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve the project mapping for field configuration schemes."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "PUT",
      "operationId": "assignFieldConfigurationSchemeToProject",
      "summary": "",
      "user": "admin",
      "ideal": "Assign a field configuration scheme to a specific project."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "DELETE",
      "operationId": "deleteFieldConfigurationScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Delete the field configuration scheme identified by the specified ID."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "PUT",
      "operationId": "updateFieldConfigurationScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Update the field configuration scheme with new settings for the specified ID."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}/mapping",
      "method": "PUT",
      "operationId": "setFieldConfigurationSchemeMapping",
      "summary": "",
      "user": "admin",
      "ideal": "Set the mapping for the specified field configuration scheme."
    },
    {
      "path": "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete",
      "method": "POST",
      "operationId": "removeIssueTypesFromGlobalFieldConfigurationScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Remove specified issue types from the global field configuration scheme."
    },
    {
      "path": "/rest/api/3/field",
      "method": "GET",
      "operationId": "getFields",
      "summary": "",
      "user": "As a project manager, I want to retrieve all custom fields available in Jira so that I can understand what data can be captured.",
      "ideal": "Returns a list of all custom fields with their details."
    },
    {
      "path": "/rest/api/3/field",
      "method": "POST",
      "operationId": "createCustomField",
      "summary": "",
      "user": "As a product owner, I want to create a new custom field in Jira to capture specific requirements for my project.",
      "ideal": "Creates a new custom field and returns the details of the created field."
    },
    {
      "path": "/rest/api/3/field/search",
      "method": "GET",
      "operationId": "getFieldsPaginated",
      "summary": "",
      "user": "As a developer, I want to fetch custom fields in a paginated manner to efficiently handle large datasets.",
      "ideal": "Returns a paginated list of custom fields."
    },
    {
      "path": "/rest/api/3/field/search/trashed",
      "method": "GET",
      "operationId": "getTrashedFieldsPaginated",
      "summary": "",
      "user": "As an administrator, I want to view all trashed fields to decide if they should be restored or permanently deleted.",
      "ideal": "Returns a paginated list of trashed custom fields."
    },
    {
      "path": "/rest/api/3/field/{fieldId}",
      "method": "PUT",
      "operationId": "updateCustomField",
      "summary": "",
      "user": "As a team lead, I want to update the configuration of an existing custom field to better suit our project needs.",
      "ideal": "Updates the specified custom field and returns the updated field details."
    },
    {
      "path": "/rest/api/3/field/{fieldId}/contexts",
      "method": "GET",
      "operationId": "getContextsForFieldDeprecated",
      "summary": "",
      "user": "As a business analyst, I want to retrieve the contexts associated with a custom field to understand its usage across different projects.",
      "ideal": "Returns the contexts associated with the specified custom field."
    },
    {
      "path": "/rest/api/3/field/{id}",
      "method": "DELETE",
      "operationId": "deleteCustomField",
      "summary": "",
      "user": "As a project administrator, I want to delete a custom field that is no longer needed to keep our field list clean.",
      "ideal": "Deletes the specified custom field and confirms the deletion."
    },
    {
      "path": "/rest/api/3/field/{id}/restore",
      "method": "POST",
      "operationId": "restoreCustomField",
      "summary": "",
      "user": "As an administrator, I want to restore a previously deleted custom field to recover important data.",
      "ideal": "Restores the specified custom field and returns its details."
    },
    {
      "path": "/rest/api/3/field/{id}/trash",
      "method": "POST",
      "operationId": "trashCustomField",
      "summary": "",
      "user": "As a project manager, I want to move a custom field to trash instead of deleting it permanently, in case we need it later.",
      "ideal": "Moves the specified custom field to the trash and confirms the action."
    },
    {
      "path": "/rest/api/3/issueLinkType",
      "method": "GET",
      "operationId": "getIssueLinkTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available issue link types in Jira to understand how issues can be related to each other.",
      "ideal": "A successful response containing a list of issue link types with their IDs and names."
    },
    {
      "path": "/rest/api/3/issueLinkType",
      "method": "POST",
      "operationId": "createIssueLinkType",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue link type to represent a specific relationship between issues in our project.",
      "ideal": "A successful response confirming the creation of the new issue link type with its details."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "DELETE",
      "operationId": "deleteIssueLinkType",
      "summary": "",
      "user": "As a project administrator, I want to delete an existing issue link type that is no longer needed to keep our project clean.",
      "ideal": "A successful response indicating that the issue link type has been deleted."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "GET",
      "operationId": "getIssueLinkType",
      "summary": "",
      "user": "As a developer, I want to retrieve details of a specific issue link type to understand its purpose and usage in our workflows.",
      "ideal": "A successful response containing the details of the specified issue link type."
    },
    {
      "path": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "PUT",
      "operationId": "updateIssueLinkType",
      "summary": "",
      "user": "As a project manager, I want to update the name and description of an existing issue link type to better reflect its function.",
      "ideal": "A successful response confirming the update of the issue link type with the new details."
    },
    {
      "path": "/rest/api/3/issueLink",
      "method": "POST",
      "operationId": "linkIssues",
      "summary": "",
      "user": "As a project manager, I want to link related issues in Jira to track dependencies and progress effectively.",
      "ideal": "Successfully creates a link between two issues, returning the details of the newly created link."
    },
    {
      "path": "/rest/api/3/issueLink/{linkId}",
      "method": "DELETE",
      "operationId": "deleteIssueLink",
      "summary": "",
      "user": "As a developer, I need to remove a link between issues that is no longer relevant to keep the project organized.",
      "ideal": "Successfully deletes the specified issue link and confirms the deletion."
    },
    {
      "path": "/rest/api/3/issueLink/{linkId}",
      "method": "GET",
      "operationId": "getIssueLink",
      "summary": "",
      "user": "As a team lead, I want to retrieve the details of a specific issue link to understand its context and relationships.",
      "ideal": "Returns the details of the specified issue link, including the issues it connects and the link type."
    },
    {
      "path": "/rest/api/3/settings/columns",
      "method": "GET",
      "operationId": "getIssueNavigatorDefaultColumns",
      "summary": "",
      "user": "As a project manager, I want to retrieve the default columns set for the issue navigator so that I can ensure the visibility of important fields for my team.",
      "ideal": "The API should return a list of default columns currently configured for the issue navigator, including their IDs, names, and visibility status."
    },
    {
      "path": "/rest/api/3/settings/columns",
      "method": "PUT",
      "operationId": "setIssueNavigatorDefaultColumns",
      "summary": "",
      "user": "As a system administrator, I need to update the default columns in the issue navigator to reflect the new workflow requirements, ensuring my team has access to the most relevant information.",
      "ideal": "The API should accept a JSON payload with the new column configurations and return a success message indicating that the default columns have been updated successfully."
    },
    {
      "path": "/rest/api/3/notificationscheme",
      "method": "GET",
      "operationId": "getNotificationSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all notification schemes to understand how notifications are configured across different projects.",
      "ideal": "Returns a list of all notification schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/notificationscheme",
      "method": "POST",
      "operationId": "createNotificationScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new notification scheme to customize notifications for a new project.",
      "ideal": "Creates a new notification scheme and returns the details of the created scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/project",
      "method": "GET",
      "operationId": "getNotificationSchemeToProjectMappings",
      "summary": "",
      "user": "As a developer, I need to see which notification schemes are mapped to specific projects to ensure proper notification delivery.",
      "ideal": "Returns a mapping of notification schemes to projects."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}",
      "method": "GET",
      "operationId": "getNotificationScheme",
      "summary": "",
      "user": "As a team lead, I want to view the details of a specific notification scheme to review its configuration.",
      "ideal": "Returns the details of the specified notification scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}",
      "method": "PUT",
      "operationId": "updateNotificationScheme",
      "summary": "",
      "user": "As a project administrator, I need to update an existing notification scheme to include new notification types.",
      "ideal": "Updates the specified notification scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/notificationscheme/{id}/notification",
      "method": "PUT",
      "operationId": "addNotifications",
      "summary": "",
      "user": "As a project manager, I want to add notifications to an existing scheme to ensure team members are informed of important updates.",
      "ideal": "Adds notifications to the specified notification scheme and returns the updated scheme."
    },
    {
      "path": "/rest/api/3/notificationscheme/{notificationSchemeId}",
      "method": "DELETE",
      "operationId": "deleteNotificationScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to delete an obsolete notification scheme to clean up our configuration.",
      "ideal": "Deletes the specified notification scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}",
      "method": "DELETE",
      "operationId": "removeNotificationFromNotificationScheme",
      "summary": "",
      "user": "As a project lead, I want to remove a specific notification from a scheme to reduce unnecessary alerts.",
      "ideal": "Removes the specified notification from the notification scheme and confirms the removal."
    },
    {
      "path": "/rest/api/3/priority",
      "method": "GET",
      "operationId": "getPriorities",
      "summary": "",
      "user": "As a project manager, I want to retrieve all priority levels available in Jira to ensure that I can assign the correct priority to tasks.",
      "ideal": "Returns a list of all priority levels with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/priority",
      "method": "POST",
      "operationId": "createPriority",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new priority level called 'Critical' to reflect the urgency of certain tasks.",
      "ideal": "Creates a new priority level and returns the created priority object with its ID."
    },
    {
      "path": "/rest/api/3/priority/default",
      "method": "PUT",
      "operationId": "setDefaultPriority",
      "summary": "",
      "user": "As a project lead, I want to set 'High' as the default priority for new issues to streamline the issue creation process.",
      "ideal": "Sets the specified priority as the default and returns the updated default priority information."
    },
    {
      "path": "/rest/api/3/priority/move",
      "method": "PUT",
      "operationId": "movePriorities",
      "summary": "",
      "user": "As a product owner, I want to reorder the priority levels to reflect the new project requirements.",
      "ideal": "Updates the order of the priority levels and returns the new order of priorities."
    },
    {
      "path": "/rest/api/3/priority/search",
      "method": "GET",
      "operationId": "searchPriorities",
      "summary": "",
      "user": "As a developer, I want to search for specific priority levels by name to quickly find the one I need.",
      "ideal": "Returns a list of priority levels that match the search criteria."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "DELETE",
      "operationId": "deletePriority",
      "summary": "",
      "user": "As a system administrator, I want to delete an obsolete priority level to keep the priority list clean and relevant.",
      "ideal": "Deletes the specified priority level and returns a confirmation of the deletion."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "GET",
      "operationId": "getPriority",
      "summary": "",
      "user": "As a team member, I want to retrieve details of a specific priority level to understand its significance in our workflow.",
      "ideal": "Returns the details of the specified priority level including its ID and name."
    },
    {
      "path": "/rest/api/3/priority/{id}",
      "method": "PUT",
      "operationId": "updatePriority",
      "summary": "",
      "user": "As a project manager, I want to update the name of a priority level from 'Low' to 'Minor' to better reflect its importance.",
      "ideal": "Updates the specified priority level and returns the updated priority object."
    },
    {
      "path": "/rest/api/3/issue/properties",
      "method": "POST",
      "operationId": "bulkSetIssuesPropertiesList",
      "summary": "",
      "user": "As a project manager, I want to set multiple properties for a list of issues at once to streamline the process of updating issue metadata.",
      "ideal": "The API should accept a list of issue IDs and their corresponding properties, and return a success response for each issue updated."
    },
    {
      "path": "/rest/api/3/issue/properties/multi",
      "method": "POST",
      "operationId": "bulkSetIssuePropertiesByIssue",
      "summary": "",
      "user": "As a developer, I need to update properties for several issues in one request to save time and reduce the number of API calls.",
      "ideal": "The API should allow me to send a batch of issue IDs with their properties and return a confirmation of the updates made."
    },
    {
      "path": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "bulkDeleteIssueProperty",
      "summary": "",
      "user": "As a team lead, I want to remove a specific property from all issues to ensure consistency in our project management practices.",
      "ideal": "The API should delete the specified property from all issues and return a success message indicating the number of issues updated."
    },
    {
      "path": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "bulkSetIssueProperty",
      "summary": "",
      "user": "As a product owner, I want to set a specific property for all issues in a project to reflect a new requirement.",
      "ideal": "The API should update the specified property for all issues and return a summary of the changes made."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties",
      "method": "GET",
      "operationId": "getIssuePropertyKeys",
      "summary": "",
      "user": "As a QA engineer, I want to retrieve all property keys for a specific issue to understand its metadata and ensure it meets our standards.",
      "ideal": "The API should return a list of all property keys associated with the specified issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteIssueProperty",
      "summary": "",
      "user": "As a scrum master, I need to delete a specific property from an issue to clean up unnecessary metadata.",
      "ideal": "The API should successfully remove the specified property from the issue and confirm the deletion."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getIssueProperty",
      "summary": "",
      "user": "As a business analyst, I want to fetch the value of a specific property for an issue to analyze its current state.",
      "ideal": "The API should return the value of the specified property for the given issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setIssueProperty",
      "summary": "",
      "user": "As a developer, I want to set a specific property for an issue to reflect the latest changes in our development process.",
      "ideal": "The API should update the property with the new value and return a confirmation of the update."
    },
    {
      "path": "/rest/api/3/redact",
      "method": "POST",
      "operationId": "redact",
      "summary": "",
      "user": "User123",
      "ideal": "This endpoint allows the user to submit a redaction request for sensitive information in Jira issues. The user should provide the necessary details in the request body, including the issue ID and the specific fields to redact."
    },
    {
      "path": "/rest/api/3/redact/status/{jobId}",
      "method": "GET",
      "operationId": "getRedactionStatus",
      "summary": "",
      "user": "User456",
      "ideal": "This endpoint retrieves the status of a previously submitted redaction job using the job ID. The user can check if the redaction is still in progress, completed, or failed, providing transparency in the redaction process."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink",
      "method": "GET",
      "operationId": "getRemoteIssueLinks",
      "summary": "",
      "user": "User requests to retrieve all remote links associated with issue ABC-123.",
      "ideal": "Returns a list of remote issue links for the specified issue."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink",
      "method": "POST",
      "operationId": "createOrUpdateRemoteIssueLink",
      "summary": "",
      "user": "User wants to create a new remote link for issue ABC-123 with a URL to an external system.",
      "ideal": "Creates a new remote issue link and returns the created link details."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/456",
      "method": "DELETE",
      "operationId": "deleteRemoteIssueLinkById",
      "summary": "",
      "user": "User intends to delete the remote link with ID 456 from issue ABC-123.",
      "ideal": "Successfully deletes the specified remote issue link."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/456",
      "method": "GET",
      "operationId": "getRemoteIssueLinkById",
      "summary": "",
      "user": "User wants to retrieve details of the remote link with ID 456 for issue ABC-123.",
      "ideal": "Returns the details of the specified remote issue link."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/456",
      "method": "PUT",
      "operationId": "updateRemoteIssueLink",
      "summary": "",
      "user": "User needs to update the remote link with ID 456 for issue ABC-123 to point to a new URL.",
      "ideal": "Updates the specified remote issue link and returns the updated link details."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/remotelink/{globalId}",
      "method": "DELETE",
      "operationId": "deleteRemoteIssueLinkByGlobalId",
      "summary": "",
      "user": "User wants to delete a remote link associated with issue ABC-123 using its global ID.",
      "ideal": "Successfully deletes the remote issue link identified by the global ID."
    },
    {
      "path": "/rest/api/3/resolution",
      "method": "GET",
      "operationId": "getResolutions",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available resolutions to understand the options for closing issues.",
      "ideal": "A successful response with a list of all resolutions, including their IDs and names."
    },
    {
      "path": "/rest/api/3/resolution",
      "method": "POST",
      "operationId": "createResolution",
      "summary": "",
      "user": "As a team lead, I want to create a new resolution for issues that are resolved by a specific team process.",
      "ideal": "A successful response indicating the resolution has been created, including the new resolution ID."
    },
    {
      "path": "/rest/api/3/resolution/default",
      "method": "PUT",
      "operationId": "setDefaultResolution",
      "summary": "",
      "user": "As a system administrator, I want to set a default resolution for all issues to streamline the workflow.",
      "ideal": "A successful response confirming that the default resolution has been updated."
    },
    {
      "path": "/rest/api/3/resolution/move",
      "method": "PUT",
      "operationId": "moveResolutions",
      "summary": "",
      "user": "As a project coordinator, I need to reorganize resolutions to better reflect our current processes.",
      "ideal": "A successful response indicating that the resolutions have been moved as requested."
    },
    {
      "path": "/rest/api/3/resolution/search",
      "method": "GET",
      "operationId": "searchResolutions",
      "summary": "",
      "user": "As a support agent, I want to search for specific resolutions to assist users with their issue resolution.",
      "ideal": "A successful response with a filtered list of resolutions matching the search criteria."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "DELETE",
      "operationId": "deleteResolution",
      "summary": "",
      "user": "As a project manager, I want to delete outdated resolutions that are no longer relevant to our projects.",
      "ideal": "A successful response confirming that the resolution has been deleted."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "GET",
      "operationId": "getResolution",
      "summary": "",
      "user": "As a developer, I want to retrieve details of a specific resolution to understand its purpose and usage.",
      "ideal": "A successful response containing the details of the requested resolution."
    },
    {
      "path": "/rest/api/3/resolution/{id}",
      "method": "PUT",
      "operationId": "updateResolution",
      "summary": "",
      "user": "As a product owner, I want to update the description of a resolution to better reflect its current use case.",
      "ideal": "A successful response confirming that the resolution has been updated."
    },
    {
      "path": "/rest/api/3/issue/picker",
      "method": "GET",
      "operationId": "getIssuePickerResource",
      "summary": "",
      "user": "User wants to quickly find issues to link in a comment.",
      "ideal": "Returns a list of issues that match the user's input for easy selection."
    },
    {
      "path": "/rest/api/3/jql/match",
      "method": "POST",
      "operationId": "matchIssues",
      "summary": "",
      "user": "User is trying to match issues based on specific criteria.",
      "ideal": "Returns a list of issues that match the provided JQL query."
    },
    {
      "path": "/rest/api/3/search",
      "method": "GET",
      "operationId": "searchForIssuesUsingJql",
      "summary": "",
      "user": "User wants to retrieve issues based on a JQL query to analyze project progress.",
      "ideal": "Returns a paginated list of issues that match the JQL query."
    },
    {
      "path": "/rest/api/3/search",
      "method": "POST",
      "operationId": "searchForIssuesUsingJqlPost",
      "summary": "",
      "user": "User needs to perform a complex search for issues using a detailed JQL query.",
      "ideal": "Returns a list of issues that match the provided JQL query in the request body."
    },
    {
      "path": "/rest/api/3/search/approximate-count",
      "method": "POST",
      "operationId": "countIssues",
      "summary": "",
      "user": "User wants to know how many issues match a specific JQL query without retrieving all issues.",
      "ideal": "Returns an approximate count of issues that match the JQL query."
    },
    {
      "path": "/rest/api/3/search/jql",
      "method": "GET",
      "operationId": "searchAndReconsileIssuesUsingJql",
      "summary": "",
      "user": "User is looking to reconcile issues from different projects using a JQL query.",
      "ideal": "Returns a list of reconciled issues based on the JQL query."
    },
    {
      "path": "/rest/api/3/search/jql",
      "method": "POST",
      "operationId": "searchAndReconsileIssuesUsingJqlPost",
      "summary": "",
      "user": "User needs to submit a JQL query to reconcile issues across multiple projects.",
      "ideal": "Returns a list of reconciled issues based on the JQL query provided in the request body."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/123/members",
      "method": "GET",
      "operationId": "getIssueSecurityLevelMembers",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the members associated with the issue security scheme identified by ID 123."
    },
    {
      "path": "/rest/api/3/securitylevel/456",
      "method": "GET",
      "operationId": "getIssueSecurityLevel",
      "summary": "",
      "user": "user456",
      "ideal": "Fetch the details of the security level with ID 456."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes",
      "method": "GET",
      "operationId": "getIssueSecuritySchemes",
      "summary": "",
      "user": "admin_user",
      "ideal": "Retrieve all issue security schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes",
      "method": "POST",
      "operationId": "createIssueSecurityScheme",
      "summary": "",
      "user": "project_manager",
      "ideal": "Create a new issue security scheme with specified details."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level",
      "method": "GET",
      "operationId": "getSecurityLevels",
      "summary": "",
      "user": "security_admin",
      "ideal": "Fetch all security levels defined in the Jira instance."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level/default",
      "method": "PUT",
      "operationId": "setDefaultLevels",
      "summary": "",
      "user": "admin_user",
      "ideal": "Set the default security levels for the issue security schemes."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/level/member",
      "method": "GET",
      "operationId": "getSecurityLevelMembers",
      "summary": "",
      "user": "project_manager",
      "ideal": "Get the members associated with specific security levels."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/project",
      "method": "GET",
      "operationId": "searchProjectsUsingSecuritySchemes",
      "summary": "",
      "user": "admin_user",
      "ideal": "Search for projects that are using specific issue security schemes."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/project",
      "method": "PUT",
      "operationId": "associateSchemesToProjects",
      "summary": "",
      "user": "project_manager",
      "ideal": "Associate existing issue security schemes to specified projects."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/search",
      "method": "GET",
      "operationId": "searchSecuritySchemes",
      "summary": "",
      "user": "security_admin",
      "ideal": "Search for issue security schemes based on criteria."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "GET",
      "operationId": "getIssueSecurityScheme",
      "summary": "",
      "user": "admin_user",
      "ideal": "Retrieve details of a specific issue security scheme by ID."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "PUT",
      "operationId": "updateIssueSecurityScheme",
      "summary": "",
      "user": "project_manager",
      "ideal": "Update the details of an existing issue security scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}",
      "method": "DELETE",
      "operationId": "deleteSecurityScheme",
      "summary": "",
      "user": "admin_user",
      "ideal": "Delete a specific issue security scheme by its ID."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level",
      "method": "PUT",
      "operationId": "addSecurityLevel",
      "summary": "",
      "user": "security_admin",
      "ideal": "Add a new security level to an existing issue security scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "DELETE",
      "operationId": "removeLevel",
      "summary": "",
      "user": "admin_user",
      "ideal": "Remove a specific security level from an issue security scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "PUT",
      "operationId": "updateSecurityLevel",
      "summary": "",
      "user": "security_admin",
      "ideal": "Update the details of a specific security level."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member",
      "method": "PUT",
      "operationId": "addSecurityLevelMembers",
      "summary": "",
      "user": "project_manager",
      "ideal": "Add members to a specific security level in an issue security scheme."
    },
    {
      "path": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}",
      "method": "DELETE",
      "operationId": "removeMemberFromSecurityLevel",
      "summary": "",
      "user": "security_admin",
      "ideal": "Remove a member from a specific security level."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties",
      "method": "GET",
      "operationId": "getIssueTypePropertyKeys",
      "summary": "",
      "user": "As a project manager, I want to retrieve all custom properties associated with a specific issue type in Jira so that I can understand the additional metadata available for that issue type.",
      "ideal": "The API should return a list of property keys for the specified issue type, allowing me to see all custom attributes defined."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "GET",
      "operationId": "getIssueTypeProperty",
      "summary": "",
      "user": "As a developer, I need to fetch the value of a specific property for an issue type to ensure that my application can correctly interpret the data associated with that issue type.",
      "ideal": "The API should return the value of the specified property key for the given issue type, enabling me to access the necessary information."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "PUT",
      "operationId": "setIssueTypeProperty",
      "summary": "",
      "user": "As a system administrator, I want to set a custom property for an issue type to enhance the issue tracking capabilities in our Jira instance.",
      "ideal": "The API should successfully update the specified property key with the new value for the issue type, confirming the change was made."
    },
    {
      "path": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeProperty",
      "summary": "",
      "user": "As a product owner, I need to remove an outdated property from an issue type to keep our issue types clean and relevant.",
      "ideal": "The API should successfully delete the specified property key from the issue type, ensuring that it no longer appears in the property list."
    },
    {
      "path": "/rest/api/3/issuetypescheme",
      "method": "GET",
      "operationId": "getAllIssueTypeSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue type schemes available in Jira so that I can understand the different configurations that can be applied to my projects.",
      "ideal": "The API should return a list of all issue type schemes with their IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/issuetypescheme",
      "method": "POST",
      "operationId": "createIssueTypeScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type scheme to better organize the issue types for my projects.",
      "ideal": "The API should accept a JSON payload with the scheme details and return the newly created issue type scheme's ID and details."
    },
    {
      "path": "/rest/api/3/issuetypescheme/mapping",
      "method": "GET",
      "operationId": "getIssueTypeSchemesMapping",
      "summary": "",
      "user": "As a developer, I need to get the mapping of issue type schemes to projects to ensure that the correct issue types are available for each project.",
      "ideal": "The API should return a mapping of project IDs to their corresponding issue type scheme IDs."
    },
    {
      "path": "/rest/api/3/issuetypescheme/project",
      "method": "GET",
      "operationId": "getIssueTypeSchemeForProjects",
      "summary": "",
      "user": "As a project lead, I want to find out which issue type scheme is assigned to my project to ensure that the right issue types are being used.",
      "ideal": "The API should return the issue type scheme ID and details for the specified project."
    },
    {
      "path": "/rest/api/3/issuetypescheme/project",
      "method": "PUT",
      "operationId": "assignIssueTypeSchemeToProject",
      "summary": "",
      "user": "As a project administrator, I need to assign an issue type scheme to my project to customize the issue types available for my team.",
      "ideal": "The API should accept a project ID and an issue type scheme ID, and confirm the assignment with a success message."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to delete an unused issue type scheme to keep the system organized and reduce clutter.",
      "ideal": "The API should delete the specified issue type scheme and return a confirmation message."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "PUT",
      "operationId": "updateIssueTypeScheme",
      "summary": "",
      "user": "As a project manager, I need to update the details of an existing issue type scheme to reflect changes in our project requirements.",
      "ideal": "The API should accept updated details for the issue type scheme and return the updated scheme's information."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype",
      "method": "PUT",
      "operationId": "addIssueTypesToIssueTypeScheme",
      "summary": "",
      "user": "As a project administrator, I want to add new issue types to an existing issue type scheme to expand the options available for my team.",
      "ideal": "The API should accept a list of issue type IDs to be added and return the updated issue type scheme details."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move",
      "method": "PUT",
      "operationId": "reorderIssueTypesInIssueTypeScheme",
      "summary": "",
      "user": "As a project manager, I need to reorder the issue types in an issue type scheme to prioritize certain types for my team.",
      "ideal": "The API should accept a new order for the issue types and return the updated order confirmation."
    },
    {
      "path": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}",
      "method": "DELETE",
      "operationId": "removeIssueTypeFromIssueTypeScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to remove an issue type from an issue type scheme that is no longer needed to streamline our processes.",
      "ideal": "The API should delete the specified issue type from the scheme and return a confirmation message."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue type screen schemes to understand how different issue types are managed in the project.",
      "ideal": "Should return a list of all issue type screen schemes with their details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme",
      "method": "POST",
      "operationId": "createIssueTypeScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type screen scheme to customize the screens for different issue types in my project.",
      "ideal": "Should create a new issue type screen scheme and return the created scheme's details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/mapping",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemeMappings",
      "summary": "",
      "user": "As a developer, I want to see the mappings between issue types and screen schemes to ensure that the correct screens are displayed.",
      "ideal": "Should return a list of mappings between issue types and their corresponding screen schemes."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/project",
      "method": "GET",
      "operationId": "getIssueTypeScreenSchemeProjectAssociations",
      "summary": "",
      "user": "As a project lead, I need to know which issue type screen schemes are associated with my project to manage issue types effectively.",
      "ideal": "Should return the associations of issue type screen schemes with the specified project."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/project",
      "method": "PUT",
      "operationId": "assignIssueTypeScreenSchemeToProject",
      "summary": "",
      "user": "As a project administrator, I want to assign an issue type screen scheme to my project to ensure that the correct screens are used for issues.",
      "ideal": "Should assign the specified issue type screen scheme to the project and return a success message."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "DELETE",
      "operationId": "deleteIssueTypeScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to delete an obsolete issue type screen scheme to clean up the configuration.",
      "ideal": "Should delete the specified issue type screen scheme and return a confirmation of deletion."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "PUT",
      "operationId": "updateIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to update an existing issue type screen scheme to reflect changes in our issue management process.",
      "ideal": "Should update the specified issue type screen scheme and return the updated details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping",
      "method": "PUT",
      "operationId": "appendMappingsForIssueTypeScreenScheme",
      "summary": "",
      "user": "As a developer, I want to append new mappings for an issue type screen scheme to ensure all issue types are covered.",
      "ideal": "Should append the new mappings to the specified issue type screen scheme and return the updated mappings."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default",
      "method": "PUT",
      "operationId": "updateDefaultScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to update the default screen scheme for an issue type screen scheme to ensure it aligns with our current processes.",
      "ideal": "Should update the default screen scheme for the specified issue type screen scheme and return the updated details."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove",
      "method": "POST",
      "operationId": "removeMappingsFromIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project lead, I want to remove outdated mappings from an issue type screen scheme to streamline the issue creation process.",
      "ideal": "Should remove the specified mappings from the issue type screen scheme and return a success message."
    },
    {
      "path": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project",
      "method": "GET",
      "operationId": "getProjectsForIssueTypeScreenScheme",
      "summary": "",
      "user": "As a project manager, I want to see all projects associated with a specific issue type screen scheme to manage our resources effectively.",
      "ideal": "Should return a list of projects associated with the specified issue type screen scheme."
    },
    {
      "path": "/rest/api/3/issuetype",
      "method": "GET",
      "operationId": "getIssueAllTypes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all issue types available in Jira so that I can understand the different categories of work items.",
      "ideal": "Returns a list of all issue types with their respective details including id, name, and description."
    },
    {
      "path": "/rest/api/3/issuetype",
      "method": "POST",
      "operationId": "createIssueType",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new issue type for my team to better categorize our tasks.",
      "ideal": "Creates a new issue type and returns the created issue type object with its id and details."
    },
    {
      "path": "/rest/api/3/issuetype/project",
      "method": "GET",
      "operationId": "getIssueTypesForProject",
      "summary": "",
      "user": "As a developer, I want to see which issue types are available for my specific project to ensure I am using the correct categories.",
      "ideal": "Returns a list of issue types that are associated with the specified project."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "DELETE",
      "operationId": "deleteIssueType",
      "summary": "",
      "user": "As a project administrator, I want to delete an obsolete issue type to keep our project clean and organized.",
      "ideal": "Deletes the specified issue type and returns a confirmation message indicating successful deletion."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "GET",
      "operationId": "getIssueType",
      "summary": "",
      "user": "As a team lead, I want to retrieve the details of a specific issue type to review its configuration.",
      "ideal": "Returns the details of the specified issue type including its id, name, and description."
    },
    {
      "path": "/rest/api/3/issuetype/{id}",
      "method": "PUT",
      "operationId": "updateIssueType",
      "summary": "",
      "user": "As a Jira administrator, I want to update the name and description of an existing issue type to reflect our current terminology.",
      "ideal": "Updates the specified issue type and returns the updated issue type object."
    },
    {
      "path": "/rest/api/3/issuetype/{id}/alternatives",
      "method": "GET",
      "operationId": "getAlternativeIssueTypes",
      "summary": "",
      "user": "As a product owner, I want to explore alternative issue types for a specific issue type to consider better categorization options.",
      "ideal": "Returns a list of alternative issue types that can be used instead of the specified issue type."
    },
    {
      "path": "/rest/api/3/issuetype/{id}/avatar2",
      "method": "POST",
      "operationId": "createIssueTypeAvatar",
      "summary": "",
      "user": "As a designer, I want to upload a custom avatar for a specific issue type to enhance its visual representation in the project.",
      "ideal": "Uploads the specified avatar for the issue type and returns the updated issue type object with the new avatar."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/votes",
      "method": "GET",
      "operationId": "getVotes",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve the current vote count and details for the issue with ID ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/votes",
      "method": "POST",
      "operationId": "addVote",
      "summary": "",
      "user": "User456",
      "ideal": "Add a vote to the issue with ID ABC-123 to show support for its resolution."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/votes",
      "method": "DELETE",
      "operationId": "removeVote",
      "summary": "",
      "user": "User789",
      "ideal": "Remove my vote from the issue with ID ABC-123 as I no longer support it."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/watching",
      "method": "POST",
      "operationId": "getIsWatchingIssueBulk",
      "summary": "",
      "user": "user123",
      "ideal": "Check if the user is watching the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/watchers",
      "method": "GET",
      "operationId": "getIssueWatchers",
      "summary": "",
      "user": "user456",
      "ideal": "Retrieve the list of users watching the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/watchers",
      "method": "POST",
      "operationId": "addWatcher",
      "summary": "",
      "user": "user789",
      "ideal": "Add user789 as a watcher to the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/watchers",
      "method": "DELETE",
      "operationId": "removeWatcher",
      "summary": "",
      "user": "user101",
      "ideal": "Remove user101 from the watchers of the issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/worklog/456/properties",
      "method": "GET",
      "operationId": "getWorklogPropertyKeys",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve all property keys associated with the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/worklog/456/properties/customProperty",
      "method": "DELETE",
      "operationId": "deleteWorklogProperty",
      "summary": "",
      "user": "User456",
      "ideal": "Delete the custom property from the specified worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/worklog/456/properties/customProperty",
      "method": "GET",
      "operationId": "getWorklogProperty",
      "summary": "",
      "user": "User789",
      "ideal": "Fetch the value of the specified custom property from the worklog."
    },
    {
      "path": "/rest/api/3/issue/PROJECT-123/worklog/456/properties/customProperty",
      "method": "PUT",
      "operationId": "setWorklogProperty",
      "summary": "",
      "user": "User101",
      "ideal": "Set a new value for the specified custom property in the worklog."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog",
      "method": "GET",
      "operationId": "getIssueWorklog",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve all worklogs associated with issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog",
      "method": "POST",
      "operationId": "addWorklog",
      "summary": "",
      "user": "user456",
      "ideal": "Add a new worklog entry for issue ABC-123 with time spent and comment."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/789",
      "method": "PUT",
      "operationId": "updateWorklog",
      "summary": "",
      "user": "user789",
      "ideal": "Update the worklog with ID 789 for issue ABC-123 to reflect new time spent."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/789",
      "method": "DELETE",
      "operationId": "deleteWorklog",
      "summary": "",
      "user": "user101",
      "ideal": "Delete the worklog entry with ID 789 for issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/move",
      "method": "POST",
      "operationId": "bulkMoveWorklogs",
      "summary": "",
      "user": "user202",
      "ideal": "Move multiple worklogs from issue ABC-123 to issue DEF-456."
    },
    {
      "path": "/rest/api/3/worklog/deleted",
      "method": "GET",
      "operationId": "getIdsOfWorklogsDeletedSince",
      "summary": "",
      "user": "user303",
      "ideal": "Fetch IDs of worklogs that have been deleted since a specific timestamp."
    },
    {
      "path": "/rest/api/3/worklog/list",
      "method": "POST",
      "operationId": "getWorklogsForIds",
      "summary": "",
      "user": "user404",
      "ideal": "Retrieve worklogs for a list of specified IDs."
    },
    {
      "path": "/rest/api/3/worklog/updated",
      "method": "GET",
      "operationId": "getIdsOfWorklogsModifiedSince",
      "summary": "",
      "user": "user505",
      "ideal": "Get IDs of worklogs that have been modified since a certain date."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog",
      "method": "DELETE",
      "operationId": "bulkDeleteWorklogs",
      "summary": "",
      "user": "user606",
      "ideal": "Delete multiple worklogs for issue ABC-123 in a single request."
    },
    {
      "path": "/rest/api/3/issue/ABC-123/worklog/789",
      "method": "GET",
      "operationId": "getWorklog",
      "summary": "",
      "user": "user707",
      "ideal": "Retrieve detailed information about the worklog entry with ID 789 for issue ABC-123."
    },
    {
      "path": "/rest/api/3/issue",
      "method": "POST",
      "operationId": "createIssue",
      "summary": "",
      "user": "User A wants to create a new issue in the Jira project.",
      "ideal": "A new issue is created successfully with a unique ID."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "GET",
      "operationId": "getIssue",
      "summary": "",
      "user": "User B needs to retrieve details of a specific issue by its ID.",
      "ideal": "The issue details are returned, including its status and assignee."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "PUT",
      "operationId": "editIssue",
      "summary": "",
      "user": "User C wants to update the description of an existing issue.",
      "ideal": "The issue is updated successfully with the new description."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "GET",
      "operationId": "getTransitions",
      "summary": "",
      "user": "User D wants to see the available transitions for an issue.",
      "ideal": "A list of possible transitions for the issue is returned."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "POST",
      "operationId": "doTransition",
      "summary": "",
      "user": "User E wants to transition an issue to 'In Progress'.",
      "ideal": "The issue is successfully transitioned to 'In Progress'."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/changelog",
      "method": "GET",
      "operationId": "getChangeLogs",
      "summary": "",
      "user": "User F needs to view the changelog for a specific issue.",
      "ideal": "The changelog is returned, showing all changes made to the issue."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/editmeta",
      "method": "GET",
      "operationId": "getEditIssueMeta",
      "summary": "",
      "user": "User G wants to know what fields can be edited for an issue.",
      "ideal": "A list of editable fields for the issue is returned."
    },
    {
      "path": "/rest/api/3/issue/{issueIdOrKey}/notify",
      "method": "POST",
      "operationId": "notify",
      "summary": "",
      "user": "User H wants to notify watchers of an issue about an update.",
      "ideal": "Watchers are notified successfully about the issue update."
    },
    {
      "path": "/rest/api/3/issue/createmeta",
      "method": "GET",
      "operationId": "getCreateIssueMeta",
      "summary": "",
      "user": "User I wants to retrieve metadata for creating new issues.",
      "ideal": "Metadata for creating issues is returned, including available issue types."
    },
    {
      "path": "/rest/api/3/issue/limit/report",
      "method": "GET",
      "operationId": "getIssueLimitReport",
      "summary": "",
      "user": "User J needs to generate a report on issue limits.",
      "ideal": "A report detailing the issue limits is generated and returned."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata",
      "method": "GET",
      "operationId": "getAutoComplete",
      "summary": "",
      "user": "User wants to get autocomplete suggestions for JQL queries to help construct their search more efficiently.",
      "ideal": "Returns a list of autocomplete suggestions based on the current input."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata",
      "method": "POST",
      "operationId": "getAutoCompletePost",
      "summary": "",
      "user": "User submits a JQL query fragment to receive autocomplete suggestions for fields and values.",
      "ideal": "Returns a list of autocomplete suggestions based on the submitted JQL fragment."
    },
    {
      "path": "/rest/api/3/jql/autocompletedata/suggestions",
      "method": "GET",
      "operationId": "getFieldAutoCompleteForQueryString",
      "summary": "",
      "user": "User wants to retrieve specific field suggestions for a given JQL query string.",
      "ideal": "Returns field-specific autocomplete suggestions relevant to the provided query string."
    },
    {
      "path": "/rest/api/3/jql/parse",
      "method": "POST",
      "operationId": "parseJqlQueries",
      "summary": "",
      "user": "User sends a JQL query to be parsed for validation and structure analysis.",
      "ideal": "Returns a structured representation of the parsed JQL query along with any validation errors."
    },
    {
      "path": "/rest/api/3/jql/pdcleaner",
      "method": "POST",
      "operationId": "migrateQueries",
      "summary": "",
      "user": "User needs to migrate legacy JQL queries to the new format for compatibility.",
      "ideal": "Returns a list of migrated queries with any necessary adjustments made for the new format."
    },
    {
      "path": "/rest/api/3/jql/sanitize",
      "method": "POST",
      "operationId": "sanitiseJqlQueries",
      "summary": "",
      "user": "User wants to sanitize a JQL query to remove any potentially harmful content.",
      "ideal": "Returns a sanitized version of the JQL query, ensuring it is safe for execution."
    },
    {
      "path": "/rest/api/3/jql/function/computation",
      "method": "GET",
      "operationId": "getPrecomputations",
      "summary": "",
      "user": "As a project manager, I want to retrieve all precomputations available in the Jira system to analyze their performance and ensure they meet our reporting needs.",
      "ideal": "The API should return a list of all precomputations with their details, including IDs, names, and statuses."
    },
    {
      "path": "/rest/api/3/jql/function/computation",
      "method": "POST",
      "operationId": "updatePrecomputations",
      "summary": "",
      "user": "As a data analyst, I need to update existing precomputations with new parameters to improve the accuracy of our data analysis reports.",
      "ideal": "The API should accept the updated parameters and return a success message along with the updated precomputation details."
    },
    {
      "path": "/rest/api/3/jql/function/computation/search",
      "method": "POST",
      "operationId": "getPrecomputationsByID",
      "summary": "",
      "user": "As a developer, I want to search for specific precomputations by their IDs to integrate them into our application and streamline our workflow.",
      "ideal": "The API should return the details of the requested precomputations based on the provided IDs, including their current status and relevant metadata."
    },
    {
      "path": "/rest/api/3/expression/analyse",
      "method": "POST",
      "operationId": "analyseExpression",
      "summary": "",
      "user": "User wants to analyze a Jira expression to understand its structure and components.",
      "ideal": "The API should return a detailed breakdown of the expression, including its syntax, variables, and any potential errors."
    },
    {
      "path": "/rest/api/3/expression/eval",
      "method": "POST",
      "operationId": "evaluateJiraExpression",
      "summary": "",
      "user": "User needs to evaluate a specific Jira expression to retrieve a calculated value based on current issue data.",
      "ideal": "The API should return the evaluated result of the expression, along with any relevant context or error messages if the evaluation fails."
    },
    {
      "path": "/rest/api/3/expression/evaluate",
      "method": "POST",
      "operationId": "evaluateJSISJiraExpression",
      "summary": "",
      "user": "User is looking to evaluate a JSIS (Jira Server Integration Service) expression for advanced calculations.",
      "ideal": "The API should return the result of the JSIS expression evaluation, including any necessary details about the execution context."
    },
    {
      "path": "/rest/api/3/application-properties",
      "method": "GET",
      "operationId": "getApplicationProperty",
      "summary": "",
      "user": "User requests the current application properties to understand the configuration settings of the Jira instance.",
      "ideal": "Returns a list of application properties with their current values."
    },
    {
      "path": "/rest/api/3/application-properties/advanced-settings",
      "method": "GET",
      "operationId": "getAdvancedSettings",
      "summary": "",
      "user": "User wants to retrieve advanced settings for the application to fine-tune performance and features.",
      "ideal": "Returns the advanced settings configuration for the application."
    },
    {
      "path": "/rest/api/3/application-properties/{id}",
      "method": "PUT",
      "operationId": "setApplicationProperty",
      "summary": "",
      "user": "User updates a specific application property to enable a new feature in Jira.",
      "ideal": "Successfully updates the specified application property and returns the updated value."
    },
    {
      "path": "/rest/api/3/configuration",
      "method": "GET",
      "operationId": "getConfiguration",
      "summary": "",
      "user": "User checks the current configuration of the Jira instance to ensure it meets the project requirements.",
      "ideal": "Returns the current configuration settings of the Jira instance."
    },
    {
      "path": "/rest/api/3/label",
      "method": "GET",
      "operationId": "getAllLabels",
      "summary": "",
      "user": "As a project manager, I want to retrieve all labels available in the Jira Cloud platform so that I can effectively categorize issues and improve project organization.",
      "ideal": "The API should return a list of all labels in the system, including their names and any associated metadata, in a JSON format."
    },
    {
      "path": "/rest/api/3/instance/license",
      "method": "GET",
      "operationId": "getLicense",
      "summary": "",
      "user": "As a Jira administrator, I want to retrieve the license details of my Jira instance to ensure compliance and manage user access effectively.",
      "ideal": "The response should include the license type, the number of users allowed, and the expiration date of the license."
    },
    {
      "path": "/rest/api/3/license/approximateLicenseCount",
      "method": "GET",
      "operationId": "getApproximateLicenseCount",
      "summary": "",
      "user": "As a project manager, I need to know the approximate number of licenses in use to plan for future user additions and budget accordingly.",
      "ideal": "The response should provide an approximate count of active licenses currently in use across the Jira instance."
    },
    {
      "path": "/rest/api/3/license/approximateLicenseCount/product/{applicationKey}",
      "method": "GET",
      "operationId": "getApproximateApplicationLicenseCount",
      "summary": "",
      "user": "As a product owner, I want to check the approximate license count for a specific application key to evaluate its usage and determine if we need to purchase more licenses.",
      "ideal": "The response should return the approximate number of licenses in use for the specified application key, helping in resource allocation."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "DELETE",
      "operationId": "removePreference",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully removed user preference."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "GET",
      "operationId": "getPreference",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieved user preferences successfully."
    },
    {
      "path": "/rest/api/3/mypreferences",
      "method": "PUT",
      "operationId": "setPreference",
      "summary": "",
      "user": "user123",
      "ideal": "User preferences updated successfully."
    },
    {
      "path": "/rest/api/3/mypreferences/locale",
      "method": "GET",
      "operationId": "getLocale",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieved user locale successfully."
    },
    {
      "path": "/rest/api/3/mypreferences/locale",
      "method": "PUT",
      "operationId": "setLocale",
      "summary": "",
      "user": "user123",
      "ideal": "User locale updated successfully."
    },
    {
      "path": "/rest/api/3/myself",
      "method": "GET",
      "operationId": "getCurrentUser",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieved current user information successfully."
    },
    {
      "path": "/rest/api/3/permissionscheme",
      "method": "GET",
      "operationId": "getAllPermissionSchemes",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all permission schemes available in the Jira instance."
    },
    {
      "path": "/rest/api/3/permissionscheme",
      "method": "POST",
      "operationId": "createPermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new permission scheme with specified permissions and settings."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "DELETE",
      "operationId": "deletePermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Delete the specified permission scheme by its ID."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "GET",
      "operationId": "getPermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve details of a specific permission scheme using its ID."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "PUT",
      "operationId": "updatePermissionScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Update the details of an existing permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "GET",
      "operationId": "getPermissionSchemeGrants",
      "summary": "",
      "user": "admin",
      "ideal": "Get all permission grants associated with a specific permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "POST",
      "operationId": "createPermissionGrant",
      "summary": "",
      "user": "admin",
      "ideal": "Add a new permission grant to the specified permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "DELETE",
      "operationId": "deletePermissionSchemeEntity",
      "summary": "",
      "user": "admin",
      "ideal": "Remove a specific permission grant from the permission scheme."
    },
    {
      "path": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "GET",
      "operationId": "getPermissionSchemeGrant",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve details of a specific permission grant within a permission scheme."
    },
    {
      "path": "/rest/api/3/mypermissions",
      "method": "GET",
      "operationId": "getMyPermissions",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current user's permissions in Jira."
    },
    {
      "path": "/rest/api/3/permissions",
      "method": "GET",
      "operationId": "getAllPermissions",
      "summary": "",
      "user": "admin456",
      "ideal": "Fetch a list of all permissions available in the Jira instance."
    },
    {
      "path": "/rest/api/3/permissions/check",
      "method": "POST",
      "operationId": "getBulkPermissions",
      "summary": "",
      "user": "user789",
      "ideal": "Check multiple permissions for the current user in a single request."
    },
    {
      "path": "/rest/api/3/permissions/project",
      "method": "POST",
      "operationId": "getPermittedProjects",
      "summary": "",
      "user": "projectManager321",
      "ideal": "Get a list of projects the user has permissions to access."
    },
    {
      "path": "/rest/api/3/plans/plan",
      "method": "GET",
      "operationId": "getPlans",
      "summary": "",
      "user": "Project Manager seeking to retrieve all existing plans for review.",
      "ideal": "Returns a list of all plans with their details."
    },
    {
      "path": "/rest/api/3/plans/plan",
      "method": "POST",
      "operationId": "createPlan",
      "summary": "",
      "user": "Team Lead creating a new plan for the upcoming sprint.",
      "ideal": "Creates a new plan and returns the created plan's details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}",
      "method": "GET",
      "operationId": "getPlan",
      "summary": "",
      "user": "Developer looking to view details of a specific plan.",
      "ideal": "Returns the details of the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}",
      "method": "PUT",
      "operationId": "updatePlan",
      "summary": "",
      "user": "Scrum Master updating the plan to reflect new deadlines.",
      "ideal": "Updates the specified plan and returns the updated plan's details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/archive",
      "method": "PUT",
      "operationId": "archivePlan",
      "summary": "",
      "user": "Project Manager archiving a completed plan.",
      "ideal": "Archives the specified plan and confirms the action."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/duplicate",
      "method": "POST",
      "operationId": "duplicatePlan",
      "summary": "",
      "user": "Team Lead duplicating a plan to create a similar one for another project.",
      "ideal": "Duplicates the specified plan and returns the new plan's details."
    },
    {
      "path": "/rest/api/3/plans/plan/{planId}/trash",
      "method": "PUT",
      "operationId": "trashPlan",
      "summary": "",
      "user": "Developer removing an outdated plan from the active list.",
      "ideal": "Moves the specified plan to the trash and confirms the action."
    },
    {
      "path": "/rest/api/3/priorityscheme",
      "method": "GET",
      "operationId": "getPrioritySchemes",
      "summary": "",
      "user": "A project manager looking to retrieve all priority schemes available in the Jira Cloud platform to better manage project tasks.",
      "ideal": "Returns a list of all priority schemes with their details."
    },
    {
      "path": "/rest/api/3/priorityscheme",
      "method": "POST",
      "operationId": "createPriorityScheme",
      "summary": "",
      "user": "A Jira administrator wanting to create a new priority scheme for a specific project to ensure tasks are prioritized correctly.",
      "ideal": "Creates a new priority scheme and returns the details of the created scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/mappings",
      "method": "POST",
      "operationId": "suggestedPrioritiesForMappings",
      "summary": "",
      "user": "A developer needing to find suggested priority mappings for a new project setup in Jira.",
      "ideal": "Returns suggested priority mappings based on the provided input."
    },
    {
      "path": "/rest/api/3/priorityscheme/priorities/available",
      "method": "GET",
      "operationId": "getAvailablePrioritiesByPriorityScheme",
      "summary": "",
      "user": "A team lead wanting to check which priorities are available under a specific priority scheme to assign tasks effectively.",
      "ideal": "Returns a list of available priorities for the specified priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}",
      "method": "DELETE",
      "operationId": "deletePriorityScheme",
      "summary": "",
      "user": "An administrator who needs to remove an outdated priority scheme that is no longer in use.",
      "ideal": "Deletes the specified priority scheme and confirms the deletion."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}",
      "method": "PUT",
      "operationId": "updatePriorityScheme",
      "summary": "",
      "user": "A project manager updating an existing priority scheme to reflect new project requirements and priorities.",
      "ideal": "Updates the specified priority scheme and returns the updated details."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}/priorities",
      "method": "GET",
      "operationId": "getPrioritiesByPriorityScheme",
      "summary": "",
      "user": "A project coordinator needing to review the priorities associated with a specific priority scheme for reporting purposes.",
      "ideal": "Returns a list of priorities associated with the specified priority scheme."
    },
    {
      "path": "/rest/api/3/priorityscheme/{schemeId}/projects",
      "method": "GET",
      "operationId": "getProjectsByPriorityScheme",
      "summary": "",
      "user": "A product owner wanting to see which projects are using a specific priority scheme to assess its effectiveness.",
      "ideal": "Returns a list of projects that are associated with the specified priority scheme."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/avatar",
      "method": "PUT",
      "operationId": "updateProjectAvatar",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully updated the avatar for project PROJ-123."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/avatar/456",
      "method": "DELETE",
      "operationId": "deleteProjectAvatar",
      "summary": "",
      "user": "user456",
      "ideal": "Successfully deleted the avatar with ID 456 for project PROJ-123."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/avatar2",
      "method": "POST",
      "operationId": "createProjectAvatar",
      "summary": "",
      "user": "user789",
      "ideal": "Successfully created a new avatar for project PROJ-123."
    },
    {
      "path": "/rest/api/3/project/PROJ-123/avatars",
      "method": "GET",
      "operationId": "getAllProjectAvatars",
      "summary": "",
      "user": "user101",
      "ideal": "Retrieved all avatars for project PROJ-123 successfully."
    },
    {
      "path": "/rest/api/3/projectCategory",
      "method": "GET",
      "operationId": "getAllProjectCategories",
      "summary": "",
      "user": "As a project manager, I want to retrieve all project categories to better organize my projects.",
      "ideal": "The response should return a list of all project categories with their respective IDs and names."
    },
    {
      "path": "/rest/api/3/projectCategory",
      "method": "POST",
      "operationId": "createProjectCategory",
      "summary": "",
      "user": "As an admin, I want to create a new project category to classify my projects effectively.",
      "ideal": "The response should confirm the creation of the project category and return the new category's ID and name."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "DELETE",
      "operationId": "removeProjectCategory",
      "summary": "",
      "user": "As an admin, I want to delete a project category that is no longer needed to keep the system organized.",
      "ideal": "The response should confirm that the project category has been successfully deleted."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "GET",
      "operationId": "getProjectCategoryById",
      "summary": "",
      "user": "As a project manager, I want to retrieve details of a specific project category to understand its attributes.",
      "ideal": "The response should return the details of the specified project category, including its ID and name."
    },
    {
      "path": "/rest/api/3/projectCategory/{id}",
      "method": "PUT",
      "operationId": "updateProjectCategory",
      "summary": "",
      "user": "As an admin, I want to update the name of an existing project category to reflect recent changes.",
      "ideal": "The response should confirm the update and return the updated project category details."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "GET",
      "operationId": "getDefaultProjectClassification",
      "summary": "",
      "user": "User123 is a project manager who wants to retrieve the default classification level for a specific project to ensure it aligns with the company's standards.",
      "ideal": "The API should return the current default classification level for the specified project, including any relevant metadata."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "PUT",
      "operationId": "updateDefaultProjectClassification",
      "summary": "",
      "user": "User456 is a team lead who needs to update the default classification level for their project to reflect new compliance requirements.",
      "ideal": "The API should successfully update the default classification level and return a confirmation message along with the updated classification details."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/classification-level/default",
      "method": "DELETE",
      "operationId": "removeDefaultProjectClassification",
      "summary": "",
      "user": "User789 is an administrator who wants to remove the default classification level for a project that is no longer active.",
      "ideal": "The API should delete the default classification level and return a success message indicating that the operation was completed."
    },
    {
      "path": "/rest/api/3/component",
      "method": "GET",
      "operationId": "findComponentsForProjects",
      "summary": "",
      "user": "As a project manager, I want to retrieve all components associated with my projects to ensure that I have a clear overview of the project's structure.",
      "ideal": "The API should return a list of components, including their IDs, names, and descriptions, for the specified projects."
    },
    {
      "path": "/rest/api/3/component",
      "method": "POST",
      "operationId": "createComponent",
      "summary": "",
      "user": "As a developer, I want to create a new component for my project so that I can organize tasks more effectively.",
      "ideal": "The API should accept a JSON payload with the component's name, description, and associated project ID, and return the newly created component's details."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "DELETE",
      "operationId": "deleteComponent",
      "summary": "",
      "user": "As a team lead, I want to delete a component that is no longer needed to keep the project clean and organized.",
      "ideal": "The API should confirm the deletion of the component and return a success message."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "GET",
      "operationId": "getComponent",
      "summary": "",
      "user": "As a QA engineer, I want to get detailed information about a specific component to understand its purpose and usage in the project.",
      "ideal": "The API should return the component's details, including its name, description, and associated issues."
    },
    {
      "path": "/rest/api/3/component/{id}",
      "method": "PUT",
      "operationId": "updateComponent",
      "summary": "",
      "user": "As a project coordinator, I want to update the details of an existing component to reflect changes in the project requirements.",
      "ideal": "The API should accept updated information for the component and return the updated component details."
    },
    {
      "path": "/rest/api/3/component/{id}/relatedIssueCounts",
      "method": "GET",
      "operationId": "getComponentRelatedIssues",
      "summary": "",
      "user": "As a product owner, I want to see how many issues are related to a specific component to prioritize our development efforts.",
      "ideal": "The API should return the count of related issues for the specified component, categorized by their status."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/component",
      "method": "GET",
      "operationId": "getProjectComponentsPaginated",
      "summary": "",
      "user": "As a scrum master, I want to retrieve components for a project in a paginated format to manage large sets of data efficiently.",
      "ideal": "The API should return a paginated list of components for the specified project, including metadata for pagination."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/components",
      "method": "GET",
      "operationId": "getProjectComponents",
      "summary": "",
      "user": "As a developer, I want to fetch all components of a project at once to quickly assess the project's architecture.",
      "ideal": "The API should return a complete list of components for the specified project, including their IDs and names."
    },
    {
      "path": "/rest/api/3/project/{projectId}/email",
      "method": "GET",
      "operationId": "getProjectEmail",
      "summary": "",
      "user": "As a project manager, I want to retrieve the email associated with a specific project so that I can ensure all communications are directed to the correct address.",
      "ideal": "The response should return a JSON object containing the email address linked to the specified project ID."
    },
    {
      "path": "/rest/api/3/project/{projectId}/email",
      "method": "PUT",
      "operationId": "updateProjectEmail",
      "summary": "",
      "user": "As a project administrator, I need to update the email address for a project to reflect changes in team communication protocols.",
      "ideal": "The response should confirm the successful update of the email address and return the updated email in the response body."
    },
    {
      "path": "/rest/api/3/project/ABC/features",
      "method": "GET",
      "operationId": "getFeaturesForProject",
      "summary": "",
      "user": "A project manager wants to retrieve the features associated with the project identified by the key 'ABC' to assess the current capabilities and plan future enhancements.",
      "ideal": "The response should include a list of features with their statuses, descriptions, and any relevant metadata."
    },
    {
      "path": "/rest/api/3/project/ABC/features/feature123",
      "method": "PUT",
      "operationId": "toggleFeatureForProject",
      "summary": "",
      "user": "A developer needs to enable a specific feature identified by 'feature123' for the project 'ABC' to allow for new functionality during the current sprint.",
      "ideal": "The response should confirm that the feature has been successfully toggled and provide the updated status of the feature."
    },
    {
      "path": "/rest/api/3/projectvalidate/key",
      "method": "GET",
      "operationId": "validateProjectKey",
      "summary": "",
      "user": "A project manager wants to ensure that the project key 'PROJ123' is valid before creating a new project in Jira.",
      "ideal": "The API should return a response indicating whether 'PROJ123' is a valid project key or not, along with any relevant error messages."
    },
    {
      "path": "/rest/api/3/projectvalidate/validProjectKey",
      "method": "GET",
      "operationId": "getValidProjectKey",
      "summary": "",
      "user": "A developer is looking to generate a valid project key for a new software project and wants to check if 'NEWPROJ' is available.",
      "ideal": "The API should return a confirmation that 'NEWPROJ' is a valid and available project key, or suggest alternatives if it is not."
    },
    {
      "path": "/rest/api/3/projectvalidate/validProjectName",
      "method": "GET",
      "operationId": "getValidProjectName",
      "summary": "",
      "user": "A team lead is trying to name a new project and needs to verify if 'New Development Project' is a valid name according to Jira's naming conventions.",
      "ideal": "The API should return a response indicating whether 'New Development Project' is a valid project name, including any restrictions or suggestions for modification."
    },
    {
      "path": "/rest/api/3/project/ABC123/issuesecuritylevelscheme",
      "method": "GET",
      "operationId": "getProjectIssueSecurityScheme",
      "summary": "",
      "user": "User with project management role wants to retrieve the issue security level scheme for project ABC123 to ensure proper access control.",
      "ideal": "Returns the issue security level scheme associated with the specified project."
    },
    {
      "path": "/rest/api/3/project/ABC123/permissionscheme",
      "method": "GET",
      "operationId": "getAssignedPermissionScheme",
      "summary": "",
      "user": "A project administrator needs to check the permission scheme assigned to project ABC123 to verify user access rights.",
      "ideal": "Provides the permission scheme currently assigned to the specified project."
    },
    {
      "path": "/rest/api/3/project/ABC123/permissionscheme",
      "method": "PUT",
      "operationId": "assignPermissionScheme",
      "summary": "",
      "user": "A project manager wants to assign a new permission scheme to project ABC123 to update user permissions.",
      "ideal": "Successfully assigns the specified permission scheme to the project."
    },
    {
      "path": "/rest/api/3/project/ABC123/securitylevel",
      "method": "GET",
      "operationId": "getSecurityLevelsForProject",
      "summary": "",
      "user": "A security officer needs to retrieve the security levels for project ABC123 to ensure compliance with security policies.",
      "ideal": "Returns a list of security levels defined for the specified project."
    },
    {
      "path": "/rest/api/3/project/ABC/properties",
      "method": "GET",
      "operationId": "getProjectPropertyKeys",
      "summary": "",
      "user": "As a project manager, I want to retrieve all property keys associated with the project ABC to understand the custom configurations applied.",
      "ideal": "The response should return a list of property keys for project ABC."
    },
    {
      "path": "/rest/api/3/project/ABC/properties/customProperty",
      "method": "DELETE",
      "operationId": "deleteProjectProperty",
      "summary": "",
      "user": "As a developer, I need to delete the custom property 'customProperty' from project ABC to clean up unused configurations.",
      "ideal": "The response should confirm the deletion of 'customProperty' from project ABC."
    },
    {
      "path": "/rest/api/3/project/ABC/properties/customProperty",
      "method": "GET",
      "operationId": "getProjectProperty",
      "summary": "",
      "user": "As a team lead, I want to check the value of the property 'customProperty' in project ABC to ensure it is set correctly.",
      "ideal": "The response should return the value of 'customProperty' for project ABC."
    },
    {
      "path": "/rest/api/3/project/ABC/properties/customProperty",
      "method": "PUT",
      "operationId": "setProjectProperty",
      "summary": "",
      "user": "As a project administrator, I want to set the value of 'customProperty' for project ABC to 'newValue' to update the project settings.",
      "ideal": "The response should confirm that 'customProperty' has been updated to 'newValue' for project ABC."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "DELETE",
      "operationId": "deleteActor",
      "summary": "",
      "user": "admin_user",
      "ideal": "Successfully removed the actor from the specified project role."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "POST",
      "operationId": "addActorUsers",
      "summary": "",
      "user": "project_manager",
      "ideal": "Successfully added users to the specified project role."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "PUT",
      "operationId": "setActors",
      "summary": "",
      "user": "team_lead",
      "ideal": "Successfully updated the actors for the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "DELETE",
      "operationId": "deleteProjectRoleActorsFromRole",
      "summary": "",
      "user": "admin_user",
      "ideal": "Successfully deleted actors from the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "GET",
      "operationId": "getProjectRoleActorsForRole",
      "summary": "",
      "user": "project_viewer",
      "ideal": "Successfully retrieved the list of actors for the specified project role."
    },
    {
      "path": "/rest/api/3/role/{id}/actors",
      "method": "POST",
      "operationId": "addProjectRoleActorsToRole",
      "summary": "",
      "user": "project_manager",
      "ideal": "Successfully added actors to the specified project role."
    },
    {
      "path": "/rest/api/3/project/TEST/role",
      "method": "GET",
      "operationId": "getProjectRoles",
      "summary": "",
      "user": "As a project manager, I want to retrieve all roles associated with the project 'TEST' so that I can manage permissions effectively.",
      "ideal": "The API should return a list of roles for the specified project, including role IDs and names."
    },
    {
      "path": "/rest/api/3/project/TEST/role/10000",
      "method": "GET",
      "operationId": "getProjectRole",
      "summary": "",
      "user": "As a developer, I need to get details of a specific role by its ID in the 'TEST' project to understand its permissions.",
      "ideal": "The API should return the details of the role with ID 10000, including its name and description."
    },
    {
      "path": "/rest/api/3/project/TEST/roledetails",
      "method": "GET",
      "operationId": "getProjectRoleDetails",
      "summary": "",
      "user": "As a team lead, I want to see detailed information about all roles in the 'TEST' project to ensure proper access control.",
      "ideal": "The API should return detailed information about each role, including users assigned to each role."
    },
    {
      "path": "/rest/api/3/role",
      "method": "GET",
      "operationId": "getAllProjectRoles",
      "summary": "",
      "user": "As an admin, I want to retrieve all project roles available in the system to manage role assignments across projects.",
      "ideal": "The API should return a list of all project roles with their IDs and names."
    },
    {
      "path": "/rest/api/3/role",
      "method": "POST",
      "operationId": "createProjectRole",
      "summary": "",
      "user": "As an admin, I want to create a new project role called 'Tester' to facilitate testing activities in projects.",
      "ideal": "The API should create a new role and return the created role's details, including its ID."
    },
    {
      "path": "/rest/api/3/role/10001",
      "method": "DELETE",
      "operationId": "deleteProjectRole",
      "summary": "",
      "user": "As an admin, I need to delete the role with ID 10001 as it is no longer needed in the project.",
      "ideal": "The API should successfully delete the specified role and return a confirmation message."
    },
    {
      "path": "/rest/api/3/role/10002",
      "method": "GET",
      "operationId": "getProjectRoleById",
      "summary": "",
      "user": "As a project manager, I want to retrieve details of the role with ID 10002 to review its permissions.",
      "ideal": "The API should return the details of the role with ID 10002, including its name and associated permissions."
    },
    {
      "path": "/rest/api/3/role/10003",
      "method": "POST",
      "operationId": "partialUpdateProjectRole",
      "summary": "",
      "user": "As an admin, I want to update the name of the role with ID 10003 to 'Senior Developer' to reflect the new title.",
      "ideal": "The API should update the role's name and return the updated role details."
    },
    {
      "path": "/rest/api/3/role/10004",
      "method": "PUT",
      "operationId": "fullyUpdateProjectRole",
      "summary": "",
      "user": "As an admin, I need to fully update the role with ID 10004 to change its permissions and name to 'Project Owner'.",
      "ideal": "The API should replace the existing role details with the new information and return the updated role."
    },
    {
      "path": "/rest/api/3/project-template",
      "method": "POST",
      "operationId": "createProjectWithCustomTemplate",
      "summary": "",
      "user": "A project manager looking to create a new project using a predefined template for better consistency across teams.",
      "ideal": "Successfully creates a new project with the specified custom template and returns the project details."
    },
    {
      "path": "/rest/api/3/project-template/edit-template",
      "method": "PUT",
      "operationId": "editTemplate",
      "summary": "",
      "user": "A team lead who needs to update an existing project template to include new fields and workflows.",
      "ideal": "Updates the specified project template and returns the updated template details."
    },
    {
      "path": "/rest/api/3/project-template/live-template",
      "method": "GET",
      "operationId": "liveTemplate",
      "summary": "",
      "user": "A developer wanting to view the current live project template to ensure their project aligns with the latest standards.",
      "ideal": "Returns the current live project template details for review."
    },
    {
      "path": "/rest/api/3/project-template/remove-template",
      "method": "DELETE",
      "operationId": "removeTemplate",
      "summary": "",
      "user": "An administrator who needs to remove an outdated project template that is no longer in use.",
      "ideal": "Successfully removes the specified project template and confirms the deletion."
    },
    {
      "path": "/rest/api/3/project-template/save-template",
      "method": "POST",
      "operationId": "saveTemplate",
      "summary": "",
      "user": "A project coordinator who wants to save a new project template after customizing it for future use.",
      "ideal": "Saves the new project template and returns a confirmation along with the template ID."
    },
    {
      "path": "/rest/api/3/project/type",
      "method": "GET",
      "operationId": "getAllProjectTypes",
      "summary": "",
      "user": "A project manager looking to understand the different types of projects available in Jira Cloud for better planning.",
      "ideal": "Returns a list of all project types available in the Jira Cloud platform."
    },
    {
      "path": "/rest/api/3/project/type/accessible",
      "method": "GET",
      "operationId": "getAllAccessibleProjectTypes",
      "summary": "",
      "user": "A team lead who needs to know which project types are accessible to their team for new project creation.",
      "ideal": "Returns a list of all project types that the user has access to in Jira Cloud."
    },
    {
      "path": "/rest/api/3/project/type/{projectTypeKey}",
      "method": "GET",
      "operationId": "getProjectTypeByKey",
      "summary": "",
      "user": "A developer who wants to retrieve detailed information about a specific project type using its key.",
      "ideal": "Returns detailed information about the specified project type identified by the projectTypeKey."
    },
    {
      "path": "/rest/api/3/project/type/{projectTypeKey}/accessible",
      "method": "GET",
      "operationId": "getAccessibleProjectTypeByKey",
      "summary": "",
      "user": "An administrator checking if a specific project type is accessible for a particular user or group.",
      "ideal": "Returns accessibility information for the specified project type identified by the projectTypeKey."
    },
    {
      "path": "/rest/api/3/project/TEST/versions",
      "method": "GET",
      "operationId": "getProjectVersions",
      "summary": "",
      "user": "A project manager wants to retrieve all versions associated with the project identified by the key 'TEST' to review the release schedule.",
      "ideal": "Returns a list of versions for the specified project."
    },
    {
      "path": "/rest/api/3/version/10000",
      "method": "GET",
      "operationId": "getVersion",
      "summary": "",
      "user": "A developer needs to check the details of a specific version with ID '10000' to understand its features and fixes before the release.",
      "ideal": "Returns the details of the version with ID '10000'."
    },
    {
      "path": "/rest/api/3/version",
      "method": "POST",
      "operationId": "createVersion",
      "summary": "",
      "user": "A product owner wants to create a new version '1.0.0' for the project to track new features and improvements.",
      "ideal": "Creates a new version and returns the created version details."
    },
    {
      "path": "/rest/api/3/version/10000",
      "method": "PUT",
      "operationId": "updateVersion",
      "summary": "",
      "user": "A project manager needs to update the release date of version '10000' to reflect the new timeline.",
      "ideal": "Updates the version details and returns the updated version."
    },
    {
      "path": "/rest/api/3/version/10000/relatedIssueCounts",
      "method": "GET",
      "operationId": "getVersionRelatedIssues",
      "summary": "",
      "user": "A QA engineer wants to see how many issues are related to version '10000' to prioritize testing efforts.",
      "ideal": "Returns the count of issues related to the specified version."
    },
    {
      "path": "/rest/api/3/version/10000/relatedwork",
      "method": "GET",
      "operationId": "getRelatedWork",
      "summary": "",
      "user": "A team lead is looking for related work items for version '10000' to ensure all tasks are aligned with the release.",
      "ideal": "Returns a list of related work items for the specified version."
    },
    {
      "path": "/rest/api/3/version/10000/relatedwork",
      "method": "POST",
      "operationId": "createRelatedWork",
      "summary": "",
      "user": "A developer wants to link a new task to version '10000' to track its progress alongside the version.",
      "ideal": "Creates a new related work item for the specified version."
    },
    {
      "path": "/rest/api/3/version/10000/relatedwork",
      "method": "PUT",
      "operationId": "updateRelatedWork",
      "summary": "",
      "user": "A project manager needs to update the details of a related work item for version '10000' to reflect changes in scope.",
      "ideal": "Updates the related work item and returns the updated details."
    },
    {
      "path": "/rest/api/3/version/10000/relatedwork/20000",
      "method": "DELETE",
      "operationId": "deleteRelatedWork",
      "summary": "",
      "user": "A developer wants to remove a related work item with ID '20000' from version '10000' as it is no longer relevant.",
      "ideal": "Deletes the specified related work item."
    },
    {
      "path": "/rest/api/3/version/10000/unresolvedIssueCount",
      "method": "GET",
      "operationId": "getVersionUnresolvedIssues",
      "summary": "",
      "user": "A QA lead wants to know how many unresolved issues are associated with version '10000' to assess release readiness.",
      "ideal": "Returns the count of unresolved issues for the specified version."
    },
    {
      "path": "/rest/api/3/project",
      "method": "GET",
      "operationId": "getAllProjects",
      "summary": "",
      "user": "User requests to retrieve a list of all projects in the Jira Cloud instance.",
      "ideal": "Returns a list of projects with their details."
    },
    {
      "path": "/rest/api/3/project",
      "method": "POST",
      "operationId": "createProject",
      "summary": "",
      "user": "User wants to create a new project with specific parameters.",
      "ideal": "Creates a new project and returns the project details."
    },
    {
      "path": "/rest/api/3/project/recent",
      "method": "GET",
      "operationId": "getRecent",
      "summary": "",
      "user": "User wants to see the most recently accessed projects.",
      "ideal": "Returns a list of recently accessed projects."
    },
    {
      "path": "/rest/api/3/project/search",
      "method": "GET",
      "operationId": "searchProjects",
      "summary": "",
      "user": "User is searching for projects that match a specific query.",
      "ideal": "Returns a list of projects that match the search criteria."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "DELETE",
      "operationId": "deleteProject",
      "summary": "",
      "user": "User wants to delete a specific project identified by its ID or key.",
      "ideal": "Deletes the specified project and confirms deletion."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "GET",
      "operationId": "getProject",
      "summary": "",
      "user": "User requests detailed information about a specific project.",
      "ideal": "Returns the details of the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}",
      "method": "PUT",
      "operationId": "updateProject",
      "summary": "",
      "user": "User wants to update the details of an existing project.",
      "ideal": "Updates the project details and returns the updated project."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/archive",
      "method": "POST",
      "operationId": "archiveProject",
      "summary": "",
      "user": "User wants to archive a specific project.",
      "ideal": "Archives the specified project and confirms the action."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/delete",
      "method": "POST",
      "operationId": "deleteProjectAsynchronously",
      "summary": "",
      "user": "User requests to delete a project asynchronously.",
      "ideal": "Initiates asynchronous deletion of the project and returns a confirmation."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/restore",
      "method": "POST",
      "operationId": "restore",
      "summary": "",
      "user": "User wants to restore a previously deleted project.",
      "ideal": "Restores the specified project and returns the project details."
    },
    {
      "path": "/rest/api/3/project/{projectIdOrKey}/statuses",
      "method": "GET",
      "operationId": "getAllStatuses",
      "summary": "",
      "user": "User wants to retrieve all statuses associated with a specific project.",
      "ideal": "Returns a list of all statuses for the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectId}/hierarchy",
      "method": "GET",
      "operationId": "getHierarchy",
      "summary": "",
      "user": "User requests the hierarchy of a specific project.",
      "ideal": "Returns the hierarchy structure of the specified project."
    },
    {
      "path": "/rest/api/3/project/{projectKeyOrId}/notificationscheme",
      "method": "GET",
      "operationId": "getNotificationSchemeForProject",
      "summary": "",
      "user": "User wants to see the notification scheme for a specific project.",
      "ideal": "Returns the notification scheme details for the specified project."
    },
    {
      "path": "/rest/api/3/screenscheme",
      "method": "GET",
      "operationId": "getScreenSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all screen schemes to understand how screens are organized in my Jira projects.",
      "ideal": "The API should return a list of all screen schemes with their details, including IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/screenscheme",
      "method": "POST",
      "operationId": "createScreenScheme",
      "summary": "",
      "user": "As a Jira administrator, I want to create a new screen scheme to customize the issue view for my team.",
      "ideal": "The API should accept a JSON payload with the screen scheme details and return the created screen scheme's ID and confirmation of creation."
    },
    {
      "path": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "DELETE",
      "operationId": "deleteScreenScheme",
      "summary": "",
      "user": "As a project lead, I want to delete an obsolete screen scheme to keep our project configuration clean.",
      "ideal": "The API should confirm the deletion of the specified screen scheme and return a success message."
    },
    {
      "path": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "PUT",
      "operationId": "updateScreenScheme",
      "summary": "",
      "user": "As a product owner, I want to update an existing screen scheme to reflect changes in our workflow requirements.",
      "ideal": "The API should accept updated details for the screen scheme and return the updated screen scheme's information."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields",
      "method": "GET",
      "operationId": "getAllScreenTabFields",
      "summary": "",
      "user": "User requests to retrieve all fields associated with a specific tab in a screen to understand the current configuration.",
      "ideal": "Returns a list of fields currently present in the specified screen tab."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields",
      "method": "POST",
      "operationId": "addScreenTabField",
      "summary": "",
      "user": "User wants to add a new field to a specific tab in a screen to enhance the data collection process.",
      "ideal": "Successfully adds the specified field to the tab and returns the updated list of fields."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields/3001",
      "method": "DELETE",
      "operationId": "removeScreenTabField",
      "summary": "",
      "user": "User intends to remove an existing field from a tab in a screen to streamline the user interface.",
      "ideal": "Confirms the removal of the specified field and returns the updated list of fields."
    },
    {
      "path": "/rest/api/3/screens/1001/tabs/2001/fields/3001/move",
      "method": "POST",
      "operationId": "moveScreenTabField",
      "summary": "",
      "user": "User needs to change the order of fields in a tab to prioritize certain information for better visibility.",
      "ideal": "Successfully updates the order of fields in the tab and returns the new arrangement."
    },
    {
      "path": "/rest/api/3/screens/tabs",
      "method": "GET",
      "operationId": "getBulkScreenTabs",
      "summary": "",
      "user": "As a project manager, I want to retrieve all available screen tabs to understand the layout of my project's screens.",
      "ideal": "The API should return a list of all screen tabs with their respective details, including tab IDs and names."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs",
      "method": "GET",
      "operationId": "getAllScreenTabs",
      "summary": "",
      "user": "As a developer, I need to fetch all tabs for a specific screen to ensure I am working with the correct configuration.",
      "ideal": "The API should return a list of tabs associated with the specified screen ID, including their names and positions."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs",
      "method": "POST",
      "operationId": "addScreenTab",
      "summary": "",
      "user": "As a product owner, I want to add a new tab to a screen to include additional fields for user input.",
      "ideal": "The API should successfully create a new tab for the specified screen and return the details of the newly created tab."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "DELETE",
      "operationId": "deleteScreenTab",
      "summary": "",
      "user": "As a system administrator, I need to remove an unnecessary tab from a screen to streamline the user interface.",
      "ideal": "The API should delete the specified tab and confirm the deletion with a success message."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "PUT",
      "operationId": "renameScreenTab",
      "summary": "",
      "user": "As a team lead, I want to rename a tab to better reflect its purpose and improve team clarity.",
      "ideal": "The API should update the tab's name and return the updated tab details."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
      "method": "POST",
      "operationId": "moveScreenTab",
      "summary": "",
      "user": "As a UI designer, I need to rearrange the order of tabs on a screen to enhance user experience.",
      "ideal": "The API should successfully move the specified tab to the new position and return the updated order of tabs."
    },
    {
      "path": "/rest/api/3/field/{fieldId}/screens",
      "method": "GET",
      "operationId": "getScreensForField",
      "summary": "",
      "user": "User wants to retrieve all screens associated with a specific field to understand where the field is used.",
      "ideal": "Returns a list of screens that include the specified field."
    },
    {
      "path": "/rest/api/3/screens",
      "method": "GET",
      "operationId": "getScreens",
      "summary": "",
      "user": "User needs to list all screens in the Jira instance to manage their visibility and organization.",
      "ideal": "Returns a list of all screens available in the system."
    },
    {
      "path": "/rest/api/3/screens",
      "method": "POST",
      "operationId": "createScreen",
      "summary": "",
      "user": "User wants to create a new screen for a project to customize the issue view.",
      "ideal": "Creates a new screen and returns the details of the created screen."
    },
    {
      "path": "/rest/api/3/screens/addToDefault/{fieldId}",
      "method": "POST",
      "operationId": "addFieldToDefaultScreen",
      "summary": "",
      "user": "User needs to add a specific field to the default screen to ensure it is visible during issue creation.",
      "ideal": "Adds the specified field to the default screen and confirms the addition."
    },
    {
      "path": "/rest/api/3/screens/{screenId}",
      "method": "DELETE",
      "operationId": "deleteScreen",
      "summary": "",
      "user": "User wants to delete an outdated screen that is no longer needed in the project.",
      "ideal": "Deletes the specified screen and returns a success message."
    },
    {
      "path": "/rest/api/3/screens/{screenId}",
      "method": "PUT",
      "operationId": "updateScreen",
      "summary": "",
      "user": "User needs to update the name of an existing screen to better reflect its purpose.",
      "ideal": "Updates the specified screen and returns the updated screen details."
    },
    {
      "path": "/rest/api/3/screens/{screenId}/availableFields",
      "method": "GET",
      "operationId": "getAvailableScreenFields",
      "summary": "",
      "user": "User wants to see which fields can be added to a specific screen to enhance its functionality.",
      "ideal": "Returns a list of fields that can be added to the specified screen."
    },
    {
      "path": "/rest/api/3/serverInfo",
      "method": "GET",
      "operationId": "getServerInfo",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the server information including version, build number, and server time."
    },
    {
      "path": "/rest/atlassian-connect/1/service-registry",
      "method": "GET",
      "operationId": "ServiceRegistryResource.services_get",
      "summary": "",
      "user": "As a Jira administrator, I want to retrieve the list of services registered with the Atlassian Connect framework so that I can manage integrations effectively.",
      "ideal": "The response should include a JSON array of services, each containing details such as service name, URL, and status."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "GET",
      "operationId": "getStatusesById",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current statuses available in Jira to understand the workflow stages.",
      "ideal": "Retrieve a list of all statuses in the system."
    },
    {
      "path": "/rest/api/3/statuses",
      "method": "POST",
      "operationId": "createStatuses",
      "summary": "",
      "user": "As a team lead, I want to create a new status called 'In Review' to better reflect our workflow.",
      "ideal": "Create a new status with the name 'In Review' and appropriate properties."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}",
      "method": "PUT",
      "operationId": "updateStatuses",
      "summary": "",
      "user": "As a product owner, I want to update the status 'In Progress' to 'In Development' to clarify its meaning.",
      "ideal": "Update the status with ID {statusId} to have the name 'In Development'."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/project/{projectId}/issueTypeUsages",
      "method": "GET",
      "operationId": "getProjectIssueTypeUsagesForStatus",
      "summary": "",
      "user": "As a developer, I want to see which issue types are associated with the 'Done' status in my project.",
      "ideal": "Retrieve issue type usages for the status 'Done' in the specified project."
    },
    {
      "path": "/rest/api/3/statuses/byNames",
      "method": "GET",
      "operationId": "getStatusesByName",
      "summary": "",
      "user": "As a scrum master, I want to fetch statuses by their names to ensure they match our sprint goals.",
      "ideal": "Get statuses with names that match the provided criteria."
    },
    {
      "path": "/rest/api/3/statuses/search",
      "method": "GET",
      "operationId": "search",
      "summary": "",
      "user": "As an admin, I want to search for statuses that contain the word 'Open' to manage our workflow.",
      "ideal": "Search for statuses that include 'Open' in their names or descriptions."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForStatus",
      "summary": "",
      "user": "As a project coordinator, I want to find out which projects are using the 'Blocked' status.",
      "ideal": "Retrieve a list of projects that utilize the 'Blocked' status."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}/workflowUsages",
      "method": "GET",
      "operationId": "getWorkflowUsagesForStatus",
      "summary": "",
      "user": "As a business analyst, I want to identify workflows that include the 'In Testing' status to analyze our processes.",
      "ideal": "Get workflows that incorporate the 'In Testing' status."
    },
    {
      "path": "/rest/api/3/statuses/{statusId}",
      "method": "DELETE",
      "operationId": "deleteStatusesById",
      "summary": "",
      "user": "As a system administrator, I want to delete the obsolete status 'Deprecated' to clean up our status list.",
      "ideal": "Remove the status with ID {statusId} from the system."
    },
    {
      "path": "/rest/api/3/task/12345",
      "method": "GET",
      "operationId": "getTask",
      "summary": "",
      "user": "As a project manager, I want to retrieve the details of a specific task by its ID so that I can review its status and assigned resources.",
      "ideal": "The response should include the task's title, description, status, assignee, and any comments associated with it."
    },
    {
      "path": "/rest/api/3/task/12345/cancel",
      "method": "POST",
      "operationId": "cancelTask",
      "summary": "",
      "user": "As a team member, I need to cancel a task that is no longer relevant to our project, so that it does not clutter our task list.",
      "ideal": "The response should confirm that the task has been successfully canceled and provide any relevant information about the cancellation."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team",
      "method": "GET",
      "operationId": "getTeams",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve all teams associated with the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian",
      "method": "POST",
      "operationId": "addAtlassianTeam",
      "summary": "",
      "user": "User456",
      "ideal": "Add a new Atlassian team to the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian/789",
      "method": "DELETE",
      "operationId": "removeAtlassianTeam",
      "summary": "",
      "user": "User789",
      "ideal": "Remove the specified Atlassian team from the plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian/789",
      "method": "GET",
      "operationId": "getAtlassianTeam",
      "summary": "",
      "user": "User101",
      "ideal": "Retrieve details of the specified Atlassian team."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/atlassian/789",
      "method": "PUT",
      "operationId": "updateAtlassianTeam",
      "summary": "",
      "user": "User202",
      "ideal": "Update the details of the specified Atlassian team."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly",
      "method": "POST",
      "operationId": "createPlanOnlyTeam",
      "summary": "",
      "user": "User303",
      "ideal": "Create a new plan-only team for the specified plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly/456",
      "method": "DELETE",
      "operationId": "deletePlanOnlyTeam",
      "summary": "",
      "user": "User404",
      "ideal": "Delete the specified plan-only team from the plan."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly/456",
      "method": "GET",
      "operationId": "getPlanOnlyTeam",
      "summary": "",
      "user": "User505",
      "ideal": "Retrieve details of the specified plan-only team."
    },
    {
      "path": "/rest/api/3/plans/plan/123/team/planonly/456",
      "method": "PUT",
      "operationId": "updatePlanOnlyTeam",
      "summary": "",
      "user": "User606",
      "ideal": "Update the details of the specified plan-only team."
    },
    {
      "path": "/rest/api/3/configuration/timetracking",
      "method": "GET",
      "operationId": "getSelectedTimeTrackingImplementation",
      "summary": "",
      "user": "As a project manager, I want to retrieve the currently selected time tracking implementation for my Jira project so that I can ensure it aligns with our team's workflow.",
      "ideal": "The response should include the details of the selected time tracking implementation, such as its name and configuration settings."
    },
    {
      "path": "/rest/api/3/configuration/timetracking",
      "method": "PUT",
      "operationId": "selectTimeTrackingImplementation",
      "summary": "",
      "user": "As an administrator, I need to change the time tracking implementation for my Jira instance to a new one that better fits our project needs.",
      "ideal": "The request should successfully update the time tracking implementation and return a confirmation message indicating the change was made."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/list",
      "method": "GET",
      "operationId": "getAvailableTimeTrackingImplementations",
      "summary": "",
      "user": "As a developer, I want to see a list of all available time tracking implementations so that I can choose the best one for my project.",
      "ideal": "The response should provide a comprehensive list of all available time tracking implementations, including their names and descriptions."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/options",
      "method": "GET",
      "operationId": "getSharedTimeTrackingConfiguration",
      "summary": "",
      "user": "As a team lead, I want to access the shared time tracking configuration to ensure all team members are using the same settings.",
      "ideal": "The response should return the current shared time tracking configuration, detailing the settings that are applied across the team."
    },
    {
      "path": "/rest/api/3/configuration/timetracking/options",
      "method": "PUT",
      "operationId": "setSharedTimeTrackingConfiguration",
      "summary": "",
      "user": "As a system administrator, I need to update the shared time tracking configuration to reflect new policies regarding time tracking across all projects.",
      "ideal": "The request should successfully update the shared time tracking configuration and return a confirmation message with the new settings."
    },
    {
      "path": "/rest/api/3/uiModifications",
      "method": "GET",
      "operationId": "getUiModifications",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current UI modifications applied to my Jira project so that I can review the changes made.",
      "ideal": "The API should return a list of UI modifications, including their IDs, types, and descriptions, allowing me to understand the current state of the UI."
    },
    {
      "path": "/rest/api/3/uiModifications",
      "method": "POST",
      "operationId": "createUiModification",
      "summary": "",
      "user": "As a developer, I want to create a new UI modification for my project to enhance user experience by adding a custom button.",
      "ideal": "The API should accept the modification details and return the created modification's ID and confirmation of the successful creation."
    },
    {
      "path": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "DELETE",
      "operationId": "deleteUiModification",
      "summary": "",
      "user": "As an admin, I want to delete an outdated UI modification that is no longer relevant to ensure the interface remains clean and user-friendly.",
      "ideal": "The API should confirm the deletion of the specified UI modification and return a success message."
    },
    {
      "path": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "PUT",
      "operationId": "updateUiModification",
      "summary": "",
      "user": "As a UX designer, I want to update an existing UI modification to improve its functionality based on user feedback.",
      "ideal": "The API should accept the updated details and return the modified UI modification's ID along with a confirmation of the update."
    },
    {
      "path": "/rest/api/3/user/properties",
      "method": "GET",
      "operationId": "getUserPropertyKeys",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve all user property keys for the specified user."
    },
    {
      "path": "/rest/api/3/user/properties/notificationPreference",
      "method": "DELETE",
      "operationId": "deleteUserProperty",
      "summary": "",
      "user": "jane.smith@example.com",
      "ideal": "Delete the user's notification preference property."
    },
    {
      "path": "/rest/api/3/user/properties/theme",
      "method": "GET",
      "operationId": "getUserProperty",
      "summary": "",
      "user": "alice.brown@example.com",
      "ideal": "Fetch the user's theme property to determine their UI preferences."
    },
    {
      "path": "/rest/api/3/user/properties/language",
      "method": "PUT",
      "operationId": "setUserProperty",
      "summary": "",
      "user": "bob.johnson@example.com",
      "ideal": "Set the user's preferred language property to 'en-US'."
    },
    {
      "path": "/rest/api/3/user/assignable/multiProjectSearch",
      "method": "GET",
      "operationId": "findBulkAssignableUsers",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve a list of users who can be assigned issues across multiple projects."
    },
    {
      "path": "/rest/api/3/user/assignable/search",
      "method": "GET",
      "operationId": "findAssignableUsers",
      "summary": "",
      "user": "jane.smith@example.com",
      "ideal": "Get a list of users who can be assigned issues in a specific project."
    },
    {
      "path": "/rest/api/3/user/permission/search",
      "method": "GET",
      "operationId": "findUsersWithAllPermissions",
      "summary": "",
      "user": "admin@example.com",
      "ideal": "Find users who have all permissions in the Jira instance."
    },
    {
      "path": "/rest/api/3/user/picker",
      "method": "GET",
      "operationId": "findUsersForPicker",
      "summary": "",
      "user": "project.manager@example.com",
      "ideal": "Search for users to display in a user picker dropdown."
    },
    {
      "path": "/rest/api/3/user/search",
      "method": "GET",
      "operationId": "findUsers",
      "summary": "",
      "user": "team.lead@example.com",
      "ideal": "Retrieve a list of users based on search criteria."
    },
    {
      "path": "/rest/api/3/user/search/query",
      "method": "GET",
      "operationId": "findUsersByQuery",
      "summary": "",
      "user": "dev.team@example.com",
      "ideal": "Search for users using a specific query string."
    },
    {
      "path": "/rest/api/3/user/search/query/key",
      "method": "GET",
      "operationId": "findUserKeysByQuery",
      "summary": "",
      "user": "qa.tester@example.com",
      "ideal": "Find user keys based on a query string."
    },
    {
      "path": "/rest/api/3/user/viewissue/search",
      "method": "GET",
      "operationId": "findUsersWithBrowsePermission",
      "summary": "",
      "user": "support@example.com",
      "ideal": "Get a list of users who have permission to browse issues."
    },
    {
      "path": "/rest/api/3/user",
      "method": "GET",
      "operationId": "getUser",
      "summary": "",
      "user": "john.doe@example.com",
      "ideal": "Retrieve user details for John Doe."
    },
    {
      "path": "/rest/api/3/user",
      "method": "POST",
      "operationId": "createUser",
      "summary": "",
      "user": "jane.smith@example.com",
      "ideal": "Create a new user with the email jane.smith@example.com."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "GET",
      "operationId": "getUserDefaultColumns",
      "summary": "",
      "user": "alice.brown@example.com",
      "ideal": "Get default columns for user Alice Brown."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "PUT",
      "operationId": "setUserColumns",
      "summary": "",
      "user": "bob.johnson@example.com",
      "ideal": "Set custom columns for user Bob Johnson."
    },
    {
      "path": "/rest/api/3/user/groups",
      "method": "GET",
      "operationId": "getUserGroups",
      "summary": "",
      "user": "charlie.white@example.com",
      "ideal": "Retrieve groups for user Charlie White."
    },
    {
      "path": "/rest/api/3/users",
      "method": "GET",
      "operationId": "getAllUsersDefault",
      "summary": "",
      "user": "admin@example.com",
      "ideal": "Get a list of all users with default settings."
    },
    {
      "path": "/rest/api/3/user/email",
      "method": "GET",
      "operationId": "getUserEmail",
      "summary": "",
      "user": "david.green@example.com",
      "ideal": "Fetch email address for user David Green."
    },
    {
      "path": "/rest/api/3/user/email/bulk",
      "method": "GET",
      "operationId": "getUserEmailBulk",
      "summary": "",
      "user": "team@example.com",
      "ideal": "Retrieve email addresses for multiple users in bulk."
    },
    {
      "path": "/rest/api/3/user/bulk",
      "method": "GET",
      "operationId": "bulkGetUsers",
      "summary": "",
      "user": "manager@example.com",
      "ideal": "Get details for multiple users in bulk."
    },
    {
      "path": "/rest/api/3/user/bulk/migration",
      "method": "GET",
      "operationId": "bulkGetUsersMigration",
      "summary": "",
      "user": "migration@example.com",
      "ideal": "Retrieve users for migration purposes."
    },
    {
      "path": "/rest/api/3/user/columns",
      "method": "DELETE",
      "operationId": "resetUserColumns",
      "summary": "",
      "user": "emily.jones@example.com",
      "ideal": "Reset custom columns for user Emily Jones."
    },
    {
      "path": "/rest/api/3/user",
      "method": "DELETE",
      "operationId": "removeUser",
      "summary": "",
      "user": "frank.miller@example.com",
      "ideal": "Remove user Frank Miller from the system."
    },
    {
      "path": "/rest/api/3/webhook",
      "method": "GET",
      "operationId": "getDynamicWebhooksForApp",
      "summary": "",
      "user": "As a developer, I want to retrieve all dynamic webhooks associated with my application to ensure they are correctly configured and functioning.",
      "ideal": "The API should return a list of dynamic webhooks in JSON format, including their IDs, URLs, and status."
    },
    {
      "path": "/rest/api/3/webhook",
      "method": "POST",
      "operationId": "registerDynamicWebhooks",
      "summary": "",
      "user": "As an application administrator, I need to register new dynamic webhooks for my app to receive real-time updates from Jira.",
      "ideal": "The API should accept a JSON payload with the webhook details and return a success message along with the newly created webhook ID."
    },
    {
      "path": "/rest/api/3/webhook/{webhookId}",
      "method": "DELETE",
      "operationId": "deleteWebhookById",
      "summary": "",
      "user": "As a developer, I want to delete a specific webhook that is no longer needed to keep my application clean and efficient.",
      "ideal": "The API should confirm the deletion of the webhook and return a success message."
    },
    {
      "path": "/rest/api/3/webhook/failed",
      "method": "GET",
      "operationId": "getFailedWebhooks",
      "summary": "",
      "user": "As a system administrator, I need to check for any failed webhooks to troubleshoot issues and ensure that my integrations are working properly.",
      "ideal": "The API should return a list of failed webhooks with details about the failure reason and timestamps."
    },
    {
      "path": "/rest/api/3/webhook/refresh",
      "method": "PUT",
      "operationId": "refreshWebhooks",
      "summary": "",
      "user": "As a developer, I want to refresh the webhooks to ensure they are up-to-date with the latest configuration changes.",
      "ideal": "The API should process the refresh request and return a success message indicating that the webhooks have been updated."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/createdraft",
      "method": "POST",
      "operationId": "createWorkflowSchemeDraftFromParent",
      "summary": "",
      "user": "admin",
      "ideal": "Creates a draft workflow scheme based on the existing scheme with ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeDraft",
      "summary": "",
      "user": "admin",
      "ideal": "Deletes the draft workflow scheme associated with the workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "GET",
      "operationId": "getWorkflowSchemeDraft",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieves the draft workflow scheme for the workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft",
      "method": "PUT",
      "operationId": "updateWorkflowSchemeDraft",
      "summary": "",
      "user": "admin",
      "ideal": "Updates the draft workflow scheme for the workflow scheme ID 123 with new configurations."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "DELETE",
      "operationId": "deleteDraftDefaultWorkflow",
      "summary": "",
      "user": "admin",
      "ideal": "Deletes the default workflow from the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "GET",
      "operationId": "getDraftDefaultWorkflow",
      "summary": "",
      "user": "admin",
      "ideal": "Fetches the default workflow from the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/default",
      "method": "PUT",
      "operationId": "updateDraftDefaultWorkflow",
      "summary": "",
      "user": "admin",
      "ideal": "Updates the default workflow for the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "admin",
      "ideal": "Removes the issue type 'bug' from the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "GET",
      "operationId": "getWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieves the configuration for the issue type 'bug' in the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/issuetype/bug",
      "method": "PUT",
      "operationId": "setWorkflowSchemeDraftIssueType",
      "summary": "",
      "user": "admin",
      "ideal": "Sets the issue type 'bug' for the draft workflow scheme ID 123 with new workflow mapping."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/publish",
      "method": "POST",
      "operationId": "publishDraftWorkflowScheme",
      "summary": "",
      "user": "admin",
      "ideal": "Publishes the draft workflow scheme ID 123, making it active."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "DELETE",
      "operationId": "deleteDraftWorkflowMapping",
      "summary": "",
      "user": "admin",
      "ideal": "Deletes the workflow mapping from the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "GET",
      "operationId": "getDraftWorkflow",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieves the workflow mapping from the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/123/draft/workflow",
      "method": "PUT",
      "operationId": "updateDraftWorkflowMapping",
      "summary": "",
      "user": "admin",
      "ideal": "Updates the workflow mapping for the draft workflow scheme ID 123."
    },
    {
      "path": "/rest/api/3/workflowscheme/project",
      "method": "GET",
      "operationId": "getWorkflowSchemeProjectAssociations",
      "summary": "",
      "user": "A project manager wants to retrieve the workflow scheme associations for a specific project in Jira to ensure that the correct workflows are applied to the project's issues.",
      "ideal": "The response should include the project ID, the associated workflow scheme ID, and the name of the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/project",
      "method": "PUT",
      "operationId": "assignSchemeToProject",
      "summary": "",
      "user": "A Jira administrator needs to assign a new workflow scheme to a project to better align the project's processes with the team's requirements.",
      "ideal": "The request should successfully update the project with the new workflow scheme ID and return a confirmation message indicating the assignment was successful."
    },
    {
      "path": "/rest/api/3/workflowscheme",
      "method": "GET",
      "operationId": "getAllWorkflowSchemes",
      "summary": "",
      "user": "As a project manager, I want to retrieve all workflow schemes to review their configurations and ensure they align with our project needs.",
      "ideal": "The API should return a list of all workflow schemes with their details, including IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/workflowscheme",
      "method": "POST",
      "operationId": "createWorkflowScheme",
      "summary": "",
      "user": "As a system administrator, I want to create a new workflow scheme to manage the workflows for a new project effectively.",
      "ideal": "The API should accept a JSON payload with the new workflow scheme details and return the created scheme's ID and status."
    },
    {
      "path": "/rest/api/3/workflowscheme/read",
      "method": "POST",
      "operationId": "readWorkflowSchemes",
      "summary": "",
      "user": "As a developer, I need to read multiple workflow schemes to analyze their current configurations for integration purposes.",
      "ideal": "The API should return the requested workflow schemes based on the provided identifiers."
    },
    {
      "path": "/rest/api/3/workflowscheme/update",
      "method": "POST",
      "operationId": "updateSchemes",
      "summary": "",
      "user": "As a project lead, I want to update existing workflow schemes to reflect changes in our project processes.",
      "ideal": "The API should accept a list of workflow schemes with updated details and confirm the successful updates."
    },
    {
      "path": "/rest/api/3/workflowscheme/update/mappings",
      "method": "POST",
      "operationId": "updateWorkflowSchemeMappings",
      "summary": "",
      "user": "As a product owner, I need to update the mappings of workflow schemes to ensure they are correctly associated with the right issue types.",
      "ideal": "The API should process the mapping updates and return a success message with the updated mappings."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "DELETE",
      "operationId": "deleteWorkflowScheme",
      "summary": "",
      "user": "As a system administrator, I want to delete obsolete workflow schemes to keep our system clean and organized.",
      "ideal": "The API should delete the specified workflow scheme and return a confirmation of the deletion."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "GET",
      "operationId": "getWorkflowScheme",
      "summary": "",
      "user": "As a project manager, I want to retrieve details of a specific workflow scheme to understand its configuration.",
      "ideal": "The API should return the details of the specified workflow scheme, including its name, description, and associated workflows."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}",
      "method": "PUT",
      "operationId": "updateWorkflowScheme",
      "summary": "",
      "user": "As a project lead, I need to update the details of a workflow scheme to better fit our team's workflow.",
      "ideal": "The API should accept the updated details and return the updated workflow scheme information."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "DELETE",
      "operationId": "deleteDefaultWorkflow",
      "summary": "",
      "user": "As a system administrator, I want to remove the default workflow from a scheme that is no longer applicable.",
      "ideal": "The API should delete the default workflow and confirm the action."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "GET",
      "operationId": "getDefaultWorkflow",
      "summary": "",
      "user": "As a developer, I want to retrieve the default workflow for a specific workflow scheme to understand its behavior.",
      "ideal": "The API should return the details of the default workflow associated with the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/default",
      "method": "PUT",
      "operationId": "updateDefaultWorkflow",
      "summary": "",
      "user": "As a project manager, I need to update the default workflow for a scheme to align with our new processes.",
      "ideal": "The API should accept the new default workflow details and confirm the update."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "DELETE",
      "operationId": "deleteWorkflowSchemeIssueType",
      "summary": "",
      "user": "As a project lead, I want to remove an issue type from a workflow scheme that is no longer relevant.",
      "ideal": "The API should delete the specified issue type from the workflow scheme and return a confirmation."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "GET",
      "operationId": "getWorkflowSchemeIssueType",
      "summary": "",
      "user": "As a developer, I want to get the details of a specific issue type within a workflow scheme to ensure proper integration.",
      "ideal": "The API should return the details of the specified issue type within the workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "PUT",
      "operationId": "setWorkflowSchemeIssueType",
      "summary": "",
      "user": "As a product owner, I need to set a specific issue type for a workflow scheme to ensure it is correctly configured.",
      "ideal": "The API should accept the issue type details and confirm the successful update."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "DELETE",
      "operationId": "deleteWorkflowMapping",
      "summary": "",
      "user": "As a system administrator, I want to delete a workflow mapping from a scheme that is no longer used.",
      "ideal": "The API should delete the specified workflow mapping and return a confirmation of the deletion."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "GET",
      "operationId": "getWorkflow",
      "summary": "",
      "user": "As a project manager, I want to retrieve the workflow mapping for a specific workflow scheme to analyze its structure.",
      "ideal": "The API should return the details of the workflow mapping associated with the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "PUT",
      "operationId": "updateWorkflowMapping",
      "summary": "",
      "user": "As a project lead, I need to update the workflow mapping for a scheme to reflect our new processes.",
      "ideal": "The API should accept the updated workflow mapping details and confirm the successful update."
    },
    {
      "path": "/rest/api/3/workflowscheme/{workflowSchemeId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForWorkflowScheme",
      "summary": "",
      "user": "As a product owner, I want to see which projects are using a specific workflow scheme to manage resources effectively.",
      "ideal": "The API should return a list of projects that are currently using the specified workflow scheme."
    },
    {
      "path": "/rest/api/3/statuscategory",
      "method": "GET",
      "operationId": "getStatusCategories",
      "summary": "",
      "user": "As a project manager, I want to retrieve all status categories in Jira to better understand the workflow states available for my projects.",
      "ideal": "The response should return a list of all status categories, including their IDs, names, and descriptions, allowing me to categorize issues effectively."
    },
    {
      "path": "/rest/api/3/statuscategory/{idOrKey}",
      "method": "GET",
      "operationId": "getStatusCategory",
      "summary": "",
      "user": "As a developer, I need to fetch details of a specific status category by its ID or key to ensure I am using the correct category in my API calls.",
      "ideal": "The response should provide detailed information about the specified status category, including its ID, name, and any associated metadata."
    },
    {
      "path": "/rest/api/3/status",
      "method": "GET",
      "operationId": "getStatuses",
      "summary": "",
      "user": "A project manager looking to retrieve all available statuses for issues in Jira to ensure that the workflow is properly defined and to communicate with the team about the current state of tasks.",
      "ideal": "Returns a list of all statuses available in the Jira instance, including their IDs, names, and descriptions."
    },
    {
      "path": "/rest/api/3/status/{idOrName}",
      "method": "GET",
      "operationId": "getStatus",
      "summary": "",
      "user": "A developer needing to check the details of a specific status by its ID or name to understand its implications on issue transitions and workflow.",
      "ideal": "Returns detailed information about a specific status, including its ID, name, and any associated properties."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "DELETE",
      "operationId": "deleteWorkflowTransitionProperty",
      "summary": "",
      "user": "Admin user deleting a property from a workflow transition.",
      "ideal": "Successfully deleted the property from the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "GET",
      "operationId": "getWorkflowTransitionProperties",
      "summary": "",
      "user": "Project manager retrieving properties for a specific workflow transition.",
      "ideal": "Returned a list of properties associated with the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "POST",
      "operationId": "createWorkflowTransitionProperty",
      "summary": "",
      "user": "Developer adding a new property to a workflow transition.",
      "ideal": "Successfully created a new property for the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/transitions/123/properties",
      "method": "PUT",
      "operationId": "updateWorkflowTransitionProperty",
      "summary": "",
      "user": "Team lead updating an existing property for a workflow transition.",
      "ideal": "Successfully updated the property for the specified workflow transition."
    },
    {
      "path": "/rest/api/3/workflow/rule/config",
      "method": "GET",
      "operationId": "getWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "As a project manager, I want to retrieve the current workflow transition rule configurations for my project to ensure they align with our process requirements.",
      "ideal": "The API should return a list of all workflow transition rule configurations, including their IDs, names, and associated transitions."
    },
    {
      "path": "/rest/api/3/workflow/rule/config",
      "method": "PUT",
      "operationId": "updateWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "As a workflow administrator, I need to update the transition rule configurations to reflect the new approval process for issue transitions.",
      "ideal": "The API should accept the updated configuration data and return a success message along with the updated configuration details."
    },
    {
      "path": "/rest/api/3/workflow/rule/config/delete",
      "method": "PUT",
      "operationId": "deleteWorkflowTransitionRuleConfigurations",
      "summary": "",
      "user": "As a system administrator, I want to delete obsolete workflow transition rule configurations to maintain a clean and efficient workflow setup.",
      "ideal": "The API should successfully remove the specified transition rule configurations and return a confirmation message indicating the deletion was successful."
    },
    {
      "path": "/rest/api/3/workflow",
      "method": "GET",
      "operationId": "getAllWorkflows",
      "summary": "",
      "user": "As a project manager, I want to retrieve all workflows in the system to review their configurations and ensure they meet our project requirements.",
      "ideal": "The API should return a list of all workflows, including their IDs, names, and statuses."
    },
    {
      "path": "/rest/api/3/workflow",
      "method": "POST",
      "operationId": "createWorkflow",
      "summary": "",
      "user": "As a developer, I need to create a new workflow for our project to manage the issue lifecycle effectively.",
      "ideal": "The API should accept a workflow definition and return the created workflow's ID and details."
    },
    {
      "path": "/rest/api/3/workflow/search",
      "method": "GET",
      "operationId": "getWorkflowsPaginated",
      "summary": "",
      "user": "As a product owner, I want to search for workflows based on specific criteria to find the ones relevant to my team.",
      "ideal": "The API should return a paginated list of workflows matching the search criteria, including total count and next page link."
    },
    {
      "path": "/rest/api/3/workflow/{entityId}",
      "method": "DELETE",
      "operationId": "deleteInactiveWorkflow",
      "summary": "",
      "user": "As an administrator, I want to delete inactive workflows to keep the system clean and organized.",
      "ideal": "The API should confirm the deletion of the specified workflow and return a success message."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/project/{projectId}/issueTypeUsages",
      "method": "GET",
      "operationId": "getWorkflowProjectIssueTypeUsages",
      "summary": "",
      "user": "As a business analyst, I need to understand how a specific workflow is used across different issue types in a project.",
      "ideal": "The API should return a list of issue types that use the specified workflow in the given project."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/projectUsages",
      "method": "GET",
      "operationId": "getProjectUsagesForWorkflow",
      "summary": "",
      "user": "As a project manager, I want to see which projects are using a specific workflow to assess its impact.",
      "ideal": "The API should return a list of projects that are currently using the specified workflow."
    },
    {
      "path": "/rest/api/3/workflow/{workflowId}/workflowSchemes",
      "method": "GET",
      "operationId": "getWorkflowSchemeUsagesForWorkflow",
      "summary": "",
      "user": "As a system architect, I need to know which workflow schemes are associated with a specific workflow.",
      "ideal": "The API should return a list of workflow schemes linked to the specified workflow."
    },
    {
      "path": "/rest/api/3/workflows",
      "method": "POST",
      "operationId": "readWorkflows",
      "summary": "",
      "user": "As a developer, I want to read multiple workflows at once to analyze their configurations.",
      "ideal": "The API should accept a list of workflow IDs and return their details in a structured format."
    },
    {
      "path": "/rest/api/3/workflows/capabilities",
      "method": "GET",
      "operationId": "workflowCapabilities",
      "summary": "",
      "user": "As a product manager, I want to know the capabilities of the workflow system to plan future enhancements.",
      "ideal": "The API should return a list of capabilities supported by the workflow system."
    },
    {
      "path": "/rest/api/3/workflows/create",
      "method": "POST",
      "operationId": "createWorkflows",
      "summary": "",
      "user": "As a project lead, I want to create multiple workflows at once to streamline our setup process.",
      "ideal": "The API should accept a batch of workflow definitions and return the IDs of the created workflows."
    },
    {
      "path": "/rest/api/3/workflows/create/validation",
      "method": "POST",
      "operationId": "validateCreateWorkflows",
      "summary": "",
      "user": "As a developer, I need to validate my workflow definitions before creating them to avoid errors.",
      "ideal": "The API should return validation results indicating any issues with the workflow definitions."
    },
    {
      "path": "/rest/api/3/workflows/defaultEditor",
      "method": "GET",
      "operationId": "getDefaultEditor",
      "summary": "",
      "user": "As a UI designer, I want to know the default editor for workflows to ensure consistency in our design.",
      "ideal": "The API should return the default editor settings for workflows."
    },
    {
      "path": "/rest/api/3/workflows/preview",
      "method": "POST",
      "operationId": "readWorkflowPreviews",
      "summary": "",
      "user": "As a QA engineer, I want to preview workflows before they are published to ensure they function as intended.",
      "ideal": "The API should return a preview of the workflow based on the provided definition."
    },
    {
      "path": "/rest/api/3/workflows/search",
      "method": "GET",
      "operationId": "searchWorkflows",
      "summary": "",
      "user": "As a project manager, I want to search for workflows by name or description to find relevant ones quickly.",
      "ideal": "The API should return a list of workflows matching the search criteria with relevant details."
    },
    {
      "path": "/rest/api/3/workflows/update",
      "method": "POST",
      "operationId": "updateWorkflows",
      "summary": "",
      "user": "As a developer, I need to update existing workflows to reflect changes in our processes.",
      "ideal": "The API should accept updated workflow definitions and return the updated workflow details."
    },
    {
      "path": "/rest/api/3/workflows/update/validation",
      "method": "POST",
      "operationId": "validateUpdateWorkflows",
      "summary": "",
      "user": "As a project manager, I want to validate updates to workflows before applying them to avoid disruptions.",
      "ideal": "The API should return validation results for the updated workflow definitions."
    },
    {
      "path": "/rest/api/3/user/nav4-opt-property/themeColor",
      "method": "GET",
      "operationId": "getUserNavProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the current theme color property for the user."
    },
    {
      "path": "/rest/api/3/user/nav4-opt-property/themeColor",
      "method": "PUT",
      "operationId": "setUserNavProperty",
      "summary": "",
      "user": "user123",
      "ideal": "Update the theme color property for the user to '#FF5733'."
    }
  ]
}