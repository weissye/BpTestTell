{
  "gold": [
    {
      "path": "/indexes/myIndex/documents",
      "method": "GET",
      "operationId": "indexes.documents.list",
      "summary": "",
      "user": "User wants to retrieve all documents from the 'myIndex' index to display them on the frontend of their application.",
      "ideal": "Returns a list of documents in the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents",
      "method": "POST",
      "operationId": "indexes.documents.create",
      "summary": "",
      "user": "User needs to add a new document to the 'myIndex' index containing product details for an e-commerce application.",
      "ideal": "Successfully creates a new document in the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents",
      "method": "PUT",
      "operationId": "indexes.documents.upsert",
      "summary": "",
      "user": "User wants to update an existing document or create it if it doesn't exist in 'myIndex' to ensure the latest product information is available.",
      "ideal": "Updates the existing document or creates a new one in the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents",
      "method": "DELETE",
      "operationId": "indexes.documents.removeAll",
      "summary": "",
      "user": "User intends to clear all documents from the 'myIndex' index to reset the data for a new import.",
      "ideal": "Successfully removes all documents from the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents/fetch",
      "method": "POST",
      "operationId": "indexes.documents.fetch",
      "summary": "",
      "user": "User wants to fetch documents from an external source and import them into the 'myIndex' index for better search capabilities.",
      "ideal": "Successfully fetches and imports documents into the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents/delete-batch",
      "method": "POST",
      "operationId": "indexes.documents.removeBatch",
      "summary": "",
      "user": "User needs to delete multiple documents from the 'myIndex' index based on a list of document IDs to clean up outdated entries.",
      "ideal": "Successfully removes the specified batch of documents from the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents/delete",
      "method": "POST",
      "operationId": "indexes.documents.remove",
      "summary": "",
      "user": "User wants to delete a specific document from the 'myIndex' index using its unique identifier to remove outdated information.",
      "ideal": "Successfully removes the specified document from the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents/12345",
      "method": "GET",
      "operationId": "indexes.documents.get",
      "summary": "",
      "user": "User needs to retrieve a specific document with ID '12345' from the 'myIndex' index to display detailed information on the product page.",
      "ideal": "Returns the document with ID '12345' from the 'myIndex' index."
    },
    {
      "path": "/indexes/myIndex/documents/12345",
      "method": "DELETE",
      "operationId": "indexes.documents.removeOne",
      "summary": "",
      "user": "User wants to delete the document with ID '12345' from the 'myIndex' index as it is no longer relevant.",
      "ideal": "Successfully removes the document with ID '12345' from the 'myIndex' index."
    },
    {
      "path": "/dumps",
      "method": "POST",
      "operationId": "dumps.create",
      "summary": "",
      "user": "user123",
      "ideal": "Create a new dump of the Meilisearch database."
    },
    {
      "path": "/experimental-features",
      "method": "GET",
      "operationId": "experimental.get",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve the current experimental features enabled in the Meilisearch instance."
    },
    {
      "path": "/experimental-features",
      "method": "PATCH",
      "operationId": "experimental.update",
      "summary": "",
      "user": "developer",
      "ideal": "Update the experimental features configuration to enable or disable specific features."
    },
    {
      "path": "/metrics",
      "method": "GET",
      "operationId": "metrics.get",
      "summary": "",
      "user": "monitoring",
      "ideal": "Fetch the current metrics of the Meilisearch instance for performance monitoring."
    },
    {
      "path": "/indexes/myIndex/facet-search",
      "method": "POST",
      "operationId": "indexes.documents.facet.search",
      "summary": "",
      "user": "{\"facetName\":\"category\",\"facetValue\":\"electronics\",\"limit\":10}",
      "ideal": "{\"hits\":[{\"id\":\"1\",\"name\":\"Smartphone\",\"category\":\"electronics\"},{\"id\":\"2\",\"name\":\"Laptop\",\"category\":\"electronics\"}],\"limit\":10,\"estimatedTotalHits\":50}"
    },
    {
      "path": "/health",
      "method": "GET",
      "operationId": "health.check",
      "summary": "",
      "user": "A developer checking the health status of the Meilisearch server to ensure it is running properly before proceeding with further API calls.",
      "ideal": "The server should return a 200 OK status with a JSON response indicating that the service is healthy."
    },
    {
      "path": "/indexes",
      "method": "GET",
      "operationId": "indexes.list",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all indexes available in the Meilisearch instance."
    },
    {
      "path": "/indexes",
      "method": "POST",
      "operationId": "indexes.create",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new index with a specified UID and optional settings."
    },
    {
      "path": "/indexes/my_index",
      "method": "GET",
      "operationId": "indexes.get",
      "summary": "",
      "user": "admin",
      "ideal": "Fetch details of the index with UID 'my_index'."
    },
    {
      "path": "/indexes/my_index",
      "method": "PATCH",
      "operationId": "indexes.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update settings or schema of the index with UID 'my_index'."
    },
    {
      "path": "/indexes/my_index",
      "method": "DELETE",
      "operationId": "indexes.remove",
      "summary": "",
      "user": "admin",
      "ideal": "Remove the index with UID 'my_index' from the Meilisearch instance."
    },
    {
      "path": "/swap-indexes",
      "method": "POST",
      "operationId": "indexes.swap",
      "summary": "",
      "user": "admin",
      "ideal": "Swap the positions of two indexes in the Meilisearch instance."
    },
    {
      "path": "/keys",
      "method": "GET",
      "operationId": "keys.list",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all API keys."
    },
    {
      "path": "/keys",
      "method": "POST",
      "operationId": "keys.create",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new API key with specified permissions."
    },
    {
      "path": "/keys/{uid_or_key}",
      "method": "GET",
      "operationId": "keys.get",
      "summary": "",
      "user": "admin",
      "ideal": "Fetch details of a specific API key using its UID or key."
    },
    {
      "path": "/keys/{uid_or_key}",
      "method": "DELETE",
      "operationId": "keys.delete",
      "summary": "",
      "user": "admin",
      "ideal": "Delete a specific API key using its UID or key."
    },
    {
      "path": "/keys/{uid_or_key}",
      "method": "PATCH",
      "operationId": "keys.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update the permissions or details of a specific API key."
    },
    {
      "path": "/indexes/my_index/search",
      "method": "GET",
      "operationId": "indexes.documents.searchGet",
      "summary": "",
      "user": "A user wants to retrieve documents from the 'my_index' index based on a specific query. They are looking for documents that contain the keyword 'AI' and want to see the top 10 results.",
      "ideal": "The API should return a JSON response containing the top 10 documents that match the query 'AI', along with their metadata such as title, description, and relevance score."
    },
    {
      "path": "/indexes/my_index/search",
      "method": "POST",
      "operationId": "indexes.documents.search",
      "summary": "",
      "user": "A developer is implementing a search feature in their application. They need to send a POST request to search for documents in 'my_index' with the query 'machine learning' and want to filter results by a specific field.",
      "ideal": "The API should process the request and return a JSON response with the search results, including the filtered documents and any relevant metadata."
    },
    {
      "path": "/indexes/my_index/facet-search",
      "method": "POST",
      "operationId": "indexes.documents.facet.search",
      "summary": "",
      "user": "An analyst is interested in performing a facet search on 'my_index' to find documents categorized under 'technology' and wants to see the distribution of results across different subcategories.",
      "ideal": "The API should return a JSON response that includes the facet counts for each subcategory under 'technology', along with the documents that match the search criteria."
    },
    {
      "path": "/multi-search",
      "method": "POST",
      "operationId": "multi_search",
      "summary": "",
      "user": "A product manager wants to perform multiple searches across different indexes in one request. They need to search for 'data science' in 'index1' and 'cloud computing' in 'index2' simultaneously.",
      "ideal": "The API should return a consolidated JSON response containing the results for both searches, clearly separated by index, along with relevant metadata for each result."
    },
    {
      "path": "/indexes/myIndex/settings",
      "method": "GET",
      "operationId": "indexes.settings.get",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve the current settings for the index 'myIndex'."
    },
    {
      "path": "/indexes/myIndex/settings",
      "method": "PATCH",
      "operationId": "indexes.settings.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update the settings for the index 'myIndex' to improve search relevance."
    },
    {
      "path": "/indexes/myIndex/settings",
      "method": "DELETE",
      "operationId": "indexes.settings.reset",
      "summary": "",
      "user": "admin",
      "ideal": "Reset the settings for the index 'myIndex' to default values."
    },
    {
      "path": "/indexes/myIndex/settings/synonyms",
      "method": "GET",
      "operationId": "indexes.settings.synonyms.get",
      "summary": "",
      "user": "editor",
      "ideal": "Get the list of synonyms configured for the index 'myIndex'."
    },
    {
      "path": "/indexes/myIndex/settings/synonyms",
      "method": "PUT",
      "operationId": "indexes.settings.synonyms.update",
      "summary": "",
      "user": "editor",
      "ideal": "Add new synonyms to the index 'myIndex' to enhance search results."
    },
    {
      "path": "/indexes/myIndex/settings/synonyms",
      "method": "DELETE",
      "operationId": "indexes.settings.synonyms.reset",
      "summary": "",
      "user": "editor",
      "ideal": "Remove all synonyms from the index 'myIndex'."
    },
    {
      "path": "/indexes/myIndex/settings/sortable-attributes",
      "method": "GET",
      "operationId": "indexes.settings.sortable-attributes.get",
      "summary": "",
      "user": "admin",
      "ideal": "Fetch the sortable attributes for the index 'myIndex'."
    },
    {
      "path": "/indexes/myIndex/settings/sortable-attributes",
      "method": "PUT",
      "operationId": "indexes.settings.sortable-attributes.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update the sortable attributes for the index 'myIndex'."
    },
    {
      "path": "/indexes/myIndex/settings/sortable-attributes",
      "method": "DELETE",
      "operationId": "indexes.settings.sortable-attributes.reset",
      "summary": "",
      "user": "admin",
      "ideal": "Reset the sortable attributes for the index 'myIndex' to defaults."
    },
    {
      "path": "/indexes/myIndex/settings/ranking-rules",
      "method": "GET",
      "operationId": "indexes.settings.rankingRules.get",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve the ranking rules for the index 'myIndex'."
    },
    {
      "path": "/indexes/myIndex/settings/ranking-rules",
      "method": "PUT",
      "operationId": "indexes.settings.rankingRules.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update the ranking rules for the index 'myIndex' to improve search results."
    },
    {
      "path": "/indexes/myIndex/settings/ranking-rules",
      "method": "DELETE",
      "operationId": "indexes.settings.rankingRules.reset",
      "summary": "",
      "user": "admin",
      "ideal": "Reset the ranking rules for the index 'myIndex' to default settings."
    },
    {
      "path": "/snapshots",
      "method": "POST",
      "operationId": "snapshots.create",
      "summary": "",
      "user": "User wants to create a snapshot of the current state of the Meilisearch index to ensure data persistence and recovery options in case of failures.",
      "ideal": "The API should return a success message indicating that the snapshot has been created successfully, along with a unique identifier for the snapshot."
    },
    {
      "path": "/indexes/my_index/stats",
      "method": "GET",
      "operationId": "indexes.stats.get",
      "summary": "",
      "user": "Alice is a data engineer who wants to monitor the performance of the 'my_index' index in Meilisearch. She needs to check the number of documents, the number of searchable documents, and the last update timestamp to ensure everything is functioning correctly.",
      "ideal": "Returns the statistics of the 'my_index' index, including the number of documents, number of searchable documents, and the last update timestamp."
    },
    {
      "path": "/stats",
      "method": "GET",
      "operationId": "stats.list",
      "summary": "",
      "user": "Bob is a system administrator responsible for overseeing the overall health of the Meilisearch instance. He needs to retrieve general statistics about the server's performance, including the number of indexes, total documents, and the average response time for queries.",
      "ideal": "Returns a summary of the server's statistics, including the total number of indexes, total documents, and average response time for queries."
    },
    {
      "path": "/metrics",
      "method": "GET",
      "operationId": "metrics.get",
      "summary": "",
      "user": "Charlie is a backend developer who is integrating Meilisearch into an application. He wants to gather metrics for performance monitoring, such as query latency and error rates, to optimize the search experience for users.",
      "ideal": "Returns detailed metrics related to query performance, including latency, error rates, and other relevant performance indicators."
    },
    {
      "path": "/tasks",
      "method": "GET",
      "operationId": "tasks.list",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all tasks currently in the system."
    },
    {
      "path": "/tasks/12345",
      "method": "GET",
      "operationId": "tasks.get",
      "summary": "",
      "user": "admin",
      "ideal": "Get details of the task with UID 12345."
    },
    {
      "path": "/tasks",
      "method": "DELETE",
      "operationId": "tasks.delete",
      "summary": "",
      "user": "admin",
      "ideal": "Delete a specific task from the system."
    },
    {
      "path": "/tasks/cancel",
      "method": "POST",
      "operationId": "tasks.cancel",
      "summary": "",
      "user": "admin",
      "ideal": "Cancel a task that is currently in progress."
    },
    {
      "path": "/version",
      "method": "GET",
      "operationId": "version.get",
      "summary": "",
      "user": "A developer wants to check the current version of the Meilisearch server to ensure compatibility with their application. They send a GET request to the /version endpoint to retrieve the version information.",
      "ideal": "The response should return a JSON object containing the version number of the Meilisearch server, for example: {\"version\":\"1.7.0\"}."
    }
  ]
}