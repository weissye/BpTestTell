{
  "gold": [
    {
      "path": "/indexes/myIndex/documents",
      "method": "GET",
      "operationId": "indexes.documents.list",
      "summary": "",
      "user": "User wants to retrieve all documents from the 'myIndex' index to display them on the dashboard.",
      "ideal": "The API should return a list of documents in JSON format, including their IDs and content."
    },
    {
      "path": "/indexes/myIndex/documents",
      "method": "POST",
      "operationId": "indexes.documents.create",
      "summary": "",
      "user": "User needs to add a new document to 'myIndex' with specific fields such as title and description.",
      "ideal": "The API should accept a JSON object representing the new document and return the created document with its ID."
    },
    {
      "path": "/indexes/myIndex/documents",
      "method": "PUT",
      "operationId": "indexes.documents.upsert",
      "summary": "",
      "user": "User wants to update an existing document or create it if it doesn't exist in 'myIndex'.",
      "ideal": "The API should accept a JSON object and return the updated or created document with its ID."
    },
    {
      "path": "/indexes/myIndex/documents",
      "method": "DELETE",
      "operationId": "indexes.documents.removeAll",
      "summary": "",
      "user": "User intends to remove all documents from 'myIndex' to reset the index for new data.",
      "ideal": "The API should confirm the deletion of all documents and return a success message."
    },
    {
      "path": "/indexes/myIndex/documents/fetch",
      "method": "POST",
      "operationId": "indexes.documents.fetch",
      "summary": "",
      "user": "User wants to fetch documents from an external source and add them to 'myIndex'.",
      "ideal": "The API should accept a source URL and return the fetched documents in JSON format."
    },
    {
      "path": "/indexes/myIndex/documents/delete-batch",
      "method": "POST",
      "operationId": "indexes.documents.removeBatch",
      "summary": "",
      "user": "User needs to delete multiple documents from 'myIndex' using their IDs.",
      "ideal": "The API should accept an array of document IDs and return a confirmation of the deleted documents."
    },
    {
      "path": "/indexes/myIndex/documents/delete",
      "method": "POST",
      "operationId": "indexes.documents.remove",
      "summary": "",
      "user": "User wants to delete a specific document from 'myIndex' by providing its ID.",
      "ideal": "The API should confirm the deletion of the document and return a success message."
    },
    {
      "path": "/indexes/myIndex/documents/123",
      "method": "GET",
      "operationId": "indexes.documents.get",
      "summary": "",
      "user": "User needs to retrieve a specific document with ID '123' from 'myIndex' for review.",
      "ideal": "The API should return the document with ID '123' in JSON format, including all its fields."
    },
    {
      "path": "/indexes/myIndex/documents/123",
      "method": "DELETE",
      "operationId": "indexes.documents.removeOne",
      "summary": "",
      "user": "User wants to delete the document with ID '123' from 'myIndex' as it is no longer needed.",
      "ideal": "The API should confirm the deletion of the document with ID '123' and return a success message."
    },
    {
      "path": "/dumps",
      "method": "POST",
      "operationId": "dumps.create",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new dump of the current Meilisearch database."
    },
    {
      "path": "/experimental-features",
      "method": "GET",
      "operationId": "experimental.get",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve the current experimental features available in Meilisearch."
    },
    {
      "path": "/experimental-features",
      "method": "PATCH",
      "operationId": "experimental.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update the settings for experimental features in Meilisearch."
    },
    {
      "path": "/metrics",
      "method": "GET",
      "operationId": "metrics.get",
      "summary": "",
      "user": "admin",
      "ideal": "Fetch the current metrics for Meilisearch performance monitoring."
    },
    {
      "path": "/indexes/myIndex/facet-search",
      "method": "POST",
      "operationId": "indexes.documents.facet.search",
      "summary": "",
      "user": "user123",
      "ideal": "Search for facets in the 'myIndex' index using specific criteria."
    },
    {
      "path": "/health",
      "method": "GET",
      "operationId": "health.check",
      "summary": "",
      "user": "As a developer, I want to check the health status of the Meilisearch server to ensure that it is running properly before I start making queries.",
      "ideal": "The response should indicate whether the server is healthy, typically returning a status code of 200 with a message like 'Healthy'."
    },
    {
      "path": "/indexes",
      "method": "GET",
      "operationId": "indexes.list",
      "summary": "",
      "user": "As a developer, I want to retrieve a list of all indexes in my Meilisearch instance so that I can manage them effectively.",
      "ideal": "The response should include an array of index objects, each containing the indexUid, name, and other relevant metadata."
    },
    {
      "path": "/indexes",
      "method": "POST",
      "operationId": "indexes.create",
      "summary": "",
      "user": "As a developer, I want to create a new index in Meilisearch to store my documents for efficient searching.",
      "ideal": "The response should confirm the creation of the index with its unique indexUid and any default settings applied."
    },
    {
      "path": "/indexes/{indexUid}",
      "method": "GET",
      "operationId": "indexes.get",
      "summary": "",
      "user": "As a developer, I want to retrieve details about a specific index by its UID to understand its configuration and status.",
      "ideal": "The response should provide detailed information about the index, including its uid, name, and settings."
    },
    {
      "path": "/indexes/{indexUid}",
      "method": "PATCH",
      "operationId": "indexes.update",
      "summary": "",
      "user": "As a developer, I want to update the settings of an existing index to optimize its performance for my search queries.",
      "ideal": "The response should confirm the successful update of the index settings and return the updated index object."
    },
    {
      "path": "/indexes/{indexUid}",
      "method": "DELETE",
      "operationId": "indexes.remove",
      "summary": "",
      "user": "As a developer, I want to delete an index that is no longer needed to keep my Meilisearch instance clean and organized.",
      "ideal": "The response should confirm the deletion of the index and ensure that it is no longer accessible."
    },
    {
      "path": "/swap-indexes",
      "method": "POST",
      "operationId": "indexes.swap",
      "summary": "",
      "user": "As a developer, I want to swap two indexes to quickly change the active index for my search queries without downtime.",
      "ideal": "The response should confirm the successful swap of the indexes and provide the new active index information."
    },
    {
      "path": "/keys",
      "method": "GET",
      "operationId": "keys.list",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all API keys."
    },
    {
      "path": "/keys",
      "method": "POST",
      "operationId": "keys.create",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new API key with specified permissions."
    },
    {
      "path": "/keys/{uid_or_key}",
      "method": "GET",
      "operationId": "keys.get",
      "summary": "",
      "user": "admin",
      "ideal": "Fetch details of a specific API key using its UID or key."
    },
    {
      "path": "/keys/{uid_or_key}",
      "method": "DELETE",
      "operationId": "keys.delete",
      "summary": "",
      "user": "admin",
      "ideal": "Delete a specific API key using its UID or key."
    },
    {
      "path": "/keys/{uid_or_key}",
      "method": "PATCH",
      "operationId": "keys.update",
      "summary": "",
      "user": "admin",
      "ideal": "Update the permissions of a specific API key using its UID or key."
    },
    {
      "path": "/indexes/myIndex/search",
      "method": "GET",
      "operationId": "indexes.documents.searchGet",
      "summary": "",
      "user": "A user wants to retrieve documents from the 'myIndex' index based on a specific query. They are looking for documents that contain the keyword 'AI' in their content.",
      "ideal": "The API should return a list of documents that match the search criteria, including relevant metadata such as document IDs and scores."
    },
    {
      "path": "/indexes/myIndex/search",
      "method": "POST",
      "operationId": "indexes.documents.search",
      "summary": "",
      "user": "A developer is implementing a search feature in their application. They need to send a POST request to the 'myIndex' index with a search query to retrieve documents that match the user's input.",
      "ideal": "The API should process the search query and return a JSON response containing the matching documents along with their attributes."
    },
    {
      "path": "/indexes/myIndex/facet-search",
      "method": "POST",
      "operationId": "indexes.documents.facet.search",
      "summary": "",
      "user": "An e-commerce platform wants to allow users to filter products by categories and price ranges. They send a POST request to the 'myIndex' index to perform a facet search.",
      "ideal": "The API should return the filtered results based on the specified facets, including counts for each facet value."
    },
    {
      "path": "/multi-search",
      "method": "POST",
      "operationId": "multi_search",
      "summary": "",
      "user": "A data analyst needs to perform multiple searches across different indexes simultaneously to gather insights. They send a POST request to the multi-search endpoint with their queries.",
      "ideal": "The API should return a consolidated response containing the results of each search query, allowing the analyst to compare data across indexes."
    },
    {
      "path": "/indexes/myIndex/settings",
      "method": "GET",
      "operationId": "indexes.settings.get",
      "summary": "",
      "user": "User requests the current settings for the index 'myIndex' to review its configuration.",
      "ideal": "Returns the current settings of the index including sortable attributes, ranking rules, and more."
    },
    {
      "path": "/indexes/myIndex/settings/synonyms",
      "method": "GET",
      "operationId": "indexes.settings.synonyms.get",
      "summary": "",
      "user": "User wants to check the synonyms configured for the index 'myIndex'.",
      "ideal": "Returns a list of synonyms currently set for the index."
    },
    {
      "path": "/indexes/myIndex/settings/sortable-attributes",
      "method": "GET",
      "operationId": "indexes.settings.sortable-attributes.get",
      "summary": "",
      "user": "User checks which attributes are sortable in the index 'myIndex'.",
      "ideal": "Returns the attributes that can be used for sorting in search queries."
    },
    {
      "path": "/indexes/myIndex/settings/ranking-rules",
      "method": "GET",
      "operationId": "indexes.settings.rankingRules.get",
      "summary": "",
      "user": "User wants to understand how results are ranked for the index 'myIndex'.",
      "ideal": "Returns the ranking rules applied to the index for search results."
    },
    {
      "path": "/indexes/myIndex/settings/typo-tolerance",
      "method": "GET",
      "operationId": "indexes.settings.typoTolerance.get",
      "summary": "",
      "user": "User is interested in the typo tolerance settings for the index 'myIndex'.",
      "ideal": "Returns the current typo tolerance settings for the index."
    },
    {
      "path": "/indexes/myIndex/settings/pagination",
      "method": "GET",
      "operationId": "indexes.settings.pagination.get",
      "summary": "",
      "user": "User checks the pagination settings for the index 'myIndex'.",
      "ideal": "Returns the pagination settings, including the number of results per page."
    },
    {
      "path": "/indexes/myIndex/settings/faceting",
      "method": "GET",
      "operationId": "indexes.settings.faceting.get",
      "summary": "",
      "user": "User wants to see if faceting is enabled for the index 'myIndex'.",
      "ideal": "Returns the current faceting settings for the index."
    },
    {
      "path": "/indexes/myIndex/settings/filterable-attributes",
      "method": "GET",
      "operationId": "indexes.settings.filterableAttributes.get",
      "summary": "",
      "user": "User checks which attributes can be used for filtering in the index 'myIndex'.",
      "ideal": "Returns the list of filterable attributes for the index."
    },
    {
      "path": "/indexes/myIndex/settings/distinct-attribute",
      "method": "GET",
      "operationId": "indexes.settings.distinctAttribute.get",
      "summary": "",
      "user": "User wants to know the distinct attribute setting for the index 'myIndex'.",
      "ideal": "Returns the distinct attribute currently set for the index."
    },
    {
      "path": "/indexes/myIndex/settings/searchable-attributes",
      "method": "GET",
      "operationId": "indexes.settings.searchableAttributes.get",
      "summary": "",
      "user": "User checks which attributes are searchable in the index 'myIndex'.",
      "ideal": "Returns the list of searchable attributes for the index."
    },
    {
      "path": "/snapshots",
      "method": "POST",
      "operationId": "snapshots.create",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new snapshot of the current state of the Meilisearch index."
    },
    {
      "path": "/indexes/myIndex/stats",
      "method": "GET",
      "operationId": "indexes.stats.get",
      "summary": "",
      "user": "Alice is a developer working on a search application that uses Meilisearch. She wants to monitor the performance of her index 'myIndex' and check its statistics to optimize search queries.",
      "ideal": "The response should include the number of documents, number of searchable documents, and the last update timestamp for 'myIndex'."
    },
    {
      "path": "/stats",
      "method": "GET",
      "operationId": "stats.list",
      "summary": "",
      "user": "Bob is a system administrator responsible for maintaining the Meilisearch server. He needs to retrieve overall statistics to ensure the server is running efficiently and to identify any potential issues.",
      "ideal": "The response should provide total number of indexes, total number of documents across all indexes, and the server uptime."
    },
    {
      "path": "/metrics",
      "method": "GET",
      "operationId": "metrics.get",
      "summary": "",
      "user": "Charlie is a data analyst who wants to gather metrics on search performance to analyze user behavior and improve the search experience. He needs detailed metrics from the Meilisearch API.",
      "ideal": "The response should include metrics such as search query count, average response time, and error rates for the last 24 hours."
    },
    {
      "path": "/tasks",
      "method": "GET",
      "operationId": "tasks.list",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all tasks currently in the system."
    },
    {
      "path": "/tasks/12345",
      "method": "GET",
      "operationId": "tasks.get",
      "summary": "",
      "user": "admin",
      "ideal": "Get details of the task with UID 12345."
    },
    {
      "path": "/tasks",
      "method": "DELETE",
      "operationId": "tasks.delete",
      "summary": "",
      "user": "admin",
      "ideal": "Delete a specific task from the system."
    },
    {
      "path": "/tasks/cancel",
      "method": "POST",
      "operationId": "tasks.cancel",
      "summary": "",
      "user": "admin",
      "ideal": "Cancel a task that is currently in progress."
    },
    {
      "path": "/version",
      "method": "GET",
      "operationId": "version.get",
      "summary": "",
      "user": "As a developer, I want to check the current version of the Meilisearch API I'm using to ensure compatibility with my application and to verify if I need to update to a newer version.",
      "ideal": "The response should return the current version of the Meilisearch API in a JSON format, such as {\"version\":\"1.7.0\"}."
    }
  ]
}