{
  "gold": [
    {
      "path": "/fetch_api_key",
      "method": "POST",
      "operationId": "fetch-api-key",
      "summary": "",
      "user": "user@example.com",
      "ideal": "Returns a new API key for the user based on their credentials."
    },
    {
      "path": "/dev_fetch_api_key",
      "method": "POST",
      "operationId": "dev-fetch-api-key",
      "summary": "",
      "user": "dev_user@example.com",
      "ideal": "Returns a development API key for testing purposes."
    },
    {
      "path": "/get_stream_id",
      "method": "GET",
      "operationId": "get-stream-id",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve the ID of a specific stream."
    },
    {
      "path": "/default_streams",
      "method": "POST",
      "operationId": "add-default-stream",
      "summary": "",
      "user": "user456",
      "ideal": "Add a stream to the user's default streams."
    },
    {
      "path": "/default_streams",
      "method": "DELETE",
      "operationId": "remove-default-stream",
      "summary": "",
      "user": "user789",
      "ideal": "Remove a stream from the user's default streams."
    },
    {
      "path": "/users/me/{stream_id}/topics",
      "method": "GET",
      "operationId": "get-stream-topics",
      "summary": "",
      "user": "user101",
      "ideal": "Get the topics in a specific stream."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "GET",
      "operationId": "get-subscriptions",
      "summary": "",
      "user": "user202",
      "ideal": "Retrieve the list of subscriptions for the user."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "POST",
      "operationId": "subscribe",
      "summary": "",
      "user": "user303",
      "ideal": "Subscribe the user to a new stream."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "PATCH",
      "operationId": "update-subscriptions",
      "summary": "",
      "user": "user404",
      "ideal": "Update the user's existing subscriptions."
    },
    {
      "path": "/users/me/subscriptions",
      "method": "DELETE",
      "operationId": "unsubscribe",
      "summary": "",
      "user": "user505",
      "ideal": "Unsubscribe the user from a stream."
    },
    {
      "path": "/users/me/subscriptions/muted_topics",
      "method": "PATCH",
      "operationId": "mute-topic",
      "summary": "",
      "user": "user606",
      "ideal": "Mute a specific topic in a subscription."
    },
    {
      "path": "/user_topics",
      "method": "POST",
      "operationId": "update-user-topic",
      "summary": "",
      "user": "user707",
      "ideal": "Update the user's topic settings."
    },
    {
      "path": "/users/{user_id}/subscriptions/{stream_id}",
      "method": "GET",
      "operationId": "get-subscription-status",
      "summary": "",
      "user": "user808",
      "ideal": "Check the subscription status of a user for a specific stream."
    },
    {
      "path": "/users/me/subscriptions/properties",
      "method": "POST",
      "operationId": "update-subscription-settings",
      "summary": "",
      "user": "user909",
      "ideal": "Update settings for the user's subscriptions."
    },
    {
      "path": "/streams/{stream_id}/members",
      "method": "GET",
      "operationId": "get-subscribers",
      "summary": "",
      "user": "user111",
      "ideal": "Get the list of subscribers for a specific stream."
    },
    {
      "path": "/streams",
      "method": "GET",
      "operationId": "get-streams",
      "summary": "",
      "user": "user222",
      "ideal": "Retrieve all available streams."
    },
    {
      "path": "/streams/{stream_id}",
      "method": "GET",
      "operationId": "get-stream-by-id",
      "summary": "",
      "user": "user333",
      "ideal": "Get details of a specific stream by its ID."
    },
    {
      "path": "/streams/{stream_id}",
      "method": "DELETE",
      "operationId": "archive-stream",
      "summary": "",
      "user": "user444",
      "ideal": "Archive a specific stream."
    },
    {
      "path": "/streams/{stream_id}",
      "method": "PATCH",
      "operationId": "update-stream",
      "summary": "",
      "user": "user555",
      "ideal": "Update the details of a specific stream."
    },
    {
      "path": "/streams/{stream_id}/email_address",
      "method": "GET",
      "operationId": "get-stream-email-address",
      "summary": "",
      "user": "user666",
      "ideal": "Retrieve the email address associated with a stream."
    },
    {
      "path": "/streams/{stream_id}/delete_topic",
      "method": "POST",
      "operationId": "delete-topic",
      "summary": "",
      "user": "user777",
      "ideal": "Delete a specific topic from a stream."
    },
    {
      "path": "/channels/create",
      "method": "POST",
      "operationId": "create-channel",
      "summary": "",
      "user": "user888",
      "ideal": "Create a new channel."
    },
    {
      "path": "/channel_folders/create",
      "method": "POST",
      "operationId": "create-channel-folder",
      "summary": "",
      "user": "user999",
      "ideal": "Create a new folder for channels."
    },
    {
      "path": "/channel_folders",
      "method": "GET",
      "operationId": "get-channel-folders",
      "summary": "",
      "user": "user000",
      "ideal": "Retrieve all channel folders."
    },
    {
      "path": "/channel_folders",
      "method": "PATCH",
      "operationId": "patch-channel-folders",
      "summary": "",
      "user": "user1234",
      "ideal": "Update multiple channel folders."
    },
    {
      "path": "/channel_folders/{channel_folder_id}",
      "method": "PATCH",
      "operationId": "update-channel-folder",
      "summary": "",
      "user": "user5678",
      "ideal": "Update a specific channel folder."
    },
    {
      "path": "/calls/bigbluebutton/create",
      "method": "GET",
      "operationId": "create-big-blue-button-video-call",
      "summary": "",
      "user": "user91011",
      "ideal": "Create a Big Blue Button video call."
    },
    {
      "path": "/drafts",
      "method": "GET",
      "operationId": "get-drafts",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of all drafts created by the user."
    },
    {
      "path": "/drafts",
      "method": "POST",
      "operationId": "create-drafts",
      "summary": "",
      "user": "user456",
      "ideal": "Create a new draft with the provided content and title."
    },
    {
      "path": "/drafts/1",
      "method": "PATCH",
      "operationId": "edit-draft",
      "summary": "",
      "user": "user789",
      "ideal": "Edit the draft with ID 1 to update its content."
    },
    {
      "path": "/drafts/2",
      "method": "DELETE",
      "operationId": "delete-draft",
      "summary": "",
      "user": "user101",
      "ideal": "Delete the draft with ID 2 from the user's drafts."
    },
    {
      "path": "/saved_snippets",
      "method": "GET",
      "operationId": "get-saved-snippets",
      "summary": "",
      "user": "user202",
      "ideal": "Retrieve a list of all saved snippets for the user."
    },
    {
      "path": "/saved_snippets",
      "method": "POST",
      "operationId": "create-saved-snippet",
      "summary": "",
      "user": "user303",
      "ideal": "Create a new saved snippet with the provided content."
    },
    {
      "path": "/saved_snippets/1",
      "method": "PATCH",
      "operationId": "edit-saved-snippet",
      "summary": "",
      "user": "user404",
      "ideal": "Edit the saved snippet with ID 1 to update its content."
    },
    {
      "path": "/saved_snippets/2",
      "method": "DELETE",
      "operationId": "delete-saved-snippet",
      "summary": "",
      "user": "user505",
      "ideal": "Delete the saved snippet with ID 2 from the user's saved snippets."
    },
    {
      "path": "/invites",
      "method": "GET",
      "operationId": "get-invites",
      "summary": "",
      "user": "Alice wants to check the current invites sent to users in her Zulip organization to manage them effectively.",
      "ideal": "Returns a list of all invites currently sent, including their status and recipient details."
    },
    {
      "path": "/invites",
      "method": "POST",
      "operationId": "send-invites",
      "summary": "",
      "user": "Bob needs to invite new team members to his Zulip organization, so he prepares a list of email addresses to send invites.",
      "ideal": "Successfully sends invites to the specified email addresses and returns a confirmation message."
    },
    {
      "path": "/invites/multiuse",
      "method": "POST",
      "operationId": "create-invite-link",
      "summary": "",
      "user": "Charlie wants to create a multi-use invite link for a workshop, allowing multiple participants to join easily.",
      "ideal": "Generates a multi-use invite link and returns the link along with its expiration details."
    },
    {
      "path": "/invites/{invite_id}",
      "method": "DELETE",
      "operationId": "revoke-email-invite",
      "summary": "",
      "user": "Diana realizes that she sent an invite to the wrong email address and wants to revoke it.",
      "ideal": "Successfully revokes the specified email invite and returns a confirmation of the action."
    },
    {
      "path": "/invites/multiuse/{invite_id}",
      "method": "DELETE",
      "operationId": "revoke-invite-link",
      "summary": "",
      "user": "Ethan needs to disable a multi-use invite link that he created earlier to prevent further access.",
      "ideal": "Successfully revokes the specified multi-use invite link and confirms the revocation."
    },
    {
      "path": "/invites/{invite_id}/resend",
      "method": "POST",
      "operationId": "resend-email-invite",
      "summary": "",
      "user": "Fiona wants to resend an invite to a colleague who didn't receive the original email.",
      "ideal": "Successfully resends the email invite to the specified address and returns a confirmation message."
    },
    {
      "path": "/mark_all_as_read",
      "method": "POST",
      "operationId": "mark-all-as-read",
      "summary": "",
      "user": "user123",
      "ideal": "Marks all messages as read for the user."
    },
    {
      "path": "/mark_stream_as_read",
      "method": "POST",
      "operationId": "mark-stream-as-read",
      "summary": "",
      "user": "user456",
      "ideal": "Marks all messages in the specified stream as read."
    },
    {
      "path": "/mark_topic_as_read",
      "method": "POST",
      "operationId": "mark-topic-as-read",
      "summary": "",
      "user": "user789",
      "ideal": "Marks all messages in the specified topic as read."
    },
    {
      "path": "/messages",
      "method": "GET",
      "operationId": "get-messages",
      "summary": "",
      "user": "user101",
      "ideal": "Retrieves a list of messages for the user."
    },
    {
      "path": "/messages",
      "method": "POST",
      "operationId": "send-message",
      "summary": "",
      "user": "user202",
      "ideal": "Sends a new message to a specified stream or user."
    },
    {
      "path": "/messages/{message_id}/history",
      "method": "GET",
      "operationId": "get-message-history",
      "summary": "",
      "user": "user303",
      "ideal": "Retrieves the edit history of a specific message."
    },
    {
      "path": "/messages/flags",
      "method": "POST",
      "operationId": "update-message-flags",
      "summary": "",
      "user": "user404",
      "ideal": "Updates flags for specified messages."
    },
    {
      "path": "/messages/flags/narrow",
      "method": "POST",
      "operationId": "update-message-flags-for-narrow",
      "summary": "",
      "user": "user505",
      "ideal": "Updates flags for messages in a narrow view."
    },
    {
      "path": "/messages/render",
      "method": "POST",
      "operationId": "render-message",
      "summary": "",
      "user": "user606",
      "ideal": "Renders a message's content for display."
    },
    {
      "path": "/messages/{message_id}/reactions",
      "method": "POST",
      "operationId": "add-reaction",
      "summary": "",
      "user": "user707",
      "ideal": "Adds a reaction to a specific message."
    },
    {
      "path": "/messages/{message_id}/reactions",
      "method": "DELETE",
      "operationId": "remove-reaction",
      "summary": "",
      "user": "user808",
      "ideal": "Removes a reaction from a specific message."
    },
    {
      "path": "/messages/{message_id}/read_receipts",
      "method": "GET",
      "operationId": "get-read-receipts",
      "summary": "",
      "user": "user909",
      "ideal": "Retrieves read receipts for a specific message."
    },
    {
      "path": "/messages/matches_narrow",
      "method": "GET",
      "operationId": "check-messages-match-narrow",
      "summary": "",
      "user": "user010",
      "ideal": "Checks if messages match the specified narrow criteria."
    },
    {
      "path": "/messages/{message_id}",
      "method": "GET",
      "operationId": "get-message",
      "summary": "",
      "user": "user111",
      "ideal": "Retrieves a specific message by its ID."
    },
    {
      "path": "/messages/{message_id}",
      "method": "PATCH",
      "operationId": "update-message",
      "summary": "",
      "user": "user222",
      "ideal": "Updates the content of a specific message."
    },
    {
      "path": "/messages/{message_id}",
      "method": "DELETE",
      "operationId": "delete-message",
      "summary": "",
      "user": "user333",
      "ideal": "Deletes a specific message by its ID."
    },
    {
      "path": "/messages/{message_id}/report",
      "method": "POST",
      "operationId": "report-message",
      "summary": "",
      "user": "user444",
      "ideal": "Reports a specific message for review."
    },
    {
      "path": "/user_uploads",
      "method": "POST",
      "operationId": "upload-file",
      "summary": "",
      "user": "user555",
      "ideal": "Uploads a file to the user's account."
    },
    {
      "path": "/user_uploads/{realm_id_str}/{filename}",
      "method": "GET",
      "operationId": "get-file-temporary-url",
      "summary": "",
      "user": "user666",
      "ideal": "Retrieves a temporary URL for a specific uploaded file."
    },
    {
      "path": "/mobile_push/test_notification",
      "method": "POST",
      "operationId": "test-notify",
      "summary": "",
      "user": "user123",
      "ideal": "Send a test notification to verify mobile push setup."
    },
    {
      "path": "/mobile_push/e2ee/test_notification",
      "method": "POST",
      "operationId": "e2ee-test-notify",
      "summary": "",
      "user": "user456",
      "ideal": "Send an end-to-end encrypted test notification."
    },
    {
      "path": "/mobile_push/register",
      "method": "POST",
      "operationId": "register-push-device",
      "summary": "",
      "user": "user789",
      "ideal": "Register a mobile device for push notifications."
    },
    {
      "path": "/remotes/push/e2ee/register",
      "method": "POST",
      "operationId": "register-remote-push-device",
      "summary": "",
      "user": "user101112",
      "ideal": "Register a remote device for end-to-end encrypted push notifications."
    },
    {
      "path": "/navigation_views",
      "method": "GET",
      "operationId": "get-navigation-views",
      "summary": "",
      "user": "As a user, I want to retrieve a list of all navigation views available in the Zulip application so that I can understand the structure and organization of the navigation.",
      "ideal": "The response should include an array of navigation views with their respective properties such as id, name, and order."
    },
    {
      "path": "/navigation_views",
      "method": "POST",
      "operationId": "add-navigation-view",
      "summary": "",
      "user": "As a user, I want to add a new navigation view to the Zulip application so that I can customize my navigation experience according to my preferences.",
      "ideal": "The response should confirm the successful creation of the navigation view and return the details of the newly created view."
    },
    {
      "path": "/navigation_views/{fragment}",
      "method": "PATCH",
      "operationId": "edit-navigation-view",
      "summary": "",
      "user": "As a user, I want to edit an existing navigation view in the Zulip application so that I can update its properties like name or order to better fit my workflow.",
      "ideal": "The response should indicate the successful update of the navigation view and return the updated details."
    },
    {
      "path": "/navigation_views/{fragment}",
      "method": "DELETE",
      "operationId": "remove-navigation-view",
      "summary": "",
      "user": "As a user, I want to remove a navigation view from the Zulip application that I no longer need, to keep my navigation clean and relevant.",
      "ideal": "The response should confirm the successful deletion of the navigation view and indicate that it is no longer available."
    },
    {
      "path": "/events",
      "method": "GET",
      "operationId": "get-events",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of events from the Zulip server."
    },
    {
      "path": "/events",
      "method": "DELETE",
      "operationId": "delete-queue",
      "summary": "",
      "user": "user456",
      "ideal": "Delete the event queue for the user."
    },
    {
      "path": "/register",
      "method": "POST",
      "operationId": "register-queue",
      "summary": "",
      "user": "user789",
      "ideal": "Register a new user to the Zulip server."
    },
    {
      "path": "/real-time",
      "method": "POST",
      "operationId": "POST /real-time",
      "summary": "",
      "user": "user101",
      "ideal": "Establish a real-time connection to receive events."
    },
    {
      "path": "/rest-error-handling",
      "method": "POST",
      "operationId": "rest-error-handling",
      "summary": "",
      "user": "user202",
      "ideal": "Test the error handling mechanism of the Zulip API."
    },
    {
      "path": "/reminders",
      "method": "GET",
      "operationId": "get-reminders",
      "summary": "",
      "user": "User wants to retrieve a list of all reminders they have set in Zulip to manage their tasks effectively.",
      "ideal": "A successful response with a list of reminders, including details such as reminder ID, content, and due date."
    },
    {
      "path": "/reminders",
      "method": "POST",
      "operationId": "create-message-reminder",
      "summary": "",
      "user": "User needs to create a reminder for an important message in Zulip to ensure they follow up on it later.",
      "ideal": "A successful response confirming the creation of the reminder, including the reminder ID and the content of the reminder."
    },
    {
      "path": "/reminders/{reminder_id}",
      "method": "DELETE",
      "operationId": "delete-reminder",
      "summary": "",
      "user": "User wants to delete a specific reminder that is no longer needed to keep their reminders organized.",
      "ideal": "A successful response indicating that the reminder has been deleted, with a confirmation message."
    },
    {
      "path": "/scheduled_messages",
      "method": "GET",
      "operationId": "get-scheduled-messages",
      "summary": "",
      "user": "User123",
      "ideal": "Retrieve a list of scheduled messages for the user."
    },
    {
      "path": "/scheduled_messages",
      "method": "POST",
      "operationId": "create-scheduled-message",
      "summary": "",
      "user": "User456",
      "ideal": "Create a new scheduled message with specified content and delivery time."
    },
    {
      "path": "/scheduled_messages/{scheduled_message_id}",
      "method": "PATCH",
      "operationId": "update-scheduled-message",
      "summary": "",
      "user": "User789",
      "ideal": "Update the content or delivery time of an existing scheduled message."
    },
    {
      "path": "/scheduled_messages/{scheduled_message_id}",
      "method": "DELETE",
      "operationId": "delete-scheduled-message",
      "summary": "",
      "user": "User101",
      "ideal": "Delete a specific scheduled message by its ID."
    },
    {
      "path": "/realm/emoji/custom_emoji",
      "method": "POST",
      "operationId": "upload-custom-emoji",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully uploads a custom emoji named 'custom_emoji'."
    },
    {
      "path": "/realm/emoji/custom_emoji",
      "method": "DELETE",
      "operationId": "deactivate-custom-emoji",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully deactivates the custom emoji named 'custom_emoji'."
    },
    {
      "path": "/realm/emoji",
      "method": "GET",
      "operationId": "get-custom-emoji",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieves a list of all custom emojis in the realm."
    },
    {
      "path": "/realm/presence",
      "method": "GET",
      "operationId": "get-presence",
      "summary": "",
      "user": "user123",
      "ideal": "Gets the presence status of all users in the realm."
    },
    {
      "path": "/realm/profile_fields",
      "method": "GET",
      "operationId": "get-custom-profile-fields",
      "summary": "",
      "user": "user123",
      "ideal": "Fetches the custom profile fields configured in the realm."
    },
    {
      "path": "/realm/profile_fields",
      "method": "PATCH",
      "operationId": "reorder-custom-profile-fields",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully reorders the custom profile fields."
    },
    {
      "path": "/realm/profile_fields",
      "method": "POST",
      "operationId": "create-custom-profile-field",
      "summary": "",
      "user": "user123",
      "ideal": "Creates a new custom profile field named 'New Field'."
    },
    {
      "path": "/realm/user_settings_defaults",
      "method": "PATCH",
      "operationId": "update-realm-user-settings-defaults",
      "summary": "",
      "user": "user123",
      "ideal": "Updates the default user settings for the realm."
    },
    {
      "path": "/realm/linkifiers",
      "method": "GET",
      "operationId": "get-linkifiers",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieves a list of all linkifiers in the realm."
    },
    {
      "path": "/realm/linkifiers",
      "method": "PATCH",
      "operationId": "reorder-linkifiers",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully reorders the linkifiers."
    },
    {
      "path": "/realm/filters",
      "method": "POST",
      "operationId": "add-linkifier",
      "summary": "",
      "user": "user123",
      "ideal": "Adds a new linkifier with the specified pattern."
    },
    {
      "path": "/realm/filters/{filter_id}",
      "method": "DELETE",
      "operationId": "remove-linkifier",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully removes the linkifier with the given filter_id."
    },
    {
      "path": "/realm/filters/{filter_id}",
      "method": "PATCH",
      "operationId": "update-linkifier",
      "summary": "",
      "user": "user123",
      "ideal": "Updates the linkifier with the specified filter_id."
    },
    {
      "path": "/realm/playgrounds",
      "method": "POST",
      "operationId": "add-code-playground",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully adds a new code playground."
    },
    {
      "path": "/realm/playgrounds/{playground_id}",
      "method": "DELETE",
      "operationId": "remove-code-playground",
      "summary": "",
      "user": "user123",
      "ideal": "Successfully removes the code playground with the given playground_id."
    },
    {
      "path": "/export/realm",
      "method": "GET",
      "operationId": "get-realm-exports",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieves the list of available realm exports."
    },
    {
      "path": "/export/realm",
      "method": "POST",
      "operationId": "export-realm",
      "summary": "",
      "user": "user123",
      "ideal": "Initiates the export process for the realm."
    },
    {
      "path": "/export/realm/consents",
      "method": "GET",
      "operationId": "get-realm-export-consents",
      "summary": "",
      "user": "user123",
      "ideal": "Fetches the consents related to realm exports."
    },
    {
      "path": "/realm/test_welcome_bot_custom_message",
      "method": "POST",
      "operationId": "test-welcome-bot-custom-message",
      "summary": "",
      "user": "user123",
      "ideal": "Tests the welcome bot's custom message functionality."
    },
    {
      "path": "/server_settings",
      "method": "GET",
      "operationId": "get-server-settings",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieves the current server settings."
    },
    {
      "path": "/users",
      "method": "GET",
      "operationId": "get-users",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all users in the organization."
    },
    {
      "path": "/users",
      "method": "POST",
      "operationId": "create-user",
      "summary": "",
      "user": "admin",
      "ideal": "Create a new user with specified details."
    },
    {
      "path": "/users/me",
      "method": "GET",
      "operationId": "get-own-user",
      "summary": "",
      "user": "user123",
      "ideal": "Fetch the details of the currently authenticated user."
    },
    {
      "path": "/users/me/alert_words",
      "method": "POST",
      "operationId": "add-alert-words",
      "summary": "",
      "user": "user123",
      "ideal": "Add new alert words for the user to receive notifications."
    },
    {
      "path": "/users/{user_id}/status",
      "method": "POST",
      "operationId": "update-status-for-user",
      "summary": "",
      "user": "admin",
      "ideal": "Update the status message for a specific user."
    },
    {
      "path": "/users/me/presence",
      "method": "POST",
      "operationId": "update-presence",
      "summary": "",
      "user": "user123",
      "ideal": "Update the presence status of the currently authenticated user."
    },
    {
      "path": "/user_groups",
      "method": "GET",
      "operationId": "get-user-groups",
      "summary": "",
      "user": "admin",
      "ideal": "Retrieve a list of all user groups in the organization."
    },
    {
      "path": "/user_groups/{user_group_id}/members",
      "method": "GET",
      "operationId": "get-user-group-members",
      "summary": "",
      "user": "admin",
      "ideal": "Get the members of a specific user group."
    },
    {
      "path": "/attachments",
      "method": "GET",
      "operationId": "get-attachments",
      "summary": "",
      "user": "user123",
      "ideal": "Retrieve a list of all attachments available."
    },
    {
      "path": "/users/{user_id}/reactivate",
      "method": "POST",
      "operationId": "reactivate-user",
      "summary": "",
      "user": "admin",
      "ideal": "Reactivate a previously deactivated user."
    },
    {
      "path": "/zulip-outgoing-webhook",
      "method": "POST",
      "operationId": "zulip-outgoing-webhooks",
      "summary": "",
      "user": "user@example.com",
      "ideal": "This endpoint allows you to send outgoing webhooks from Zulip to your specified URL. You need to provide the necessary payload in the request body."
    }
  ]
}